
444ProjectUART_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004580  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  08004740  08004740  00014740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a04  08004a04  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004a04  08004a04  00014a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a0c  08004a0c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a0c  08004a0c  00014a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a10  08004a10  00014a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000070  08004a84  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08004a84  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cab7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b81  00000000  00000000  0002cb57  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a60  00000000  00000000  0002e6d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000978  00000000  00000000  0002f138  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029c2f  00000000  00000000  0002fab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000893f  00000000  00000000  000596df  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001005e1  00000000  00000000  0006201e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001625ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d18  00000000  00000000  0016267c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08004728 	.word	0x08004728

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	08004728 	.word	0x08004728

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <screenClear>:
uint8_t receivedKey;
int error;


//Clear screen function
void screenClear() {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
	char buffer[5];

	sprintf(buffer, "%c[2J", ASCII_ESC);
 80005a6:	463b      	mov	r3, r7
 80005a8:	221b      	movs	r2, #27
 80005aa:	4907      	ldr	r1, [pc, #28]	; (80005c8 <screenClear+0x28>)
 80005ac:	4618      	mov	r0, r3
 80005ae:	f003 fcb7 	bl	8003f20 <siprintf>
	HAL_UART_Transmit(&huart1, &buffer, sizeof(buffer), HAL_MAX_DELAY);
 80005b2:	4639      	mov	r1, r7
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005b8:	2205      	movs	r2, #5
 80005ba:	4804      	ldr	r0, [pc, #16]	; (80005cc <screenClear+0x2c>)
 80005bc:	f002 fb78 	bl	8002cb0 <HAL_UART_Transmit>
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	08004740 	.word	0x08004740
 80005cc:	2000022c 	.word	0x2000022c

080005d0 <invisibleCursor>:

//Make cursor invisible
void invisibleCursor() {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
	char buffer[6];

	sprintf(buffer, "%c[?25l", ASCII_ESC);
 80005d6:	463b      	mov	r3, r7
 80005d8:	221b      	movs	r2, #27
 80005da:	4907      	ldr	r1, [pc, #28]	; (80005f8 <invisibleCursor+0x28>)
 80005dc:	4618      	mov	r0, r3
 80005de:	f003 fc9f 	bl	8003f20 <siprintf>
	HAL_UART_Transmit(&huart1, &buffer, sizeof(buffer), HAL_MAX_DELAY);
 80005e2:	4639      	mov	r1, r7
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005e8:	2206      	movs	r2, #6
 80005ea:	4804      	ldr	r0, [pc, #16]	; (80005fc <invisibleCursor+0x2c>)
 80005ec:	f002 fb60 	bl	8002cb0 <HAL_UART_Transmit>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	08004748 	.word	0x08004748
 80005fc:	2000022c 	.word	0x2000022c

08000600 <printWelcomeScreen>:

//Print welcome screen
void printWelcomeScreen() {
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	sprintf(title, "                         Welcome To Karaoke!                          "); //70 long
 8000604:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <printWelcomeScreen+0x34>)
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <printWelcomeScreen+0x38>)
 8000608:	4610      	mov	r0, r2
 800060a:	4619      	mov	r1, r3
 800060c:	2347      	movs	r3, #71	; 0x47
 800060e:	461a      	mov	r2, r3
 8000610:	f003 fc3e 	bl	8003e90 <memcpy>
	sprintf(screen, "\r//////////////////////////////////////////////////////////////////////////\r\n//%s//\r\n//////////////////////////////////////////////////////////////////////////\r\n\n\nPress any key to continue...", title);
 8000614:	4a07      	ldr	r2, [pc, #28]	; (8000634 <printWelcomeScreen+0x34>)
 8000616:	4909      	ldr	r1, [pc, #36]	; (800063c <printWelcomeScreen+0x3c>)
 8000618:	4809      	ldr	r0, [pc, #36]	; (8000640 <printWelcomeScreen+0x40>)
 800061a:	f003 fc81 	bl	8003f20 <siprintf>
	HAL_UART_Transmit(&huart1, &screen, sizeof(screen), HAL_MAX_DELAY);
 800061e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000622:	f240 1203 	movw	r2, #259	; 0x103
 8000626:	4906      	ldr	r1, [pc, #24]	; (8000640 <printWelcomeScreen+0x40>)
 8000628:	4806      	ldr	r0, [pc, #24]	; (8000644 <printWelcomeScreen+0x44>)
 800062a:	f002 fb41 	bl	8002cb0 <HAL_UART_Transmit>
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200001e4 	.word	0x200001e4
 8000638:	08004750 	.word	0x08004750
 800063c:	08004798 	.word	0x08004798
 8000640:	200000e0 	.word	0x200000e0
 8000644:	2000022c 	.word	0x2000022c

08000648 <printGame>:

//Print the game starting screen
void printGame(int goalTonePeriod, int voiceTonePeriod, int score) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]

	screenClear();
 8000654:	f7ff ffa4 	bl	80005a0 <screenClear>

	sprintf(liveToneAndGoal, "                                                                      "); //70 long
 8000658:	4a11      	ldr	r2, [pc, #68]	; (80006a0 <printGame+0x58>)
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <printGame+0x5c>)
 800065c:	4610      	mov	r0, r2
 800065e:	4619      	mov	r1, r3
 8000660:	2347      	movs	r3, #71	; 0x47
 8000662:	461a      	mov	r2, r3
 8000664:	f003 fc14 	bl	8003e90 <memcpy>

	liveToneAndGoal[goalTonePeriod] = 'I';
 8000668:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <printGame+0x58>)
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	4413      	add	r3, r2
 800066e:	2249      	movs	r2, #73	; 0x49
 8000670:	701a      	strb	r2, [r3, #0]
	liveToneAndGoal[voiceTonePeriod] = 'I';
 8000672:	4a0b      	ldr	r2, [pc, #44]	; (80006a0 <printGame+0x58>)
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	4413      	add	r3, r2
 8000678:	2249      	movs	r2, #73	; 0x49
 800067a:	701a      	strb	r2, [r3, #0]

	sprintf(screen, "\r//////////////////////////////////////////////////////////////////////////\r\n//%s//\r\n//////////////////////////////////////////////////////////////////////////\r\n\n\n\t+---\tSCORE:\t%d\t---+        ", liveToneAndGoal, score);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4a08      	ldr	r2, [pc, #32]	; (80006a0 <printGame+0x58>)
 8000680:	4909      	ldr	r1, [pc, #36]	; (80006a8 <printGame+0x60>)
 8000682:	480a      	ldr	r0, [pc, #40]	; (80006ac <printGame+0x64>)
 8000684:	f003 fc4c 	bl	8003f20 <siprintf>
	HAL_UART_Transmit(&huart1, &screen, sizeof(screen), HAL_MAX_DELAY);
 8000688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800068c:	f240 1203 	movw	r2, #259	; 0x103
 8000690:	4906      	ldr	r1, [pc, #24]	; (80006ac <printGame+0x64>)
 8000692:	4807      	ldr	r0, [pc, #28]	; (80006b0 <printGame+0x68>)
 8000694:	f002 fb0c 	bl	8002cb0 <HAL_UART_Transmit>
}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000098 	.word	0x20000098
 80006a4:	08004858 	.word	0x08004858
 80006a8:	080048a0 	.word	0x080048a0
 80006ac:	200000e0 	.word	0x200000e0
 80006b0:	2000022c 	.word	0x2000022c

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ba:	f000 fa6e 	bl	8000b9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006be:	f000 f853 	bl	8000768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c2:	f000 f915 	bl	80008f0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006c6:	f000 f8c7 	bl	8000858 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
//############################################################################################################################################

  invisibleCursor();
 80006ca:	f7ff ff81 	bl	80005d0 <invisibleCursor>

  screenClear(); //Start with fresh screen
 80006ce:	f7ff ff67 	bl	80005a0 <screenClear>

  printWelcomeScreen();
 80006d2:	f7ff ff95 	bl	8000600 <printWelcomeScreen>

  HAL_UART_Receive(&huart1, &receivedKey, 1, HAL_MAX_DELAY); //Wait for key press before starting game
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006da:	2201      	movs	r2, #1
 80006dc:	491f      	ldr	r1, [pc, #124]	; (800075c <main+0xa8>)
 80006de:	4820      	ldr	r0, [pc, #128]	; (8000760 <main+0xac>)
 80006e0:	f002 fb7d 	bl	8002dde <HAL_UART_Receive>

  screenClear();
 80006e4:	f7ff ff5c 	bl	80005a0 <screenClear>

  int success = 1; //Create first goal tone period
 80006e8:	2301      	movs	r3, #1
 80006ea:	60fb      	str	r3, [r7, #12]
  int goalTonePeriod;
  int voiceTonePeriod;
  int score = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	603b      	str	r3, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (success) {
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d015      	beq.n	8000722 <main+0x6e>
		  goalTonePeriod = rand()%66;
 80006f6:	f003 fbdf 	bl	8003eb8 <rand>
 80006fa:	4602      	mov	r2, r0
 80006fc:	4b19      	ldr	r3, [pc, #100]	; (8000764 <main+0xb0>)
 80006fe:	fb83 1302 	smull	r1, r3, r3, r2
 8000702:	1119      	asrs	r1, r3, #4
 8000704:	17d3      	asrs	r3, r2, #31
 8000706:	1ac9      	subs	r1, r1, r3
 8000708:	460b      	mov	r3, r1
 800070a:	015b      	lsls	r3, r3, #5
 800070c:	440b      	add	r3, r1
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	60bb      	str	r3, [r7, #8]
		  voiceTonePeriod = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
		  score++;
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	3301      	adds	r3, #1
 800071c:	603b      	str	r3, [r7, #0]
		  success = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
	  }


	  printGame(goalTonePeriod, voiceTonePeriod, score);
 8000722:	683a      	ldr	r2, [r7, #0]
 8000724:	6879      	ldr	r1, [r7, #4]
 8000726:	68b8      	ldr	r0, [r7, #8]
 8000728:	f7ff ff8e 	bl	8000648 <printGame>

	  if (goalTonePeriod == voiceTonePeriod) success = 1;
 800072c:	68ba      	ldr	r2, [r7, #8]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	429a      	cmp	r2, r3
 8000732:	d101      	bne.n	8000738 <main+0x84>
 8000734:	2301      	movs	r3, #1
 8000736:	60fb      	str	r3, [r7, #12]

	  voiceTonePeriod = (voiceTonePeriod + 1)%66;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	1c5a      	adds	r2, r3, #1
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <main+0xb0>)
 800073e:	fb83 1302 	smull	r1, r3, r3, r2
 8000742:	1119      	asrs	r1, r3, #4
 8000744:	17d3      	asrs	r3, r2, #31
 8000746:	1ac9      	subs	r1, r1, r3
 8000748:	460b      	mov	r3, r1
 800074a:	015b      	lsls	r3, r3, #5
 800074c:	440b      	add	r3, r1
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	607b      	str	r3, [r7, #4]

	  HAL_Delay(100);
 8000754:	2064      	movs	r0, #100	; 0x64
 8000756:	f000 fa95 	bl	8000c84 <HAL_Delay>
	  if (success) {
 800075a:	e7c9      	b.n	80006f0 <main+0x3c>
 800075c:	2000022a 	.word	0x2000022a
 8000760:	2000022c 	.word	0x2000022c
 8000764:	3e0f83e1 	.word	0x3e0f83e1

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b0bc      	sub	sp, #240	; 0xf0
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000772:	2244      	movs	r2, #68	; 0x44
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f003 fb95 	bl	8003ea6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2294      	movs	r2, #148	; 0x94
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f003 fb87 	bl	8003ea6 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000798:	f44f 7000 	mov.w	r0, #512	; 0x200
 800079c:	f000 fdb6 	bl	800130c <HAL_PWREx_ControlVoltageScaling>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x42>
  {
    Error_Handler();
 80007a6:	f000 f8bb 	bl	8000920 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007aa:	2310      	movs	r3, #16
 80007ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007b0:	2301      	movs	r3, #1
 80007b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007bc:	2360      	movs	r3, #96	; 0x60
 80007be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007c8:	2301      	movs	r3, #1
 80007ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007ce:	2301      	movs	r3, #1
 80007d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007d4:	2328      	movs	r3, #40	; 0x28
 80007d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007da:	2302      	movs	r3, #2
 80007dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 fe2f 	bl	8001454 <HAL_RCC_OscConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007fc:	f000 f890 	bl	8000920 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000800:	230f      	movs	r3, #15
 8000802:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000806:	2303      	movs	r3, #3
 8000808:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800081e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000822:	2103      	movs	r1, #3
 8000824:	4618      	mov	r0, r3
 8000826:	f001 fa3b 	bl	8001ca0 <HAL_RCC_ClockConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000830:	f000 f876 	bl	8000920 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000834:	2301      	movs	r3, #1
 8000836:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000838:	2300      	movs	r3, #0
 800083a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	4618      	mov	r0, r3
 8000840:	f001 fcde 	bl	8002200 <HAL_RCCEx_PeriphCLKConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800084a:	f000 f869 	bl	8000920 <Error_Handler>
  }
}
 800084e:	bf00      	nop
 8000850:	37f0      	adds	r7, #240	; 0xf0
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800085c:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 800085e:	4a23      	ldr	r2, [pc, #140]	; (80008ec <MX_USART1_UART_Init+0x94>)
 8000860:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000862:	4b21      	ldr	r3, [pc, #132]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008a0:	4811      	ldr	r0, [pc, #68]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 80008a2:	f002 f9b5 	bl	8002c10 <HAL_UART_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008ac:	f000 f838 	bl	8000920 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b0:	2100      	movs	r1, #0
 80008b2:	480d      	ldr	r0, [pc, #52]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 80008b4:	f003 f9de 	bl	8003c74 <HAL_UARTEx_SetTxFifoThreshold>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008be:	f000 f82f 	bl	8000920 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c2:	2100      	movs	r1, #0
 80008c4:	4808      	ldr	r0, [pc, #32]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 80008c6:	f003 fa13 	bl	8003cf0 <HAL_UARTEx_SetRxFifoThreshold>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008d0:	f000 f826 	bl	8000920 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_USART1_UART_Init+0x90>)
 80008d6:	f003 f994 	bl	8003c02 <HAL_UARTEx_DisableFifoMode>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008e0:	f000 f81e 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	2000022c 	.word	0x2000022c
 80008ec:	40013800 	.word	0x40013800

080008f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_GPIO_Init+0x2c>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a08      	ldr	r2, [pc, #32]	; (800091c <MX_GPIO_Init+0x2c>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_GPIO_Init+0x2c>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]

}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	40021000 	.word	0x40021000

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000926:	e7fe      	b.n	8000926 <Error_Handler+0x6>

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <HAL_MspInit+0x44>)
 8000930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000932:	4a0e      	ldr	r2, [pc, #56]	; (800096c <HAL_MspInit+0x44>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6613      	str	r3, [r2, #96]	; 0x60
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <HAL_MspInit+0x44>)
 800093c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <HAL_MspInit+0x44>)
 8000948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094a:	4a08      	ldr	r2, [pc, #32]	; (800096c <HAL_MspInit+0x44>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000950:	6593      	str	r3, [r2, #88]	; 0x58
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_MspInit+0x44>)
 8000954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000

08000970 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a1b      	ldr	r2, [pc, #108]	; (80009fc <HAL_UART_MspInit+0x8c>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d12f      	bne.n	80009f2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000992:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <HAL_UART_MspInit+0x90>)
 8000994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000996:	4a1a      	ldr	r2, [pc, #104]	; (8000a00 <HAL_UART_MspInit+0x90>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	6613      	str	r3, [r2, #96]	; 0x60
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <HAL_UART_MspInit+0x90>)
 80009a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <HAL_UART_MspInit+0x90>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	4a14      	ldr	r2, [pc, #80]	; (8000a00 <HAL_UART_MspInit+0x90>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b6:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <HAL_UART_MspInit+0x90>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009c2:	23c0      	movs	r3, #192	; 0xc0
 80009c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ce:	2303      	movs	r3, #3
 80009d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009d2:	2307      	movs	r3, #7
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	4809      	ldr	r0, [pc, #36]	; (8000a04 <HAL_UART_MspInit+0x94>)
 80009de:	f000 fae3 	bl	8000fa8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	2025      	movs	r0, #37	; 0x25
 80009e8:	f000 fa49 	bl	8000e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009ec:	2025      	movs	r0, #37	; 0x25
 80009ee:	f000 fa62 	bl	8000eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009f2:	bf00      	nop
 80009f4:	3728      	adds	r7, #40	; 0x28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40013800 	.word	0x40013800
 8000a00:	40021000 	.word	0x40021000
 8000a04:	48000400 	.word	0x48000400

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <NMI_Handler+0x4>

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a54:	f000 f8f6 	bl	8000c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <USART1_IRQHandler+0x10>)
 8000a62:	f002 fa8d 	bl	8002f80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	2000022c 	.word	0x2000022c

08000a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a78:	4a14      	ldr	r2, [pc, #80]	; (8000acc <_sbrk+0x5c>)
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <_sbrk+0x60>)
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a84:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <_sbrk+0x64>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d102      	bne.n	8000a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <_sbrk+0x64>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <_sbrk+0x68>)
 8000a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <_sbrk+0x64>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d207      	bcs.n	8000ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa0:	f003 f9cc 	bl	8003e3c <__errno>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	230c      	movs	r3, #12
 8000aa8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aae:	e009      	b.n	8000ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <_sbrk+0x64>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ab6:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <_sbrk+0x64>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	4a05      	ldr	r2, [pc, #20]	; (8000ad4 <_sbrk+0x64>)
 8000ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3718      	adds	r7, #24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	200a0000 	.word	0x200a0000
 8000ad0:	00000400 	.word	0x00000400
 8000ad4:	2000008c 	.word	0x2000008c
 8000ad8:	200002c8 	.word	0x200002c8

08000adc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae0:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <SystemInit+0x64>)
 8000ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae6:	4a16      	ldr	r2, [pc, #88]	; (8000b40 <SystemInit+0x64>)
 8000ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <SystemInit+0x68>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a13      	ldr	r2, [pc, #76]	; (8000b44 <SystemInit+0x68>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <SystemInit+0x68>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <SystemInit+0x68>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <SystemInit+0x68>)
 8000b08:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b0c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b10:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <SystemInit+0x68>)
 8000b14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b18:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <SystemInit+0x68>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a09      	ldr	r2, [pc, #36]	; (8000b44 <SystemInit+0x68>)
 8000b20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b24:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b26:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <SystemInit+0x68>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <SystemInit+0x64>)
 8000b2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b32:	609a      	str	r2, [r3, #8]
#endif
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00
 8000b44:	40021000 	.word	0x40021000

08000b48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b4c:	f7ff ffc6 	bl	8000adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b50:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b52:	e003      	b.n	8000b5c <LoopCopyDataInit>

08000b54 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b54:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b56:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b58:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b5a:	3104      	adds	r1, #4

08000b5c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b5c:	480a      	ldr	r0, [pc, #40]	; (8000b88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b60:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b62:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b64:	d3f6      	bcc.n	8000b54 <CopyDataInit>
	ldr	r2, =_sbss
 8000b66:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b68:	e002      	b.n	8000b70 <LoopFillZerobss>

08000b6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b6a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b6c:	f842 3b04 	str.w	r3, [r2], #4

08000b70 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <LoopForever+0x16>)
	cmp	r2, r3
 8000b72:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b74:	d3f9      	bcc.n	8000b6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b76:	f003 f967 	bl	8003e48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b7a:	f7ff fd9b 	bl	80006b4 <main>

08000b7e <LoopForever>:

LoopForever:
    b LoopForever
 8000b7e:	e7fe      	b.n	8000b7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b80:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000b84:	08004a14 	.word	0x08004a14
	ldr	r0, =_sdata
 8000b88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b8c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000b90:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000b94:	200002c4 	.word	0x200002c4

08000b98 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b98:	e7fe      	b.n	8000b98 <ADC1_IRQHandler>

08000b9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f000 f95f 	bl	8000e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000baa:	2000      	movs	r0, #0
 8000bac:	f000 f80e 	bl	8000bcc <HAL_InitTick>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d002      	beq.n	8000bbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	71fb      	strb	r3, [r7, #7]
 8000bba:	e001      	b.n	8000bc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bbc:	f7ff feb4 	bl	8000928 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bd8:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <HAL_InitTick+0x6c>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d023      	beq.n	8000c28 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000be0:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <HAL_InitTick+0x70>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <HAL_InitTick+0x6c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	4619      	mov	r1, r3
 8000bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 f96b 	bl	8000ed2 <HAL_SYSTICK_Config>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d10f      	bne.n	8000c22 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d809      	bhi.n	8000c1c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	f000 f935 	bl	8000e7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c14:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <HAL_InitTick+0x74>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6013      	str	r3, [r2, #0]
 8000c1a:	e007      	b.n	8000c2c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	73fb      	strb	r3, [r7, #15]
 8000c20:	e004      	b.n	8000c2c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	73fb      	strb	r3, [r7, #15]
 8000c26:	e001      	b.n	8000c2c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000008 	.word	0x20000008
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	20000004 	.word	0x20000004

08000c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_IncTick+0x20>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x24>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <HAL_IncTick+0x24>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008
 8000c68:	200002bc 	.word	0x200002bc

08000c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <HAL_GetTick+0x14>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	200002bc 	.word	0x200002bc

08000c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c8c:	f7ff ffee 	bl	8000c6c <HAL_GetTick>
 8000c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c9c:	d005      	beq.n	8000caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <HAL_Delay+0x40>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000caa:	bf00      	nop
 8000cac:	f7ff ffde 	bl	8000c6c <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d8f7      	bhi.n	8000cac <HAL_Delay+0x28>
  {
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000008 	.word	0x20000008

08000cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__NVIC_SetPriorityGrouping+0x44>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfa:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	60d3      	str	r3, [r2, #12]
}
 8000d00:	bf00      	nop
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d14:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <__NVIC_GetPriorityGrouping+0x18>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	0a1b      	lsrs	r3, r3, #8
 8000d1a:	f003 0307 	and.w	r3, r3, #7
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	db0b      	blt.n	8000d56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	f003 021f 	and.w	r2, r3, #31
 8000d44:	4907      	ldr	r1, [pc, #28]	; (8000d64 <__NVIC_EnableIRQ+0x38>)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	095b      	lsrs	r3, r3, #5
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000e100 	.word	0xe000e100

08000d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	db0a      	blt.n	8000d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	490c      	ldr	r1, [pc, #48]	; (8000db4 <__NVIC_SetPriority+0x4c>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	0112      	lsls	r2, r2, #4
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d90:	e00a      	b.n	8000da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4908      	ldr	r1, [pc, #32]	; (8000db8 <__NVIC_SetPriority+0x50>)
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	3b04      	subs	r3, #4
 8000da0:	0112      	lsls	r2, r2, #4
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	440b      	add	r3, r1
 8000da6:	761a      	strb	r2, [r3, #24]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000e100 	.word	0xe000e100
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f1c3 0307 	rsb	r3, r3, #7
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	bf28      	it	cs
 8000dda:	2304      	movcs	r3, #4
 8000ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3304      	adds	r3, #4
 8000de2:	2b06      	cmp	r3, #6
 8000de4:	d902      	bls.n	8000dec <NVIC_EncodePriority+0x30>
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3b03      	subs	r3, #3
 8000dea:	e000      	b.n	8000dee <NVIC_EncodePriority+0x32>
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	401a      	ands	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	43d9      	mvns	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	4313      	orrs	r3, r2
         );
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3724      	adds	r7, #36	; 0x24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e34:	d301      	bcc.n	8000e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00f      	b.n	8000e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <SysTick_Config+0x40>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e42:	210f      	movs	r1, #15
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e48:	f7ff ff8e 	bl	8000d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <SysTick_Config+0x40>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e52:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <SysTick_Config+0x40>)
 8000e54:	2207      	movs	r2, #7
 8000e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	e000e010 	.word	0xe000e010

08000e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff29 	bl	8000cc8 <__NVIC_SetPriorityGrouping>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4603      	mov	r3, r0
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
 8000e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e90:	f7ff ff3e 	bl	8000d10 <__NVIC_GetPriorityGrouping>
 8000e94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	68b9      	ldr	r1, [r7, #8]
 8000e9a:	6978      	ldr	r0, [r7, #20]
 8000e9c:	f7ff ff8e 	bl	8000dbc <NVIC_EncodePriority>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff5d 	bl	8000d68 <__NVIC_SetPriority>
}
 8000eae:	bf00      	nop
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff31 	bl	8000d2c <__NVIC_EnableIRQ>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ffa2 	bl	8000e24 <SysTick_Config>
 8000ee0:	4603      	mov	r3, r0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b084      	sub	sp, #16
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d005      	beq.n	8000f0e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2204      	movs	r2, #4
 8000f06:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	e047      	b.n	8000f9e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f022 020e 	bic.w	r2, r2, #14
 8000f1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f022 0201 	bic.w	r2, r2, #1
 8000f2c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	f003 021c 	and.w	r2, r3, #28
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f50:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f5a:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00c      	beq.n	8000f7e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f72:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000f7c:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2201      	movs	r2, #1
 8000f82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	4798      	blx	r3
    }
  }
  return status;
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b087      	sub	sp, #28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fb6:	e166      	b.n	8001286 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f000 8158 	beq.w	8001280 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d00b      	beq.n	8000ff0 <HAL_GPIO_Init+0x48>
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d007      	beq.n	8000ff0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fe4:	2b11      	cmp	r3, #17
 8000fe6:	d003      	beq.n	8000ff0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b12      	cmp	r3, #18
 8000fee:	d130      	bne.n	8001052 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	68da      	ldr	r2, [r3, #12]
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001026:	2201      	movs	r2, #1
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	091b      	lsrs	r3, r3, #4
 800103c:	f003 0201 	and.w	r2, r3, #1
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	2203      	movs	r2, #3
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b02      	cmp	r3, #2
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0xea>
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b12      	cmp	r3, #18
 8001090:	d123      	bne.n	80010da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	08da      	lsrs	r2, r3, #3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3208      	adds	r2, #8
 800109a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800109e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	220f      	movs	r2, #15
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	691a      	ldr	r2, [r3, #16]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	08da      	lsrs	r2, r3, #3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3208      	adds	r2, #8
 80010d4:	6939      	ldr	r1, [r7, #16]
 80010d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	2203      	movs	r2, #3
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4013      	ands	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0203 	and.w	r2, r3, #3
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001116:	2b00      	cmp	r3, #0
 8001118:	f000 80b2 	beq.w	8001280 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111c:	4b61      	ldr	r3, [pc, #388]	; (80012a4 <HAL_GPIO_Init+0x2fc>)
 800111e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001120:	4a60      	ldr	r2, [pc, #384]	; (80012a4 <HAL_GPIO_Init+0x2fc>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	6613      	str	r3, [r2, #96]	; 0x60
 8001128:	4b5e      	ldr	r3, [pc, #376]	; (80012a4 <HAL_GPIO_Init+0x2fc>)
 800112a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001134:	4a5c      	ldr	r2, [pc, #368]	; (80012a8 <HAL_GPIO_Init+0x300>)
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	089b      	lsrs	r3, r3, #2
 800113a:	3302      	adds	r3, #2
 800113c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	220f      	movs	r2, #15
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800115e:	d02b      	beq.n	80011b8 <HAL_GPIO_Init+0x210>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a52      	ldr	r2, [pc, #328]	; (80012ac <HAL_GPIO_Init+0x304>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d025      	beq.n	80011b4 <HAL_GPIO_Init+0x20c>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a51      	ldr	r2, [pc, #324]	; (80012b0 <HAL_GPIO_Init+0x308>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d01f      	beq.n	80011b0 <HAL_GPIO_Init+0x208>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a50      	ldr	r2, [pc, #320]	; (80012b4 <HAL_GPIO_Init+0x30c>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d019      	beq.n	80011ac <HAL_GPIO_Init+0x204>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a4f      	ldr	r2, [pc, #316]	; (80012b8 <HAL_GPIO_Init+0x310>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d013      	beq.n	80011a8 <HAL_GPIO_Init+0x200>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a4e      	ldr	r2, [pc, #312]	; (80012bc <HAL_GPIO_Init+0x314>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d00d      	beq.n	80011a4 <HAL_GPIO_Init+0x1fc>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a4d      	ldr	r2, [pc, #308]	; (80012c0 <HAL_GPIO_Init+0x318>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d007      	beq.n	80011a0 <HAL_GPIO_Init+0x1f8>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a4c      	ldr	r2, [pc, #304]	; (80012c4 <HAL_GPIO_Init+0x31c>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d101      	bne.n	800119c <HAL_GPIO_Init+0x1f4>
 8001198:	2307      	movs	r3, #7
 800119a:	e00e      	b.n	80011ba <HAL_GPIO_Init+0x212>
 800119c:	2308      	movs	r3, #8
 800119e:	e00c      	b.n	80011ba <HAL_GPIO_Init+0x212>
 80011a0:	2306      	movs	r3, #6
 80011a2:	e00a      	b.n	80011ba <HAL_GPIO_Init+0x212>
 80011a4:	2305      	movs	r3, #5
 80011a6:	e008      	b.n	80011ba <HAL_GPIO_Init+0x212>
 80011a8:	2304      	movs	r3, #4
 80011aa:	e006      	b.n	80011ba <HAL_GPIO_Init+0x212>
 80011ac:	2303      	movs	r3, #3
 80011ae:	e004      	b.n	80011ba <HAL_GPIO_Init+0x212>
 80011b0:	2302      	movs	r3, #2
 80011b2:	e002      	b.n	80011ba <HAL_GPIO_Init+0x212>
 80011b4:	2301      	movs	r3, #1
 80011b6:	e000      	b.n	80011ba <HAL_GPIO_Init+0x212>
 80011b8:	2300      	movs	r3, #0
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	f002 0203 	and.w	r2, r2, #3
 80011c0:	0092      	lsls	r2, r2, #2
 80011c2:	4093      	lsls	r3, r2
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011ca:	4937      	ldr	r1, [pc, #220]	; (80012a8 <HAL_GPIO_Init+0x300>)
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	089b      	lsrs	r3, r3, #2
 80011d0:	3302      	adds	r3, #2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011d8:	4b3b      	ldr	r3, [pc, #236]	; (80012c8 <HAL_GPIO_Init+0x320>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011fc:	4a32      	ldr	r2, [pc, #200]	; (80012c8 <HAL_GPIO_Init+0x320>)
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001202:	4b31      	ldr	r3, [pc, #196]	; (80012c8 <HAL_GPIO_Init+0x320>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	43db      	mvns	r3, r3
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	4013      	ands	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4313      	orrs	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001226:	4a28      	ldr	r2, [pc, #160]	; (80012c8 <HAL_GPIO_Init+0x320>)
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800122c:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <HAL_GPIO_Init+0x320>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	43db      	mvns	r3, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001250:	4a1d      	ldr	r2, [pc, #116]	; (80012c8 <HAL_GPIO_Init+0x320>)
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001256:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <HAL_GPIO_Init+0x320>)
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	43db      	mvns	r3, r3
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4013      	ands	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800127a:	4a13      	ldr	r2, [pc, #76]	; (80012c8 <HAL_GPIO_Init+0x320>)
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	3301      	adds	r3, #1
 8001284:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	fa22 f303 	lsr.w	r3, r2, r3
 8001290:	2b00      	cmp	r3, #0
 8001292:	f47f ae91 	bne.w	8000fb8 <HAL_GPIO_Init+0x10>
  }
}
 8001296:	bf00      	nop
 8001298:	371c      	adds	r7, #28
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40010000 	.word	0x40010000
 80012ac:	48000400 	.word	0x48000400
 80012b0:	48000800 	.word	0x48000800
 80012b4:	48000c00 	.word	0x48000c00
 80012b8:	48001000 	.word	0x48001000
 80012bc:	48001400 	.word	0x48001400
 80012c0:	48001800 	.word	0x48001800
 80012c4:	48001c00 	.word	0x48001c00
 80012c8:	40010400 	.word	0x40010400

080012cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012d0:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <HAL_PWREx_GetVoltageRange+0x3c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012dc:	d102      	bne.n	80012e4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80012de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e2:	e00b      	b.n	80012fc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <HAL_PWREx_GetVoltageRange+0x3c>)
 80012e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012f2:	d102      	bne.n	80012fa <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80012f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012f8:	e000      	b.n	80012fc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80012fa:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40007000 	.word	0x40007000

0800130c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d141      	bne.n	800139e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800131a:	4b4b      	ldr	r3, [pc, #300]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001326:	d131      	bne.n	800138c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001328:	4b47      	ldr	r3, [pc, #284]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800132a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800132e:	4a46      	ldr	r2, [pc, #280]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001334:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001338:	4b43      	ldr	r3, [pc, #268]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001340:	4a41      	ldr	r2, [pc, #260]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001342:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001346:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001348:	4b40      	ldr	r3, [pc, #256]	; (800144c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2232      	movs	r2, #50	; 0x32
 800134e:	fb02 f303 	mul.w	r3, r2, r3
 8001352:	4a3f      	ldr	r2, [pc, #252]	; (8001450 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001354:	fba2 2303 	umull	r2, r3, r2, r3
 8001358:	0c9b      	lsrs	r3, r3, #18
 800135a:	3301      	adds	r3, #1
 800135c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800135e:	e002      	b.n	8001366 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	3b01      	subs	r3, #1
 8001364:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001366:	4b38      	ldr	r3, [pc, #224]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800136e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001372:	d102      	bne.n	800137a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f2      	bne.n	8001360 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800137a:	4b33      	ldr	r3, [pc, #204]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001386:	d158      	bne.n	800143a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e057      	b.n	800143c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800138c:	4b2e      	ldr	r3, [pc, #184]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800138e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001392:	4a2d      	ldr	r2, [pc, #180]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001398:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800139c:	e04d      	b.n	800143a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013a4:	d141      	bne.n	800142a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013a6:	4b28      	ldr	r3, [pc, #160]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013b2:	d131      	bne.n	8001418 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013b4:	4b24      	ldr	r3, [pc, #144]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013ba:	4a23      	ldr	r2, [pc, #140]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c4:	4b20      	ldr	r3, [pc, #128]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013cc:	4a1e      	ldr	r2, [pc, #120]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80013d4:	4b1d      	ldr	r3, [pc, #116]	; (800144c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2232      	movs	r2, #50	; 0x32
 80013da:	fb02 f303 	mul.w	r3, r2, r3
 80013de:	4a1c      	ldr	r2, [pc, #112]	; (8001450 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013e0:	fba2 2303 	umull	r2, r3, r2, r3
 80013e4:	0c9b      	lsrs	r3, r3, #18
 80013e6:	3301      	adds	r3, #1
 80013e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ea:	e002      	b.n	80013f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013fe:	d102      	bne.n	8001406 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f2      	bne.n	80013ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800140e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001412:	d112      	bne.n	800143a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e011      	b.n	800143c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800141a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001424:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001428:	e007      	b.n	800143a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800142a:	4b07      	ldr	r3, [pc, #28]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001432:	4a05      	ldr	r2, [pc, #20]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001434:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001438:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	40007000 	.word	0x40007000
 800144c:	20000000 	.word	0x20000000
 8001450:	431bde83 	.word	0x431bde83

08001454 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d102      	bne.n	8001468 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	f000 bc16 	b.w	8001c94 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001468:	4ba0      	ldr	r3, [pc, #640]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f003 030c 	and.w	r3, r3, #12
 8001470:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001472:	4b9e      	ldr	r3, [pc, #632]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0310 	and.w	r3, r3, #16
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 80e4 	beq.w	8001652 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d007      	beq.n	80014a0 <HAL_RCC_OscConfig+0x4c>
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	2b0c      	cmp	r3, #12
 8001494:	f040 808b 	bne.w	80015ae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	2b01      	cmp	r3, #1
 800149c:	f040 8087 	bne.w	80015ae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014a0:	4b92      	ldr	r3, [pc, #584]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d005      	beq.n	80014b8 <HAL_RCC_OscConfig+0x64>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e3ed      	b.n	8001c94 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1a      	ldr	r2, [r3, #32]
 80014bc:	4b8b      	ldr	r3, [pc, #556]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0308 	and.w	r3, r3, #8
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d004      	beq.n	80014d2 <HAL_RCC_OscConfig+0x7e>
 80014c8:	4b88      	ldr	r3, [pc, #544]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014d0:	e005      	b.n	80014de <HAL_RCC_OscConfig+0x8a>
 80014d2:	4b86      	ldr	r3, [pc, #536]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 80014d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014de:	4293      	cmp	r3, r2
 80014e0:	d223      	bcs.n	800152a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 fdc8 	bl	800207c <RCC_SetFlashLatencyFromMSIRange>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e3ce      	b.n	8001c94 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014f6:	4b7d      	ldr	r3, [pc, #500]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a7c      	ldr	r2, [pc, #496]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 80014fc:	f043 0308 	orr.w	r3, r3, #8
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	4b7a      	ldr	r3, [pc, #488]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	4977      	ldr	r1, [pc, #476]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 8001510:	4313      	orrs	r3, r2
 8001512:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001514:	4b75      	ldr	r3, [pc, #468]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	4972      	ldr	r1, [pc, #456]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 8001524:	4313      	orrs	r3, r2
 8001526:	604b      	str	r3, [r1, #4]
 8001528:	e025      	b.n	8001576 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800152a:	4b70      	ldr	r3, [pc, #448]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a6f      	ldr	r2, [pc, #444]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 8001530:	f043 0308 	orr.w	r3, r3, #8
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	4b6d      	ldr	r3, [pc, #436]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	496a      	ldr	r1, [pc, #424]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 8001544:	4313      	orrs	r3, r2
 8001546:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001548:	4b68      	ldr	r3, [pc, #416]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69db      	ldr	r3, [r3, #28]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	4965      	ldr	r1, [pc, #404]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 8001558:	4313      	orrs	r3, r2
 800155a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d109      	bne.n	8001576 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	4618      	mov	r0, r3
 8001568:	f000 fd88 	bl	800207c <RCC_SetFlashLatencyFromMSIRange>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e38e      	b.n	8001c94 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001576:	f000 fcbf 	bl	8001ef8 <HAL_RCC_GetSysClockFreq>
 800157a:	4601      	mov	r1, r0
 800157c:	4b5b      	ldr	r3, [pc, #364]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	091b      	lsrs	r3, r3, #4
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	4a5a      	ldr	r2, [pc, #360]	; (80016f0 <HAL_RCC_OscConfig+0x29c>)
 8001588:	5cd3      	ldrb	r3, [r2, r3]
 800158a:	f003 031f 	and.w	r3, r3, #31
 800158e:	fa21 f303 	lsr.w	r3, r1, r3
 8001592:	4a58      	ldr	r2, [pc, #352]	; (80016f4 <HAL_RCC_OscConfig+0x2a0>)
 8001594:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001596:	4b58      	ldr	r3, [pc, #352]	; (80016f8 <HAL_RCC_OscConfig+0x2a4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fb16 	bl	8000bcc <HAL_InitTick>
 80015a0:	4603      	mov	r3, r0
 80015a2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d052      	beq.n	8001650 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	e372      	b.n	8001c94 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d032      	beq.n	800161c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015b6:	4b4d      	ldr	r3, [pc, #308]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a4c      	ldr	r2, [pc, #304]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015c2:	f7ff fb53 	bl	8000c6c <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015ca:	f7ff fb4f 	bl	8000c6c <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e35b      	b.n	8001c94 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015dc:	4b43      	ldr	r3, [pc, #268]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015e8:	4b40      	ldr	r3, [pc, #256]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a3f      	ldr	r2, [pc, #252]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 80015ee:	f043 0308 	orr.w	r3, r3, #8
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	4b3d      	ldr	r3, [pc, #244]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	493a      	ldr	r1, [pc, #232]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 8001602:	4313      	orrs	r3, r2
 8001604:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001606:	4b39      	ldr	r3, [pc, #228]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	4935      	ldr	r1, [pc, #212]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 8001616:	4313      	orrs	r3, r2
 8001618:	604b      	str	r3, [r1, #4]
 800161a:	e01a      	b.n	8001652 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800161c:	4b33      	ldr	r3, [pc, #204]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a32      	ldr	r2, [pc, #200]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 8001622:	f023 0301 	bic.w	r3, r3, #1
 8001626:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001628:	f7ff fb20 	bl	8000c6c <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001630:	f7ff fb1c 	bl	8000c6c <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e328      	b.n	8001c94 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001642:	4b2a      	ldr	r3, [pc, #168]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0x1dc>
 800164e:	e000      	b.n	8001652 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001650:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d073      	beq.n	8001746 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	2b08      	cmp	r3, #8
 8001662:	d005      	beq.n	8001670 <HAL_RCC_OscConfig+0x21c>
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	2b0c      	cmp	r3, #12
 8001668:	d10e      	bne.n	8001688 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	2b03      	cmp	r3, #3
 800166e:	d10b      	bne.n	8001688 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001670:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d063      	beq.n	8001744 <HAL_RCC_OscConfig+0x2f0>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d15f      	bne.n	8001744 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e305      	b.n	8001c94 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001690:	d106      	bne.n	80016a0 <HAL_RCC_OscConfig+0x24c>
 8001692:	4b16      	ldr	r3, [pc, #88]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a15      	ldr	r2, [pc, #84]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 8001698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	e01d      	b.n	80016dc <HAL_RCC_OscConfig+0x288>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016a8:	d10c      	bne.n	80016c4 <HAL_RCC_OscConfig+0x270>
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a0f      	ldr	r2, [pc, #60]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 80016b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a0c      	ldr	r2, [pc, #48]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 80016bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	e00b      	b.n	80016dc <HAL_RCC_OscConfig+0x288>
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a08      	ldr	r2, [pc, #32]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 80016ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a05      	ldr	r2, [pc, #20]	; (80016ec <HAL_RCC_OscConfig+0x298>)
 80016d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d01b      	beq.n	800171c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e4:	f7ff fac2 	bl	8000c6c <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ea:	e010      	b.n	800170e <HAL_RCC_OscConfig+0x2ba>
 80016ec:	40021000 	.word	0x40021000
 80016f0:	08004970 	.word	0x08004970
 80016f4:	20000000 	.word	0x20000000
 80016f8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016fc:	f7ff fab6 	bl	8000c6c <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b64      	cmp	r3, #100	; 0x64
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e2c2      	b.n	8001c94 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800170e:	4baf      	ldr	r3, [pc, #700]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0f0      	beq.n	80016fc <HAL_RCC_OscConfig+0x2a8>
 800171a:	e014      	b.n	8001746 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171c:	f7ff faa6 	bl	8000c6c <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001724:	f7ff faa2 	bl	8000c6c <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b64      	cmp	r3, #100	; 0x64
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e2ae      	b.n	8001c94 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001736:	4ba5      	ldr	r3, [pc, #660]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0x2d0>
 8001742:	e000      	b.n	8001746 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d060      	beq.n	8001814 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	2b04      	cmp	r3, #4
 8001756:	d005      	beq.n	8001764 <HAL_RCC_OscConfig+0x310>
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	2b0c      	cmp	r3, #12
 800175c:	d119      	bne.n	8001792 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d116      	bne.n	8001792 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001764:	4b99      	ldr	r3, [pc, #612]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800176c:	2b00      	cmp	r3, #0
 800176e:	d005      	beq.n	800177c <HAL_RCC_OscConfig+0x328>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e28b      	b.n	8001c94 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177c:	4b93      	ldr	r3, [pc, #588]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	061b      	lsls	r3, r3, #24
 800178a:	4990      	ldr	r1, [pc, #576]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 800178c:	4313      	orrs	r3, r2
 800178e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001790:	e040      	b.n	8001814 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d023      	beq.n	80017e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800179a:	4b8c      	ldr	r3, [pc, #560]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a8b      	ldr	r2, [pc, #556]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 80017a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a6:	f7ff fa61 	bl	8000c6c <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ae:	f7ff fa5d 	bl	8000c6c <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e269      	b.n	8001c94 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017c0:	4b82      	ldr	r3, [pc, #520]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0f0      	beq.n	80017ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017cc:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	061b      	lsls	r3, r3, #24
 80017da:	497c      	ldr	r1, [pc, #496]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	604b      	str	r3, [r1, #4]
 80017e0:	e018      	b.n	8001814 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a79      	ldr	r2, [pc, #484]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 80017e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ee:	f7ff fa3d 	bl	8000c6c <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f6:	f7ff fa39 	bl	8000c6c <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e245      	b.n	8001c94 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001808:	4b70      	ldr	r3, [pc, #448]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1f0      	bne.n	80017f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b00      	cmp	r3, #0
 800181e:	d03c      	beq.n	800189a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d01c      	beq.n	8001862 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001828:	4b68      	ldr	r3, [pc, #416]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 800182a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800182e:	4a67      	ldr	r2, [pc, #412]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001838:	f7ff fa18 	bl	8000c6c <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001840:	f7ff fa14 	bl	8000c6c <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e220      	b.n	8001c94 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001852:	4b5e      	ldr	r3, [pc, #376]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 8001854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0ef      	beq.n	8001840 <HAL_RCC_OscConfig+0x3ec>
 8001860:	e01b      	b.n	800189a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001862:	4b5a      	ldr	r3, [pc, #360]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 8001864:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001868:	4a58      	ldr	r2, [pc, #352]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 800186a:	f023 0301 	bic.w	r3, r3, #1
 800186e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001872:	f7ff f9fb 	bl	8000c6c <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800187a:	f7ff f9f7 	bl	8000c6c <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e203      	b.n	8001c94 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800188c:	4b4f      	ldr	r3, [pc, #316]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 800188e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1ef      	bne.n	800187a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 80a6 	beq.w	80019f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a8:	2300      	movs	r3, #0
 80018aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018ac:	4b47      	ldr	r3, [pc, #284]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 80018ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10d      	bne.n	80018d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b8:	4b44      	ldr	r3, [pc, #272]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 80018ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018bc:	4a43      	ldr	r2, [pc, #268]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 80018be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c2:	6593      	str	r3, [r2, #88]	; 0x58
 80018c4:	4b41      	ldr	r3, [pc, #260]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 80018c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018d0:	2301      	movs	r3, #1
 80018d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d4:	4b3e      	ldr	r3, [pc, #248]	; (80019d0 <HAL_RCC_OscConfig+0x57c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d118      	bne.n	8001912 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018e0:	4b3b      	ldr	r3, [pc, #236]	; (80019d0 <HAL_RCC_OscConfig+0x57c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a3a      	ldr	r2, [pc, #232]	; (80019d0 <HAL_RCC_OscConfig+0x57c>)
 80018e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ec:	f7ff f9be 	bl	8000c6c <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f4:	f7ff f9ba 	bl	8000c6c <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e1c6      	b.n	8001c94 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001906:	4b32      	ldr	r3, [pc, #200]	; (80019d0 <HAL_RCC_OscConfig+0x57c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d108      	bne.n	800192c <HAL_RCC_OscConfig+0x4d8>
 800191a:	4b2c      	ldr	r3, [pc, #176]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 800191c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001920:	4a2a      	ldr	r2, [pc, #168]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800192a:	e024      	b.n	8001976 <HAL_RCC_OscConfig+0x522>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2b05      	cmp	r3, #5
 8001932:	d110      	bne.n	8001956 <HAL_RCC_OscConfig+0x502>
 8001934:	4b25      	ldr	r3, [pc, #148]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 8001936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800193a:	4a24      	ldr	r2, [pc, #144]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 800193c:	f043 0304 	orr.w	r3, r3, #4
 8001940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001944:	4b21      	ldr	r3, [pc, #132]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 8001946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800194a:	4a20      	ldr	r2, [pc, #128]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001954:	e00f      	b.n	8001976 <HAL_RCC_OscConfig+0x522>
 8001956:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 8001958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800195c:	4a1b      	ldr	r2, [pc, #108]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 800195e:	f023 0301 	bic.w	r3, r3, #1
 8001962:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001966:	4b19      	ldr	r3, [pc, #100]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 8001968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800196c:	4a17      	ldr	r2, [pc, #92]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 800196e:	f023 0304 	bic.w	r3, r3, #4
 8001972:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d016      	beq.n	80019ac <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197e:	f7ff f975 	bl	8000c6c <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001984:	e00a      	b.n	800199c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001986:	f7ff f971 	bl	8000c6c <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	f241 3288 	movw	r2, #5000	; 0x1388
 8001994:	4293      	cmp	r3, r2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e17b      	b.n	8001c94 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <HAL_RCC_OscConfig+0x578>)
 800199e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0ed      	beq.n	8001986 <HAL_RCC_OscConfig+0x532>
 80019aa:	e01a      	b.n	80019e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ac:	f7ff f95e 	bl	8000c6c <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019b2:	e00f      	b.n	80019d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b4:	f7ff f95a 	bl	8000c6c <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d906      	bls.n	80019d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e164      	b.n	8001c94 <HAL_RCC_OscConfig+0x840>
 80019ca:	bf00      	nop
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019d4:	4ba8      	ldr	r3, [pc, #672]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 80019d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1e8      	bne.n	80019b4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019e2:	7ffb      	ldrb	r3, [r7, #31]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d105      	bne.n	80019f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e8:	4ba3      	ldr	r3, [pc, #652]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 80019ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ec:	4aa2      	ldr	r2, [pc, #648]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 80019ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0320 	and.w	r3, r3, #32
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d03c      	beq.n	8001a7a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d01c      	beq.n	8001a42 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a08:	4b9b      	ldr	r3, [pc, #620]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001a0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a0e:	4a9a      	ldr	r2, [pc, #616]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a18:	f7ff f928 	bl	8000c6c <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a20:	f7ff f924 	bl	8000c6c <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e130      	b.n	8001c94 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a32:	4b91      	ldr	r3, [pc, #580]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001a34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0ef      	beq.n	8001a20 <HAL_RCC_OscConfig+0x5cc>
 8001a40:	e01b      	b.n	8001a7a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a42:	4b8d      	ldr	r3, [pc, #564]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001a44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a48:	4a8b      	ldr	r2, [pc, #556]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001a4a:	f023 0301 	bic.w	r3, r3, #1
 8001a4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a52:	f7ff f90b 	bl	8000c6c <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a5a:	f7ff f907 	bl	8000c6c <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e113      	b.n	8001c94 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a6c:	4b82      	ldr	r3, [pc, #520]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001a6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1ef      	bne.n	8001a5a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8107 	beq.w	8001c92 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	f040 80cb 	bne.w	8001c24 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a8e:	4b7a      	ldr	r3, [pc, #488]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f003 0203 	and.w	r2, r3, #3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d12c      	bne.n	8001afc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	3b01      	subs	r3, #1
 8001aae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d123      	bne.n	8001afc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d11b      	bne.n	8001afc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ace:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d113      	bne.n	8001afc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ade:	085b      	lsrs	r3, r3, #1
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d109      	bne.n	8001afc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	085b      	lsrs	r3, r3, #1
 8001af4:	3b01      	subs	r3, #1
 8001af6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d06d      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	2b0c      	cmp	r3, #12
 8001b00:	d068      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b02:	4b5d      	ldr	r3, [pc, #372]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d105      	bne.n	8001b1a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b0e:	4b5a      	ldr	r3, [pc, #360]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e0ba      	b.n	8001c94 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b1e:	4b56      	ldr	r3, [pc, #344]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a55      	ldr	r2, [pc, #340]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001b24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b28:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b2a:	f7ff f89f 	bl	8000c6c <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b32:	f7ff f89b 	bl	8000c6c <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e0a7      	b.n	8001c94 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b44:	4b4c      	ldr	r3, [pc, #304]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1f0      	bne.n	8001b32 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b50:	4b49      	ldr	r3, [pc, #292]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001b52:	68da      	ldr	r2, [r3, #12]
 8001b54:	4b49      	ldr	r3, [pc, #292]	; (8001c7c <HAL_RCC_OscConfig+0x828>)
 8001b56:	4013      	ands	r3, r2
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b60:	3a01      	subs	r2, #1
 8001b62:	0112      	lsls	r2, r2, #4
 8001b64:	4311      	orrs	r1, r2
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b6a:	0212      	lsls	r2, r2, #8
 8001b6c:	4311      	orrs	r1, r2
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b72:	0852      	lsrs	r2, r2, #1
 8001b74:	3a01      	subs	r2, #1
 8001b76:	0552      	lsls	r2, r2, #21
 8001b78:	4311      	orrs	r1, r2
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b7e:	0852      	lsrs	r2, r2, #1
 8001b80:	3a01      	subs	r2, #1
 8001b82:	0652      	lsls	r2, r2, #25
 8001b84:	4311      	orrs	r1, r2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b8a:	06d2      	lsls	r2, r2, #27
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	493a      	ldr	r1, [pc, #232]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b94:	4b38      	ldr	r3, [pc, #224]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a37      	ldr	r2, [pc, #220]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001b9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ba0:	4b35      	ldr	r3, [pc, #212]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	4a34      	ldr	r2, [pc, #208]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001baa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bac:	f7ff f85e 	bl	8000c6c <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb4:	f7ff f85a 	bl	8000c6c <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e066      	b.n	8001c94 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc6:	4b2c      	ldr	r3, [pc, #176]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bd2:	e05e      	b.n	8001c92 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e05d      	b.n	8001c94 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd8:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d156      	bne.n	8001c92 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001be4:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a23      	ldr	r2, [pc, #140]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001bea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bf0:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	4a20      	ldr	r2, [pc, #128]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001bf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bfa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bfc:	f7ff f836 	bl	8000c6c <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c04:	f7ff f832 	bl	8000c6c <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e03e      	b.n	8001c94 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0x7b0>
 8001c22:	e036      	b.n	8001c92 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	2b0c      	cmp	r3, #12
 8001c28:	d031      	beq.n	8001c8e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a12      	ldr	r2, [pc, #72]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001c30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c34:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d105      	bne.n	8001c4e <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001c42:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	4a0c      	ldr	r2, [pc, #48]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001c48:	f023 0303 	bic.w	r3, r3, #3
 8001c4c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	4a09      	ldr	r2, [pc, #36]	; (8001c78 <HAL_RCC_OscConfig+0x824>)
 8001c54:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c5c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5e:	f7ff f805 	bl	8000c6c <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c64:	e00c      	b.n	8001c80 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c66:	f7ff f801 	bl	8000c6c <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d905      	bls.n	8001c80 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e00d      	b.n	8001c94 <HAL_RCC_OscConfig+0x840>
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_RCC_OscConfig+0x848>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1ec      	bne.n	8001c66 <HAL_RCC_OscConfig+0x812>
 8001c8c:	e001      	b.n	8001c92 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3720      	adds	r7, #32
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e10f      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb8:	4b89      	ldr	r3, [pc, #548]	; (8001ee0 <HAL_RCC_ClockConfig+0x240>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 030f 	and.w	r3, r3, #15
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d910      	bls.n	8001ce8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc6:	4b86      	ldr	r3, [pc, #536]	; (8001ee0 <HAL_RCC_ClockConfig+0x240>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f023 020f 	bic.w	r2, r3, #15
 8001cce:	4984      	ldr	r1, [pc, #528]	; (8001ee0 <HAL_RCC_ClockConfig+0x240>)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd6:	4b82      	ldr	r3, [pc, #520]	; (8001ee0 <HAL_RCC_ClockConfig+0x240>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d001      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0f7      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 8089 	beq.w	8001e08 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d133      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfe:	4b79      	ldr	r3, [pc, #484]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e0e4      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001d0e:	f000 fa0f 	bl	8002130 <RCC_GetSysClockFreqFromPLLSource>
 8001d12:	4602      	mov	r2, r0
 8001d14:	4b74      	ldr	r3, [pc, #464]	; (8001ee8 <HAL_RCC_ClockConfig+0x248>)
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d955      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001d1a:	4b72      	ldr	r3, [pc, #456]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10a      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d26:	4b6f      	ldr	r3, [pc, #444]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d2e:	4a6d      	ldr	r2, [pc, #436]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	e044      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d03e      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x126>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d13a      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d50:	4b64      	ldr	r3, [pc, #400]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d58:	4a62      	ldr	r2, [pc, #392]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d5e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	e02f      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d107      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d6e:	4b5d      	ldr	r3, [pc, #372]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d115      	bne.n	8001da6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e0ac      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d107      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d86:	4b57      	ldr	r3, [pc, #348]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e0a0      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d96:	4b53      	ldr	r3, [pc, #332]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e098      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001da6:	f000 f8a7 	bl	8001ef8 <HAL_RCC_GetSysClockFreq>
 8001daa:	4602      	mov	r2, r0
 8001dac:	4b4e      	ldr	r3, [pc, #312]	; (8001ee8 <HAL_RCC_ClockConfig+0x248>)
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d909      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001db2:	4b4c      	ldr	r3, [pc, #304]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dba:	4a4a      	ldr	r2, [pc, #296]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dc0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dc6:	4b47      	ldr	r3, [pc, #284]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f023 0203 	bic.w	r2, r3, #3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	4944      	ldr	r1, [pc, #272]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dd8:	f7fe ff48 	bl	8000c6c <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dde:	e00a      	b.n	8001df6 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de0:	f7fe ff44 	bl	8000c6c <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e070      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df6:	4b3b      	ldr	r3, [pc, #236]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 020c 	and.w	r2, r3, #12
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d1eb      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d009      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e14:	4b33      	ldr	r3, [pc, #204]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	4930      	ldr	r1, [pc, #192]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	608b      	str	r3, [r1, #8]
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	2b80      	cmp	r3, #128	; 0x80
 8001e2c:	d105      	bne.n	8001e3a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	4a2c      	ldr	r2, [pc, #176]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001e34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e38:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e3a:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <HAL_RCC_ClockConfig+0x240>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d210      	bcs.n	8001e6a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e48:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <HAL_RCC_ClockConfig+0x240>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f023 020f 	bic.w	r2, r3, #15
 8001e50:	4923      	ldr	r1, [pc, #140]	; (8001ee0 <HAL_RCC_ClockConfig+0x240>)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e58:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <HAL_RCC_ClockConfig+0x240>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 030f 	and.w	r3, r3, #15
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d001      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e036      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d008      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e76:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	4918      	ldr	r1, [pc, #96]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d009      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e94:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4910      	ldr	r1, [pc, #64]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ea8:	f000 f826 	bl	8001ef8 <HAL_RCC_GetSysClockFreq>
 8001eac:	4601      	mov	r1, r0
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <HAL_RCC_ClockConfig+0x244>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	091b      	lsrs	r3, r3, #4
 8001eb4:	f003 030f 	and.w	r3, r3, #15
 8001eb8:	4a0c      	ldr	r2, [pc, #48]	; (8001eec <HAL_RCC_ClockConfig+0x24c>)
 8001eba:	5cd3      	ldrb	r3, [r2, r3]
 8001ebc:	f003 031f 	and.w	r3, r3, #31
 8001ec0:	fa21 f303 	lsr.w	r3, r1, r3
 8001ec4:	4a0a      	ldr	r2, [pc, #40]	; (8001ef0 <HAL_RCC_ClockConfig+0x250>)
 8001ec6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ec8:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <HAL_RCC_ClockConfig+0x254>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fe7d 	bl	8000bcc <HAL_InitTick>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	73fb      	strb	r3, [r7, #15]

  return status;
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40022000 	.word	0x40022000
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	04c4b400 	.word	0x04c4b400
 8001eec:	08004970 	.word	0x08004970
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	20000004 	.word	0x20000004

08001ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b089      	sub	sp, #36	; 0x24
 8001efc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
 8001f02:	2300      	movs	r3, #0
 8001f04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f06:	4b3d      	ldr	r3, [pc, #244]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x104>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f10:	4b3a      	ldr	r3, [pc, #232]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x104>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0x34>
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	2b0c      	cmp	r3, #12
 8001f24:	d121      	bne.n	8001f6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d11e      	bne.n	8001f6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f2c:	4b33      	ldr	r3, [pc, #204]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x104>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d107      	bne.n	8001f48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f38:	4b30      	ldr	r3, [pc, #192]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x104>)
 8001f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f3e:	0a1b      	lsrs	r3, r3, #8
 8001f40:	f003 030f 	and.w	r3, r3, #15
 8001f44:	61fb      	str	r3, [r7, #28]
 8001f46:	e005      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f48:	4b2c      	ldr	r3, [pc, #176]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x104>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f54:	4a2a      	ldr	r2, [pc, #168]	; (8002000 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10d      	bne.n	8001f80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f68:	e00a      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d102      	bne.n	8001f76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f70:	4b24      	ldr	r3, [pc, #144]	; (8002004 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f72:	61bb      	str	r3, [r7, #24]
 8001f74:	e004      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f7c:	4b22      	ldr	r3, [pc, #136]	; (8002008 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	2b0c      	cmp	r3, #12
 8001f84:	d133      	bne.n	8001fee <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f86:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x104>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d002      	beq.n	8001f9c <HAL_RCC_GetSysClockFreq+0xa4>
 8001f96:	2b03      	cmp	r3, #3
 8001f98:	d003      	beq.n	8001fa2 <HAL_RCC_GetSysClockFreq+0xaa>
 8001f9a:	e005      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f9c:	4b19      	ldr	r3, [pc, #100]	; (8002004 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f9e:	617b      	str	r3, [r7, #20]
      break;
 8001fa0:	e005      	b.n	8001fae <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fa2:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fa4:	617b      	str	r3, [r7, #20]
      break;
 8001fa6:	e002      	b.n	8001fae <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	617b      	str	r3, [r7, #20]
      break;
 8001fac:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fae:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x104>)
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	091b      	lsrs	r3, r3, #4
 8001fb4:	f003 030f 	and.w	r3, r3, #15
 8001fb8:	3301      	adds	r3, #1
 8001fba:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x104>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	fb02 f203 	mul.w	r2, r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fd4:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x104>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	0e5b      	lsrs	r3, r3, #25
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fec:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fee:	69bb      	ldr	r3, [r7, #24]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3724      	adds	r7, #36	; 0x24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	40021000 	.word	0x40021000
 8002000:	08004988 	.word	0x08004988
 8002004:	00f42400 	.word	0x00f42400
 8002008:	007a1200 	.word	0x007a1200

0800200c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <HAL_RCC_GetHCLKFreq+0x14>)
 8002012:	681b      	ldr	r3, [r3, #0]
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000000 	.word	0x20000000

08002024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002028:	f7ff fff0 	bl	800200c <HAL_RCC_GetHCLKFreq>
 800202c:	4601      	mov	r1, r0
 800202e:	4b06      	ldr	r3, [pc, #24]	; (8002048 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	0a1b      	lsrs	r3, r3, #8
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	4a04      	ldr	r2, [pc, #16]	; (800204c <HAL_RCC_GetPCLK1Freq+0x28>)
 800203a:	5cd3      	ldrb	r3, [r2, r3]
 800203c:	f003 031f 	and.w	r3, r3, #31
 8002040:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002044:	4618      	mov	r0, r3
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40021000 	.word	0x40021000
 800204c:	08004980 	.word	0x08004980

08002050 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002054:	f7ff ffda 	bl	800200c <HAL_RCC_GetHCLKFreq>
 8002058:	4601      	mov	r1, r0
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_RCC_GetPCLK2Freq+0x24>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	0adb      	lsrs	r3, r3, #11
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	4a04      	ldr	r2, [pc, #16]	; (8002078 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002066:	5cd3      	ldrb	r3, [r2, r3]
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002070:	4618      	mov	r0, r3
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40021000 	.word	0x40021000
 8002078:	08004980 	.word	0x08004980

0800207c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002084:	2300      	movs	r3, #0
 8002086:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002088:	4b27      	ldr	r3, [pc, #156]	; (8002128 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800208a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002094:	f7ff f91a 	bl	80012cc <HAL_PWREx_GetVoltageRange>
 8002098:	6178      	str	r0, [r7, #20]
 800209a:	e014      	b.n	80020c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800209c:	4b22      	ldr	r3, [pc, #136]	; (8002128 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800209e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a0:	4a21      	ldr	r2, [pc, #132]	; (8002128 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a6:	6593      	str	r3, [r2, #88]	; 0x58
 80020a8:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020b4:	f7ff f90a 	bl	80012cc <HAL_PWREx_GetVoltageRange>
 80020b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020ba:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020be:	4a1a      	ldr	r2, [pc, #104]	; (8002128 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020cc:	d10b      	bne.n	80020e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b80      	cmp	r3, #128	; 0x80
 80020d2:	d913      	bls.n	80020fc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2ba0      	cmp	r3, #160	; 0xa0
 80020d8:	d902      	bls.n	80020e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020da:	2302      	movs	r3, #2
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	e00d      	b.n	80020fc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020e0:	2301      	movs	r3, #1
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	e00a      	b.n	80020fc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b7f      	cmp	r3, #127	; 0x7f
 80020ea:	d902      	bls.n	80020f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80020ec:	2302      	movs	r3, #2
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	e004      	b.n	80020fc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b70      	cmp	r3, #112	; 0x70
 80020f6:	d101      	bne.n	80020fc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020f8:	2301      	movs	r3, #1
 80020fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f023 020f 	bic.w	r2, r3, #15
 8002104:	4909      	ldr	r1, [pc, #36]	; (800212c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800210c:	4b07      	ldr	r3, [pc, #28]	; (800212c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 030f 	and.w	r3, r3, #15
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	429a      	cmp	r2, r3
 8002118:	d001      	beq.n	800211e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e000      	b.n	8002120 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40021000 	.word	0x40021000
 800212c:	40022000 	.word	0x40022000

08002130 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002130:	b480      	push	{r7}
 8002132:	b087      	sub	sp, #28
 8002134:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800213a:	4b2d      	ldr	r3, [pc, #180]	; (80021f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	2b01      	cmp	r3, #1
 8002144:	d118      	bne.n	8002178 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002146:	4b2a      	ldr	r3, [pc, #168]	; (80021f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d107      	bne.n	8002162 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002152:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002154:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002158:	0a1b      	lsrs	r3, r3, #8
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	e005      	b.n	800216e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002162:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	091b      	lsrs	r3, r3, #4
 8002168:	f003 030f 	and.w	r3, r3, #15
 800216c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800216e:	4a21      	ldr	r2, [pc, #132]	; (80021f4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002176:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002178:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d002      	beq.n	800218e <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8002188:	2b03      	cmp	r3, #3
 800218a:	d003      	beq.n	8002194 <RCC_GetSysClockFreqFromPLLSource+0x64>
 800218c:	e005      	b.n	800219a <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800218e:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002190:	613b      	str	r3, [r7, #16]
    break;
 8002192:	e005      	b.n	80021a0 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002196:	613b      	str	r3, [r7, #16]
    break;
 8002198:	e002      	b.n	80021a0 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	613b      	str	r3, [r7, #16]
    break;
 800219e:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021a0:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	3301      	adds	r3, #1
 80021ac:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021ae:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	0a1b      	lsrs	r3, r3, #8
 80021b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	fb02 f203 	mul.w	r2, r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c4:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	0e5b      	lsrs	r3, r3, #25
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	3301      	adds	r3, #1
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	fbb2 f3f3 	udiv	r3, r2, r3
 80021de:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80021e0:	683b      	ldr	r3, [r7, #0]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	371c      	adds	r7, #28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000
 80021f4:	08004988 	.word	0x08004988
 80021f8:	00f42400 	.word	0x00f42400
 80021fc:	007a1200 	.word	0x007a1200

08002200 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002208:	2300      	movs	r3, #0
 800220a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800220c:	2300      	movs	r3, #0
 800220e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002218:	2b00      	cmp	r3, #0
 800221a:	d03d      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002220:	2b40      	cmp	r3, #64	; 0x40
 8002222:	d00b      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002224:	2b40      	cmp	r3, #64	; 0x40
 8002226:	d804      	bhi.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00e      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 800222c:	2b20      	cmp	r3, #32
 800222e:	d015      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002230:	e01d      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002232:	2b60      	cmp	r3, #96	; 0x60
 8002234:	d01e      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002236:	2b80      	cmp	r3, #128	; 0x80
 8002238:	d01c      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800223a:	e018      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800223c:	4b86      	ldr	r3, [pc, #536]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4a85      	ldr	r2, [pc, #532]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002246:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002248:	e015      	b.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3304      	adds	r3, #4
 800224e:	2100      	movs	r1, #0
 8002250:	4618      	mov	r0, r3
 8002252:	f000 fafd 	bl	8002850 <RCCEx_PLLSAI1_Config>
 8002256:	4603      	mov	r3, r0
 8002258:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800225a:	e00c      	b.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3320      	adds	r3, #32
 8002260:	2100      	movs	r1, #0
 8002262:	4618      	mov	r0, r3
 8002264:	f000 fbe4 	bl	8002a30 <RCCEx_PLLSAI2_Config>
 8002268:	4603      	mov	r3, r0
 800226a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800226c:	e003      	b.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	74fb      	strb	r3, [r7, #19]
      break;
 8002272:	e000      	b.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8002274:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002276:	7cfb      	ldrb	r3, [r7, #19]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10b      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800227c:	4b76      	ldr	r3, [pc, #472]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800227e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002282:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800228a:	4973      	ldr	r1, [pc, #460]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800228c:	4313      	orrs	r3, r2
 800228e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002292:	e001      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002294:	7cfb      	ldrb	r3, [r7, #19]
 8002296:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d042      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ac:	d00f      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0xce>
 80022ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022b2:	d805      	bhi.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d011      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80022b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022bc:	d017      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0xee>
 80022be:	e01f      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80022c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022c4:	d01f      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ca:	d01c      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022cc:	e018      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022ce:	4b62      	ldr	r3, [pc, #392]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	4a61      	ldr	r2, [pc, #388]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022da:	e015      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3304      	adds	r3, #4
 80022e0:	2100      	movs	r1, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 fab4 	bl	8002850 <RCCEx_PLLSAI1_Config>
 80022e8:	4603      	mov	r3, r0
 80022ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022ec:	e00c      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3320      	adds	r3, #32
 80022f2:	2100      	movs	r1, #0
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 fb9b 	bl	8002a30 <RCCEx_PLLSAI2_Config>
 80022fa:	4603      	mov	r3, r0
 80022fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022fe:	e003      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	74fb      	strb	r3, [r7, #19]
      break;
 8002304:	e000      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8002306:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002308:	7cfb      	ldrb	r3, [r7, #19]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10b      	bne.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800230e:	4b52      	ldr	r3, [pc, #328]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002310:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002314:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231c:	494e      	ldr	r1, [pc, #312]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800231e:	4313      	orrs	r3, r2
 8002320:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002324:	e001      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002326:	7cfb      	ldrb	r3, [r7, #19]
 8002328:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 809f 	beq.w	8002476 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002338:	2300      	movs	r3, #0
 800233a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800233c:	4b46      	ldr	r3, [pc, #280]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800233e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002348:	2301      	movs	r3, #1
 800234a:	e000      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800234c:	2300      	movs	r3, #0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00d      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002352:	4b41      	ldr	r3, [pc, #260]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002356:	4a40      	ldr	r2, [pc, #256]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235c:	6593      	str	r3, [r2, #88]	; 0x58
 800235e:	4b3e      	ldr	r3, [pc, #248]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800236a:	2301      	movs	r3, #1
 800236c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800236e:	4b3b      	ldr	r3, [pc, #236]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a3a      	ldr	r2, [pc, #232]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002378:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800237a:	f7fe fc77 	bl	8000c6c <HAL_GetTick>
 800237e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002380:	e009      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002382:	f7fe fc73 	bl	8000c6c <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d902      	bls.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	74fb      	strb	r3, [r7, #19]
        break;
 8002394:	e005      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002396:	4b31      	ldr	r3, [pc, #196]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0ef      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 80023a2:	7cfb      	ldrb	r3, [r7, #19]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d15b      	bne.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023a8:	4b2b      	ldr	r3, [pc, #172]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023b2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d01f      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d019      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023c6:	4b24      	ldr	r3, [pc, #144]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023d2:	4b21      	ldr	r3, [pc, #132]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d8:	4a1f      	ldr	r2, [pc, #124]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023e2:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e8:	4a1b      	ldr	r2, [pc, #108]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023f2:	4a19      	ldr	r2, [pc, #100]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d016      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002404:	f7fe fc32 	bl	8000c6c <HAL_GetTick>
 8002408:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800240a:	e00b      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240c:	f7fe fc2e 	bl	8000c6c <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	f241 3288 	movw	r2, #5000	; 0x1388
 800241a:	4293      	cmp	r3, r2
 800241c:	d902      	bls.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	74fb      	strb	r3, [r7, #19]
            break;
 8002422:	e006      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ec      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10c      	bne.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002438:	4b07      	ldr	r3, [pc, #28]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002448:	4903      	ldr	r1, [pc, #12]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800244a:	4313      	orrs	r3, r2
 800244c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002450:	e008      	b.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002452:	7cfb      	ldrb	r3, [r7, #19]
 8002454:	74bb      	strb	r3, [r7, #18]
 8002456:	e005      	b.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002458:	40021000 	.word	0x40021000
 800245c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002460:	7cfb      	ldrb	r3, [r7, #19]
 8002462:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002464:	7c7b      	ldrb	r3, [r7, #17]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d105      	bne.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800246a:	4ba0      	ldr	r3, [pc, #640]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246e:	4a9f      	ldr	r2, [pc, #636]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002474:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00a      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002482:	4b9a      	ldr	r3, [pc, #616]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002488:	f023 0203 	bic.w	r2, r3, #3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002490:	4996      	ldr	r1, [pc, #600]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002492:	4313      	orrs	r3, r2
 8002494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00a      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024a4:	4b91      	ldr	r3, [pc, #580]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024aa:	f023 020c 	bic.w	r2, r3, #12
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	498e      	ldr	r1, [pc, #568]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00a      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024c6:	4b89      	ldr	r3, [pc, #548]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d4:	4985      	ldr	r1, [pc, #532]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0308 	and.w	r3, r3, #8
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00a      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024e8:	4b80      	ldr	r3, [pc, #512]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f6:	497d      	ldr	r1, [pc, #500]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0310 	and.w	r3, r3, #16
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00a      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800250a:	4b78      	ldr	r3, [pc, #480]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002510:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002518:	4974      	ldr	r1, [pc, #464]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251a:	4313      	orrs	r3, r2
 800251c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0320 	and.w	r3, r3, #32
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00a      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800252c:	4b6f      	ldr	r3, [pc, #444]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002532:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800253a:	496c      	ldr	r1, [pc, #432]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800254e:	4b67      	ldr	r3, [pc, #412]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002554:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800255c:	4963      	ldr	r1, [pc, #396]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00a      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002570:	4b5e      	ldr	r3, [pc, #376]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002576:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800257e:	495b      	ldr	r1, [pc, #364]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00a      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002592:	4b56      	ldr	r3, [pc, #344]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002598:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a0:	4952      	ldr	r1, [pc, #328]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00a      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025b4:	4b4d      	ldr	r3, [pc, #308]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c2:	494a      	ldr	r1, [pc, #296]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00a      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025d6:	4b45      	ldr	r3, [pc, #276]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e4:	4941      	ldr	r1, [pc, #260]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00a      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80025f8:	4b3c      	ldr	r3, [pc, #240]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025fe:	f023 0203 	bic.w	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002606:	4939      	ldr	r1, [pc, #228]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d028      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800261a:	4b34      	ldr	r3, [pc, #208]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002620:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002628:	4930      	ldr	r1, [pc, #192]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262a:	4313      	orrs	r3, r2
 800262c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002638:	d106      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800263a:	4b2c      	ldr	r3, [pc, #176]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	4a2b      	ldr	r2, [pc, #172]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002640:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002644:	60d3      	str	r3, [r2, #12]
 8002646:	e011      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800264c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002650:	d10c      	bne.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3304      	adds	r3, #4
 8002656:	2101      	movs	r1, #1
 8002658:	4618      	mov	r0, r3
 800265a:	f000 f8f9 	bl	8002850 <RCCEx_PLLSAI1_Config>
 800265e:	4603      	mov	r3, r0
 8002660:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002662:	7cfb      	ldrb	r3, [r7, #19]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8002668:	7cfb      	ldrb	r3, [r7, #19]
 800266a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d04d      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800267c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002680:	d108      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002682:	4b1a      	ldr	r3, [pc, #104]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002684:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002688:	4a18      	ldr	r2, [pc, #96]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800268e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002692:	e012      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8002694:	4b15      	ldr	r3, [pc, #84]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002696:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800269a:	4a14      	ldr	r2, [pc, #80]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026a0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80026a4:	4b11      	ldr	r3, [pc, #68]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026b2:	490e      	ldr	r1, [pc, #56]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026c2:	d106      	bne.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026c4:	4b09      	ldr	r3, [pc, #36]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	4a08      	ldr	r2, [pc, #32]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ce:	60d3      	str	r3, [r2, #12]
 80026d0:	e020      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026da:	d109      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026dc:	4b03      	ldr	r3, [pc, #12]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a02      	ldr	r2, [pc, #8]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e6:	60d3      	str	r3, [r2, #12]
 80026e8:	e014      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80026ea:	bf00      	nop
 80026ec:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026f8:	d10c      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3304      	adds	r3, #4
 80026fe:	2101      	movs	r1, #1
 8002700:	4618      	mov	r0, r3
 8002702:	f000 f8a5 	bl	8002850 <RCCEx_PLLSAI1_Config>
 8002706:	4603      	mov	r3, r0
 8002708:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800270a:	7cfb      	ldrb	r3, [r7, #19]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002710:	7cfb      	ldrb	r3, [r7, #19]
 8002712:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d028      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002720:	4b4a      	ldr	r3, [pc, #296]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002726:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800272e:	4947      	ldr	r1, [pc, #284]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002730:	4313      	orrs	r3, r2
 8002732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800273a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800273e:	d106      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002740:	4b42      	ldr	r3, [pc, #264]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	4a41      	ldr	r2, [pc, #260]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002746:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800274a:	60d3      	str	r3, [r2, #12]
 800274c:	e011      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002752:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002756:	d10c      	bne.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3304      	adds	r3, #4
 800275c:	2101      	movs	r1, #1
 800275e:	4618      	mov	r0, r3
 8002760:	f000 f876 	bl	8002850 <RCCEx_PLLSAI1_Config>
 8002764:	4603      	mov	r3, r0
 8002766:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002768:	7cfb      	ldrb	r3, [r7, #19]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 800276e:	7cfb      	ldrb	r3, [r7, #19]
 8002770:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d01e      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800277e:	4b33      	ldr	r3, [pc, #204]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002784:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800278e:	492f      	ldr	r1, [pc, #188]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002790:	4313      	orrs	r3, r2
 8002792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800279c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027a0:	d10c      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3304      	adds	r3, #4
 80027a6:	2102      	movs	r1, #2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 f851 	bl	8002850 <RCCEx_PLLSAI1_Config>
 80027ae:	4603      	mov	r3, r0
 80027b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027b2:	7cfb      	ldrb	r3, [r7, #19]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 80027b8:	7cfb      	ldrb	r3, [r7, #19]
 80027ba:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00b      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027c8:	4b20      	ldr	r3, [pc, #128]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027ce:	f023 0204 	bic.w	r2, r3, #4
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027d8:	491c      	ldr	r1, [pc, #112]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00b      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80027ec:	4b17      	ldr	r3, [pc, #92]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027f2:	f023 0218 	bic.w	r2, r3, #24
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fc:	4913      	ldr	r1, [pc, #76]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d017      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002810:	4b0e      	ldr	r3, [pc, #56]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002812:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002816:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002820:	490a      	ldr	r1, [pc, #40]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800282e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002832:	d105      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002834:	4b05      	ldr	r3, [pc, #20]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4a04      	ldr	r2, [pc, #16]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800283a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800283e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002840:	7cbb      	ldrb	r3, [r7, #18]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40021000 	.word	0x40021000

08002850 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800285e:	4b70      	ldr	r3, [pc, #448]	; (8002a20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00e      	beq.n	8002888 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800286a:	4b6d      	ldr	r3, [pc, #436]	; (8002a20 <RCCEx_PLLSAI1_Config+0x1d0>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f003 0203 	and.w	r2, r3, #3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d103      	bne.n	8002882 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
       ||
 800287e:	2b00      	cmp	r3, #0
 8002880:	d13f      	bne.n	8002902 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
 8002886:	e03c      	b.n	8002902 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b02      	cmp	r3, #2
 800288e:	d00c      	beq.n	80028aa <RCCEx_PLLSAI1_Config+0x5a>
 8002890:	2b03      	cmp	r3, #3
 8002892:	d013      	beq.n	80028bc <RCCEx_PLLSAI1_Config+0x6c>
 8002894:	2b01      	cmp	r3, #1
 8002896:	d120      	bne.n	80028da <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002898:	4b61      	ldr	r3, [pc, #388]	; (8002a20 <RCCEx_PLLSAI1_Config+0x1d0>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d11d      	bne.n	80028e0 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a8:	e01a      	b.n	80028e0 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028aa:	4b5d      	ldr	r3, [pc, #372]	; (8002a20 <RCCEx_PLLSAI1_Config+0x1d0>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d116      	bne.n	80028e4 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ba:	e013      	b.n	80028e4 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028bc:	4b58      	ldr	r3, [pc, #352]	; (8002a20 <RCCEx_PLLSAI1_Config+0x1d0>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10f      	bne.n	80028e8 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028c8:	4b55      	ldr	r3, [pc, #340]	; (8002a20 <RCCEx_PLLSAI1_Config+0x1d0>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d109      	bne.n	80028e8 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028d8:	e006      	b.n	80028e8 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	73fb      	strb	r3, [r7, #15]
      break;
 80028de:	e004      	b.n	80028ea <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80028e0:	bf00      	nop
 80028e2:	e002      	b.n	80028ea <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80028e4:	bf00      	nop
 80028e6:	e000      	b.n	80028ea <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80028e8:	bf00      	nop
    }

    if(status == HAL_OK)
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d108      	bne.n	8002902 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80028f0:	4b4b      	ldr	r3, [pc, #300]	; (8002a20 <RCCEx_PLLSAI1_Config+0x1d0>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f023 0203 	bic.w	r2, r3, #3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4948      	ldr	r1, [pc, #288]	; (8002a20 <RCCEx_PLLSAI1_Config+0x1d0>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	2b00      	cmp	r3, #0
 8002906:	f040 8086 	bne.w	8002a16 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800290a:	4b45      	ldr	r3, [pc, #276]	; (8002a20 <RCCEx_PLLSAI1_Config+0x1d0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a44      	ldr	r2, [pc, #272]	; (8002a20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002910:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002914:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002916:	f7fe f9a9 	bl	8000c6c <HAL_GetTick>
 800291a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800291c:	e009      	b.n	8002932 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800291e:	f7fe f9a5 	bl	8000c6c <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d902      	bls.n	8002932 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	73fb      	strb	r3, [r7, #15]
        break;
 8002930:	e005      	b.n	800293e <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002932:	4b3b      	ldr	r3, [pc, #236]	; (8002a20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1ef      	bne.n	800291e <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d168      	bne.n	8002a16 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d113      	bne.n	8002972 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800294a:	4b35      	ldr	r3, [pc, #212]	; (8002a20 <RCCEx_PLLSAI1_Config+0x1d0>)
 800294c:	691a      	ldr	r2, [r3, #16]
 800294e:	4b35      	ldr	r3, [pc, #212]	; (8002a24 <RCCEx_PLLSAI1_Config+0x1d4>)
 8002950:	4013      	ands	r3, r2
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6892      	ldr	r2, [r2, #8]
 8002956:	0211      	lsls	r1, r2, #8
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	68d2      	ldr	r2, [r2, #12]
 800295c:	06d2      	lsls	r2, r2, #27
 800295e:	4311      	orrs	r1, r2
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6852      	ldr	r2, [r2, #4]
 8002964:	3a01      	subs	r2, #1
 8002966:	0112      	lsls	r2, r2, #4
 8002968:	430a      	orrs	r2, r1
 800296a:	492d      	ldr	r1, [pc, #180]	; (8002a20 <RCCEx_PLLSAI1_Config+0x1d0>)
 800296c:	4313      	orrs	r3, r2
 800296e:	610b      	str	r3, [r1, #16]
 8002970:	e02d      	b.n	80029ce <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d115      	bne.n	80029a4 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002978:	4b29      	ldr	r3, [pc, #164]	; (8002a20 <RCCEx_PLLSAI1_Config+0x1d0>)
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	4b2a      	ldr	r3, [pc, #168]	; (8002a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 800297e:	4013      	ands	r3, r2
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6892      	ldr	r2, [r2, #8]
 8002984:	0211      	lsls	r1, r2, #8
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6912      	ldr	r2, [r2, #16]
 800298a:	0852      	lsrs	r2, r2, #1
 800298c:	3a01      	subs	r2, #1
 800298e:	0552      	lsls	r2, r2, #21
 8002990:	4311      	orrs	r1, r2
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6852      	ldr	r2, [r2, #4]
 8002996:	3a01      	subs	r2, #1
 8002998:	0112      	lsls	r2, r2, #4
 800299a:	430a      	orrs	r2, r1
 800299c:	4920      	ldr	r1, [pc, #128]	; (8002a20 <RCCEx_PLLSAI1_Config+0x1d0>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	610b      	str	r3, [r1, #16]
 80029a2:	e014      	b.n	80029ce <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029a4:	4b1e      	ldr	r3, [pc, #120]	; (8002a20 <RCCEx_PLLSAI1_Config+0x1d0>)
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	4b20      	ldr	r3, [pc, #128]	; (8002a2c <RCCEx_PLLSAI1_Config+0x1dc>)
 80029aa:	4013      	ands	r3, r2
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6892      	ldr	r2, [r2, #8]
 80029b0:	0211      	lsls	r1, r2, #8
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6952      	ldr	r2, [r2, #20]
 80029b6:	0852      	lsrs	r2, r2, #1
 80029b8:	3a01      	subs	r2, #1
 80029ba:	0652      	lsls	r2, r2, #25
 80029bc:	4311      	orrs	r1, r2
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6852      	ldr	r2, [r2, #4]
 80029c2:	3a01      	subs	r2, #1
 80029c4:	0112      	lsls	r2, r2, #4
 80029c6:	430a      	orrs	r2, r1
 80029c8:	4915      	ldr	r1, [pc, #84]	; (8002a20 <RCCEx_PLLSAI1_Config+0x1d0>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029ce:	4b14      	ldr	r3, [pc, #80]	; (8002a20 <RCCEx_PLLSAI1_Config+0x1d0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a13      	ldr	r2, [pc, #76]	; (8002a20 <RCCEx_PLLSAI1_Config+0x1d0>)
 80029d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029da:	f7fe f947 	bl	8000c6c <HAL_GetTick>
 80029de:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029e0:	e009      	b.n	80029f6 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029e2:	f7fe f943 	bl	8000c6c <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d902      	bls.n	80029f6 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	73fb      	strb	r3, [r7, #15]
          break;
 80029f4:	e005      	b.n	8002a02 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029f6:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <RCCEx_PLLSAI1_Config+0x1d0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0ef      	beq.n	80029e2 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d106      	bne.n	8002a16 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a08:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	4903      	ldr	r1, [pc, #12]	; (8002a20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40021000 	.word	0x40021000
 8002a24:	07ff800f 	.word	0x07ff800f
 8002a28:	ff9f800f 	.word	0xff9f800f
 8002a2c:	f9ff800f 	.word	0xf9ff800f

08002a30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a3e:	4b70      	ldr	r3, [pc, #448]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00e      	beq.n	8002a68 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a4a:	4b6d      	ldr	r3, [pc, #436]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f003 0203 	and.w	r2, r3, #3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d103      	bne.n	8002a62 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d13f      	bne.n	8002ae2 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	73fb      	strb	r3, [r7, #15]
 8002a66:	e03c      	b.n	8002ae2 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d00c      	beq.n	8002a8a <RCCEx_PLLSAI2_Config+0x5a>
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d013      	beq.n	8002a9c <RCCEx_PLLSAI2_Config+0x6c>
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d120      	bne.n	8002aba <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a78:	4b61      	ldr	r3, [pc, #388]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d11d      	bne.n	8002ac0 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a88:	e01a      	b.n	8002ac0 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a8a:	4b5d      	ldr	r3, [pc, #372]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d116      	bne.n	8002ac4 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a9a:	e013      	b.n	8002ac4 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a9c:	4b58      	ldr	r3, [pc, #352]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10f      	bne.n	8002ac8 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002aa8:	4b55      	ldr	r3, [pc, #340]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d109      	bne.n	8002ac8 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ab8:	e006      	b.n	8002ac8 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	73fb      	strb	r3, [r7, #15]
      break;
 8002abe:	e004      	b.n	8002aca <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002ac0:	bf00      	nop
 8002ac2:	e002      	b.n	8002aca <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002ac4:	bf00      	nop
 8002ac6:	e000      	b.n	8002aca <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002ac8:	bf00      	nop
    }

    if(status == HAL_OK)
 8002aca:	7bfb      	ldrb	r3, [r7, #15]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d108      	bne.n	8002ae2 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002ad0:	4b4b      	ldr	r3, [pc, #300]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f023 0203 	bic.w	r2, r3, #3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4948      	ldr	r1, [pc, #288]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f040 8086 	bne.w	8002bf6 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002aea:	4b45      	ldr	r3, [pc, #276]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a44      	ldr	r2, [pc, #272]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002af6:	f7fe f8b9 	bl	8000c6c <HAL_GetTick>
 8002afa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002afc:	e009      	b.n	8002b12 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002afe:	f7fe f8b5 	bl	8000c6c <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d902      	bls.n	8002b12 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	73fb      	strb	r3, [r7, #15]
        break;
 8002b10:	e005      	b.n	8002b1e <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b12:	4b3b      	ldr	r3, [pc, #236]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1ef      	bne.n	8002afe <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d168      	bne.n	8002bf6 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d113      	bne.n	8002b52 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b2a:	4b35      	ldr	r3, [pc, #212]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002b2c:	695a      	ldr	r2, [r3, #20]
 8002b2e:	4b35      	ldr	r3, [pc, #212]	; (8002c04 <RCCEx_PLLSAI2_Config+0x1d4>)
 8002b30:	4013      	ands	r3, r2
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6892      	ldr	r2, [r2, #8]
 8002b36:	0211      	lsls	r1, r2, #8
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	68d2      	ldr	r2, [r2, #12]
 8002b3c:	06d2      	lsls	r2, r2, #27
 8002b3e:	4311      	orrs	r1, r2
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6852      	ldr	r2, [r2, #4]
 8002b44:	3a01      	subs	r2, #1
 8002b46:	0112      	lsls	r2, r2, #4
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	492d      	ldr	r1, [pc, #180]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	614b      	str	r3, [r1, #20]
 8002b50:	e02d      	b.n	8002bae <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d115      	bne.n	8002b84 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b58:	4b29      	ldr	r3, [pc, #164]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002b5a:	695a      	ldr	r2, [r3, #20]
 8002b5c:	4b2a      	ldr	r3, [pc, #168]	; (8002c08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6892      	ldr	r2, [r2, #8]
 8002b64:	0211      	lsls	r1, r2, #8
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6912      	ldr	r2, [r2, #16]
 8002b6a:	0852      	lsrs	r2, r2, #1
 8002b6c:	3a01      	subs	r2, #1
 8002b6e:	0552      	lsls	r2, r2, #21
 8002b70:	4311      	orrs	r1, r2
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6852      	ldr	r2, [r2, #4]
 8002b76:	3a01      	subs	r2, #1
 8002b78:	0112      	lsls	r2, r2, #4
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	4920      	ldr	r1, [pc, #128]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	614b      	str	r3, [r1, #20]
 8002b82:	e014      	b.n	8002bae <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b84:	4b1e      	ldr	r3, [pc, #120]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002b86:	695a      	ldr	r2, [r3, #20]
 8002b88:	4b20      	ldr	r3, [pc, #128]	; (8002c0c <RCCEx_PLLSAI2_Config+0x1dc>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6892      	ldr	r2, [r2, #8]
 8002b90:	0211      	lsls	r1, r2, #8
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6952      	ldr	r2, [r2, #20]
 8002b96:	0852      	lsrs	r2, r2, #1
 8002b98:	3a01      	subs	r2, #1
 8002b9a:	0652      	lsls	r2, r2, #25
 8002b9c:	4311      	orrs	r1, r2
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6852      	ldr	r2, [r2, #4]
 8002ba2:	3a01      	subs	r2, #1
 8002ba4:	0112      	lsls	r2, r2, #4
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	4915      	ldr	r1, [pc, #84]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002bae:	4b14      	ldr	r3, [pc, #80]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a13      	ldr	r2, [pc, #76]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bba:	f7fe f857 	bl	8000c6c <HAL_GetTick>
 8002bbe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bc0:	e009      	b.n	8002bd6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bc2:	f7fe f853 	bl	8000c6c <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d902      	bls.n	8002bd6 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	73fb      	strb	r3, [r7, #15]
          break;
 8002bd4:	e005      	b.n	8002be2 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0ef      	beq.n	8002bc2 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d106      	bne.n	8002bf6 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002be8:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002bea:	695a      	ldr	r2, [r3, #20]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	4903      	ldr	r1, [pc, #12]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40021000 	.word	0x40021000
 8002c04:	07ff800f 	.word	0x07ff800f
 8002c08:	ff9f800f 	.word	0xff9f800f
 8002c0c:	f9ff800f 	.word	0xf9ff800f

08002c10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e042      	b.n	8002ca8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d106      	bne.n	8002c3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7fd fe9b 	bl	8000970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2224      	movs	r2, #36	; 0x24
 8002c3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0201 	bic.w	r2, r2, #1
 8002c50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 fb28 	bl	80032a8 <UART_SetConfig>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e022      	b.n	8002ca8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fdee 	bl	800384c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0201 	orr.w	r2, r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 fe75 	bl	8003990 <UART_CheckIdleState>
 8002ca6:	4603      	mov	r3, r0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08a      	sub	sp, #40	; 0x28
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	f040 8084 	bne.w	8002dd4 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <HAL_UART_Transmit+0x28>
 8002cd2:	88fb      	ldrh	r3, [r7, #6]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e07c      	b.n	8002dd6 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_UART_Transmit+0x3a>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e075      	b.n	8002dd6 <HAL_UART_Transmit+0x126>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2221      	movs	r2, #33	; 0x21
 8002cfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002d02:	f7fd ffb3 	bl	8000c6c <HAL_GetTick>
 8002d06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	88fa      	ldrh	r2, [r7, #6]
 8002d0c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	88fa      	ldrh	r2, [r7, #6]
 8002d14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d20:	d108      	bne.n	8002d34 <HAL_UART_Transmit+0x84>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d104      	bne.n	8002d34 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	61bb      	str	r3, [r7, #24]
 8002d32:	e003      	b.n	8002d3c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8002d44:	e02d      	b.n	8002da2 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2180      	movs	r1, #128	; 0x80
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 fe65 	bl	8003a20 <UART_WaitOnFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e03a      	b.n	8002dd6 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10b      	bne.n	8002d7e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	881a      	ldrh	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d72:	b292      	uxth	r2, r2
 8002d74:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	3302      	adds	r3, #2
 8002d7a:	61bb      	str	r3, [r7, #24]
 8002d7c:	e008      	b.n	8002d90 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	781a      	ldrb	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	b292      	uxth	r2, r2
 8002d88:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1cb      	bne.n	8002d46 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2200      	movs	r2, #0
 8002db6:	2140      	movs	r1, #64	; 0x40
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 fe31 	bl	8003a20 <UART_WaitOnFlagUntilTimeout>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e006      	b.n	8002dd6 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	e000      	b.n	8002dd6 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002dd4:	2302      	movs	r3, #2
  }
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3720      	adds	r7, #32
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b08a      	sub	sp, #40	; 0x28
 8002de2:	af02      	add	r7, sp, #8
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	603b      	str	r3, [r7, #0]
 8002dea:	4613      	mov	r3, r2
 8002dec:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002df4:	2b20      	cmp	r3, #32
 8002df6:	f040 80be 	bne.w	8002f76 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <HAL_UART_Receive+0x28>
 8002e00:	88fb      	ldrh	r3, [r7, #6]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e0b6      	b.n	8002f78 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_UART_Receive+0x3a>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e0af      	b.n	8002f78 <HAL_UART_Receive+0x19a>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2222      	movs	r2, #34	; 0x22
 8002e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002e30:	f7fd ff1c 	bl	8000c6c <HAL_GetTick>
 8002e34:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	88fa      	ldrh	r2, [r7, #6]
 8002e3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	88fa      	ldrh	r2, [r7, #6]
 8002e42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e4e:	d10e      	bne.n	8002e6e <HAL_UART_Receive+0x90>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d105      	bne.n	8002e64 <HAL_UART_Receive+0x86>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002e5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002e62:	e02d      	b.n	8002ec0 <HAL_UART_Receive+0xe2>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	22ff      	movs	r2, #255	; 0xff
 8002e68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002e6c:	e028      	b.n	8002ec0 <HAL_UART_Receive+0xe2>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10d      	bne.n	8002e92 <HAL_UART_Receive+0xb4>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d104      	bne.n	8002e88 <HAL_UART_Receive+0xaa>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	22ff      	movs	r2, #255	; 0xff
 8002e82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002e86:	e01b      	b.n	8002ec0 <HAL_UART_Receive+0xe2>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	227f      	movs	r2, #127	; 0x7f
 8002e8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002e90:	e016      	b.n	8002ec0 <HAL_UART_Receive+0xe2>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e9a:	d10d      	bne.n	8002eb8 <HAL_UART_Receive+0xda>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d104      	bne.n	8002eae <HAL_UART_Receive+0xd0>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	227f      	movs	r2, #127	; 0x7f
 8002ea8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002eac:	e008      	b.n	8002ec0 <HAL_UART_Receive+0xe2>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	223f      	movs	r2, #63	; 0x3f
 8002eb2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002eb6:	e003      	b.n	8002ec0 <HAL_UART_Receive+0xe2>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002ec6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed0:	d108      	bne.n	8002ee4 <HAL_UART_Receive+0x106>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d104      	bne.n	8002ee4 <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	61bb      	str	r3, [r7, #24]
 8002ee2:	e003      	b.n	8002eec <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002ef4:	e033      	b.n	8002f5e <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2200      	movs	r2, #0
 8002efe:	2120      	movs	r1, #32
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 fd8d 	bl	8003a20 <UART_WaitOnFlagUntilTimeout>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_UART_Receive+0x132>
      {
        return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e033      	b.n	8002f78 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10c      	bne.n	8002f30 <HAL_UART_Receive+0x152>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	8a7b      	ldrh	r3, [r7, #18]
 8002f20:	4013      	ands	r3, r2
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	3302      	adds	r3, #2
 8002f2c:	61bb      	str	r3, [r7, #24]
 8002f2e:	e00d      	b.n	8002f4c <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	8a7b      	ldrh	r3, [r7, #18]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	4013      	ands	r3, r2
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1c5      	bne.n	8002ef6 <HAL_UART_Receive+0x118>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	e000      	b.n	8002f78 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002f76:	2302      	movs	r3, #2
  }
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3720      	adds	r7, #32
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002fa0:	69fa      	ldr	r2, [r7, #28]
 8002fa2:	f640 030f 	movw	r3, #2063	; 0x80f
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d118      	bne.n	8002fe2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d013      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	f003 0320 	and.w	r3, r3, #32
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d104      	bne.n	8002fce <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d009      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x62>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 8145 	beq.w	8003262 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	4798      	blx	r3
      }
      return;
 8002fe0:	e13f      	b.n	8003262 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 80e8 	beq.w	80031ba <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	4ba1      	ldr	r3, [pc, #644]	; (8003274 <HAL_UART_IRQHandler+0x2f4>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d105      	bne.n	8003000 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4ba0      	ldr	r3, [pc, #640]	; (8003278 <HAL_UART_IRQHandler+0x2f8>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 80dd 	beq.w	80031ba <HAL_UART_IRQHandler+0x23a>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d010      	beq.n	800302c <HAL_UART_IRQHandler+0xac>
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00b      	beq.n	800302c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2201      	movs	r2, #1
 800301a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003022:	f043 0201 	orr.w	r2, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d010      	beq.n	8003058 <HAL_UART_IRQHandler+0xd8>
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00b      	beq.n	8003058 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2202      	movs	r2, #2
 8003046:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304e:	f043 0204 	orr.w	r2, r3, #4
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	2b00      	cmp	r3, #0
 8003060:	d010      	beq.n	8003084 <HAL_UART_IRQHandler+0x104>
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00b      	beq.n	8003084 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2204      	movs	r2, #4
 8003072:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307a:	f043 0202 	orr.w	r2, r3, #2
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d015      	beq.n	80030ba <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	f003 0320 	and.w	r3, r3, #32
 8003094:	2b00      	cmp	r3, #0
 8003096:	d104      	bne.n	80030a2 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	4b76      	ldr	r3, [pc, #472]	; (8003274 <HAL_UART_IRQHandler+0x2f4>)
 800309c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00b      	beq.n	80030ba <HAL_UART_IRQHandler+0x13a>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2208      	movs	r2, #8
 80030a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b0:	f043 0208 	orr.w	r2, r3, #8
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d011      	beq.n	80030e8 <HAL_UART_IRQHandler+0x168>
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00c      	beq.n	80030e8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030de:	f043 0220 	orr.w	r2, r3, #32
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 80b9 	beq.w	8003266 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f003 0320 	and.w	r3, r3, #32
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d011      	beq.n	8003122 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b00      	cmp	r3, #0
 8003106:	d104      	bne.n	8003112 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d007      	beq.n	8003122 <HAL_UART_IRQHandler+0x1a2>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003128:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003134:	2b40      	cmp	r3, #64	; 0x40
 8003136:	d004      	beq.n	8003142 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800313e:	2b00      	cmp	r3, #0
 8003140:	d031      	beq.n	80031a6 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 fcec 	bl	8003b20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003152:	2b40      	cmp	r3, #64	; 0x40
 8003154:	d123      	bne.n	800319e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003164:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800316a:	2b00      	cmp	r3, #0
 800316c:	d013      	beq.n	8003196 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003172:	4a42      	ldr	r2, [pc, #264]	; (800327c <HAL_UART_IRQHandler+0x2fc>)
 8003174:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800317a:	4618      	mov	r0, r3
 800317c:	f7fd feb5 	bl	8000eea <HAL_DMA_Abort_IT>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d017      	beq.n	80031b6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800318a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8003190:	4610      	mov	r0, r2
 8003192:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003194:	e00f      	b.n	80031b6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f87c 	bl	8003294 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800319c:	e00b      	b.n	80031b6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f878 	bl	8003294 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a4:	e007      	b.n	80031b6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f874 	bl	8003294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80031b4:	e057      	b.n	8003266 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b6:	bf00      	nop
    return;
 80031b8:	e055      	b.n	8003266 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00d      	beq.n	80031e0 <HAL_UART_IRQHandler+0x260>
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d008      	beq.n	80031e0 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80031d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 fcf4 	bl	8003bc6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80031de:	e045      	b.n	800326c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d012      	beq.n	8003210 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d104      	bne.n	80031fe <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d008      	beq.n	8003210 <HAL_UART_IRQHandler+0x290>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003202:	2b00      	cmp	r3, #0
 8003204:	d031      	beq.n	800326a <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	4798      	blx	r3
    }
    return;
 800320e:	e02c      	b.n	800326a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003216:	2b00      	cmp	r3, #0
 8003218:	d008      	beq.n	800322c <HAL_UART_IRQHandler+0x2ac>
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 fcb4 	bl	8003b92 <UART_EndTransmit_IT>
    return;
 800322a:	e01f      	b.n	800326c <HAL_UART_IRQHandler+0x2ec>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d008      	beq.n	8003248 <HAL_UART_IRQHandler+0x2c8>
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 fcd4 	bl	8003bee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003246:	e011      	b.n	800326c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00c      	beq.n	800326c <HAL_UART_IRQHandler+0x2ec>
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	2b00      	cmp	r3, #0
 8003256:	da09      	bge.n	800326c <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 fcbe 	bl	8003bda <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800325e:	bf00      	nop
 8003260:	e004      	b.n	800326c <HAL_UART_IRQHandler+0x2ec>
      return;
 8003262:	bf00      	nop
 8003264:	e002      	b.n	800326c <HAL_UART_IRQHandler+0x2ec>
    return;
 8003266:	bf00      	nop
 8003268:	e000      	b.n	800326c <HAL_UART_IRQHandler+0x2ec>
    return;
 800326a:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800326c:	3720      	adds	r7, #32
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	10000001 	.word	0x10000001
 8003278:	04000120 	.word	0x04000120
 800327c:	08003b67 	.word	0x08003b67

08003280 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032a8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80032ac:	b088      	sub	sp, #32
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	431a      	orrs	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032d2:	69fa      	ldr	r2, [r7, #28]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4bb1      	ldr	r3, [pc, #708]	; (80035a4 <UART_SetConfig+0x2fc>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	69f9      	ldr	r1, [r7, #28]
 80032e8:	430b      	orrs	r3, r1
 80032ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4aa6      	ldr	r2, [pc, #664]	; (80035a8 <UART_SetConfig+0x300>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d004      	beq.n	800331c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	69fa      	ldr	r2, [r7, #28]
 8003318:	4313      	orrs	r3, r2
 800331a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003326:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6812      	ldr	r2, [r2, #0]
 800332e:	69f9      	ldr	r1, [r7, #28]
 8003330:	430b      	orrs	r3, r1
 8003332:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	f023 010f 	bic.w	r1, r3, #15
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a97      	ldr	r2, [pc, #604]	; (80035ac <UART_SetConfig+0x304>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d121      	bne.n	8003398 <UART_SetConfig+0xf0>
 8003354:	4b96      	ldr	r3, [pc, #600]	; (80035b0 <UART_SetConfig+0x308>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	2b03      	cmp	r3, #3
 8003360:	d816      	bhi.n	8003390 <UART_SetConfig+0xe8>
 8003362:	a201      	add	r2, pc, #4	; (adr r2, 8003368 <UART_SetConfig+0xc0>)
 8003364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003368:	08003379 	.word	0x08003379
 800336c:	08003385 	.word	0x08003385
 8003370:	0800337f 	.word	0x0800337f
 8003374:	0800338b 	.word	0x0800338b
 8003378:	2301      	movs	r3, #1
 800337a:	76fb      	strb	r3, [r7, #27]
 800337c:	e0e8      	b.n	8003550 <UART_SetConfig+0x2a8>
 800337e:	2302      	movs	r3, #2
 8003380:	76fb      	strb	r3, [r7, #27]
 8003382:	e0e5      	b.n	8003550 <UART_SetConfig+0x2a8>
 8003384:	2304      	movs	r3, #4
 8003386:	76fb      	strb	r3, [r7, #27]
 8003388:	e0e2      	b.n	8003550 <UART_SetConfig+0x2a8>
 800338a:	2308      	movs	r3, #8
 800338c:	76fb      	strb	r3, [r7, #27]
 800338e:	e0df      	b.n	8003550 <UART_SetConfig+0x2a8>
 8003390:	2310      	movs	r3, #16
 8003392:	76fb      	strb	r3, [r7, #27]
 8003394:	bf00      	nop
 8003396:	e0db      	b.n	8003550 <UART_SetConfig+0x2a8>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a85      	ldr	r2, [pc, #532]	; (80035b4 <UART_SetConfig+0x30c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d134      	bne.n	800340c <UART_SetConfig+0x164>
 80033a2:	4b83      	ldr	r3, [pc, #524]	; (80035b0 <UART_SetConfig+0x308>)
 80033a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a8:	f003 030c 	and.w	r3, r3, #12
 80033ac:	2b0c      	cmp	r3, #12
 80033ae:	d829      	bhi.n	8003404 <UART_SetConfig+0x15c>
 80033b0:	a201      	add	r2, pc, #4	; (adr r2, 80033b8 <UART_SetConfig+0x110>)
 80033b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b6:	bf00      	nop
 80033b8:	080033ed 	.word	0x080033ed
 80033bc:	08003405 	.word	0x08003405
 80033c0:	08003405 	.word	0x08003405
 80033c4:	08003405 	.word	0x08003405
 80033c8:	080033f9 	.word	0x080033f9
 80033cc:	08003405 	.word	0x08003405
 80033d0:	08003405 	.word	0x08003405
 80033d4:	08003405 	.word	0x08003405
 80033d8:	080033f3 	.word	0x080033f3
 80033dc:	08003405 	.word	0x08003405
 80033e0:	08003405 	.word	0x08003405
 80033e4:	08003405 	.word	0x08003405
 80033e8:	080033ff 	.word	0x080033ff
 80033ec:	2300      	movs	r3, #0
 80033ee:	76fb      	strb	r3, [r7, #27]
 80033f0:	e0ae      	b.n	8003550 <UART_SetConfig+0x2a8>
 80033f2:	2302      	movs	r3, #2
 80033f4:	76fb      	strb	r3, [r7, #27]
 80033f6:	e0ab      	b.n	8003550 <UART_SetConfig+0x2a8>
 80033f8:	2304      	movs	r3, #4
 80033fa:	76fb      	strb	r3, [r7, #27]
 80033fc:	e0a8      	b.n	8003550 <UART_SetConfig+0x2a8>
 80033fe:	2308      	movs	r3, #8
 8003400:	76fb      	strb	r3, [r7, #27]
 8003402:	e0a5      	b.n	8003550 <UART_SetConfig+0x2a8>
 8003404:	2310      	movs	r3, #16
 8003406:	76fb      	strb	r3, [r7, #27]
 8003408:	bf00      	nop
 800340a:	e0a1      	b.n	8003550 <UART_SetConfig+0x2a8>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a69      	ldr	r2, [pc, #420]	; (80035b8 <UART_SetConfig+0x310>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d120      	bne.n	8003458 <UART_SetConfig+0x1b0>
 8003416:	4b66      	ldr	r3, [pc, #408]	; (80035b0 <UART_SetConfig+0x308>)
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003420:	2b10      	cmp	r3, #16
 8003422:	d00f      	beq.n	8003444 <UART_SetConfig+0x19c>
 8003424:	2b10      	cmp	r3, #16
 8003426:	d802      	bhi.n	800342e <UART_SetConfig+0x186>
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <UART_SetConfig+0x190>
 800342c:	e010      	b.n	8003450 <UART_SetConfig+0x1a8>
 800342e:	2b20      	cmp	r3, #32
 8003430:	d005      	beq.n	800343e <UART_SetConfig+0x196>
 8003432:	2b30      	cmp	r3, #48	; 0x30
 8003434:	d009      	beq.n	800344a <UART_SetConfig+0x1a2>
 8003436:	e00b      	b.n	8003450 <UART_SetConfig+0x1a8>
 8003438:	2300      	movs	r3, #0
 800343a:	76fb      	strb	r3, [r7, #27]
 800343c:	e088      	b.n	8003550 <UART_SetConfig+0x2a8>
 800343e:	2302      	movs	r3, #2
 8003440:	76fb      	strb	r3, [r7, #27]
 8003442:	e085      	b.n	8003550 <UART_SetConfig+0x2a8>
 8003444:	2304      	movs	r3, #4
 8003446:	76fb      	strb	r3, [r7, #27]
 8003448:	e082      	b.n	8003550 <UART_SetConfig+0x2a8>
 800344a:	2308      	movs	r3, #8
 800344c:	76fb      	strb	r3, [r7, #27]
 800344e:	e07f      	b.n	8003550 <UART_SetConfig+0x2a8>
 8003450:	2310      	movs	r3, #16
 8003452:	76fb      	strb	r3, [r7, #27]
 8003454:	bf00      	nop
 8003456:	e07b      	b.n	8003550 <UART_SetConfig+0x2a8>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a57      	ldr	r2, [pc, #348]	; (80035bc <UART_SetConfig+0x314>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d120      	bne.n	80034a4 <UART_SetConfig+0x1fc>
 8003462:	4b53      	ldr	r3, [pc, #332]	; (80035b0 <UART_SetConfig+0x308>)
 8003464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003468:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800346c:	2b40      	cmp	r3, #64	; 0x40
 800346e:	d00f      	beq.n	8003490 <UART_SetConfig+0x1e8>
 8003470:	2b40      	cmp	r3, #64	; 0x40
 8003472:	d802      	bhi.n	800347a <UART_SetConfig+0x1d2>
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <UART_SetConfig+0x1dc>
 8003478:	e010      	b.n	800349c <UART_SetConfig+0x1f4>
 800347a:	2b80      	cmp	r3, #128	; 0x80
 800347c:	d005      	beq.n	800348a <UART_SetConfig+0x1e2>
 800347e:	2bc0      	cmp	r3, #192	; 0xc0
 8003480:	d009      	beq.n	8003496 <UART_SetConfig+0x1ee>
 8003482:	e00b      	b.n	800349c <UART_SetConfig+0x1f4>
 8003484:	2300      	movs	r3, #0
 8003486:	76fb      	strb	r3, [r7, #27]
 8003488:	e062      	b.n	8003550 <UART_SetConfig+0x2a8>
 800348a:	2302      	movs	r3, #2
 800348c:	76fb      	strb	r3, [r7, #27]
 800348e:	e05f      	b.n	8003550 <UART_SetConfig+0x2a8>
 8003490:	2304      	movs	r3, #4
 8003492:	76fb      	strb	r3, [r7, #27]
 8003494:	e05c      	b.n	8003550 <UART_SetConfig+0x2a8>
 8003496:	2308      	movs	r3, #8
 8003498:	76fb      	strb	r3, [r7, #27]
 800349a:	e059      	b.n	8003550 <UART_SetConfig+0x2a8>
 800349c:	2310      	movs	r3, #16
 800349e:	76fb      	strb	r3, [r7, #27]
 80034a0:	bf00      	nop
 80034a2:	e055      	b.n	8003550 <UART_SetConfig+0x2a8>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a45      	ldr	r2, [pc, #276]	; (80035c0 <UART_SetConfig+0x318>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d124      	bne.n	80034f8 <UART_SetConfig+0x250>
 80034ae:	4b40      	ldr	r3, [pc, #256]	; (80035b0 <UART_SetConfig+0x308>)
 80034b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034bc:	d012      	beq.n	80034e4 <UART_SetConfig+0x23c>
 80034be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034c2:	d802      	bhi.n	80034ca <UART_SetConfig+0x222>
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d007      	beq.n	80034d8 <UART_SetConfig+0x230>
 80034c8:	e012      	b.n	80034f0 <UART_SetConfig+0x248>
 80034ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ce:	d006      	beq.n	80034de <UART_SetConfig+0x236>
 80034d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034d4:	d009      	beq.n	80034ea <UART_SetConfig+0x242>
 80034d6:	e00b      	b.n	80034f0 <UART_SetConfig+0x248>
 80034d8:	2300      	movs	r3, #0
 80034da:	76fb      	strb	r3, [r7, #27]
 80034dc:	e038      	b.n	8003550 <UART_SetConfig+0x2a8>
 80034de:	2302      	movs	r3, #2
 80034e0:	76fb      	strb	r3, [r7, #27]
 80034e2:	e035      	b.n	8003550 <UART_SetConfig+0x2a8>
 80034e4:	2304      	movs	r3, #4
 80034e6:	76fb      	strb	r3, [r7, #27]
 80034e8:	e032      	b.n	8003550 <UART_SetConfig+0x2a8>
 80034ea:	2308      	movs	r3, #8
 80034ec:	76fb      	strb	r3, [r7, #27]
 80034ee:	e02f      	b.n	8003550 <UART_SetConfig+0x2a8>
 80034f0:	2310      	movs	r3, #16
 80034f2:	76fb      	strb	r3, [r7, #27]
 80034f4:	bf00      	nop
 80034f6:	e02b      	b.n	8003550 <UART_SetConfig+0x2a8>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a2a      	ldr	r2, [pc, #168]	; (80035a8 <UART_SetConfig+0x300>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d124      	bne.n	800354c <UART_SetConfig+0x2a4>
 8003502:	4b2b      	ldr	r3, [pc, #172]	; (80035b0 <UART_SetConfig+0x308>)
 8003504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003508:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800350c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003510:	d012      	beq.n	8003538 <UART_SetConfig+0x290>
 8003512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003516:	d802      	bhi.n	800351e <UART_SetConfig+0x276>
 8003518:	2b00      	cmp	r3, #0
 800351a:	d007      	beq.n	800352c <UART_SetConfig+0x284>
 800351c:	e012      	b.n	8003544 <UART_SetConfig+0x29c>
 800351e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003522:	d006      	beq.n	8003532 <UART_SetConfig+0x28a>
 8003524:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003528:	d009      	beq.n	800353e <UART_SetConfig+0x296>
 800352a:	e00b      	b.n	8003544 <UART_SetConfig+0x29c>
 800352c:	2300      	movs	r3, #0
 800352e:	76fb      	strb	r3, [r7, #27]
 8003530:	e00e      	b.n	8003550 <UART_SetConfig+0x2a8>
 8003532:	2302      	movs	r3, #2
 8003534:	76fb      	strb	r3, [r7, #27]
 8003536:	e00b      	b.n	8003550 <UART_SetConfig+0x2a8>
 8003538:	2304      	movs	r3, #4
 800353a:	76fb      	strb	r3, [r7, #27]
 800353c:	e008      	b.n	8003550 <UART_SetConfig+0x2a8>
 800353e:	2308      	movs	r3, #8
 8003540:	76fb      	strb	r3, [r7, #27]
 8003542:	e005      	b.n	8003550 <UART_SetConfig+0x2a8>
 8003544:	2310      	movs	r3, #16
 8003546:	76fb      	strb	r3, [r7, #27]
 8003548:	bf00      	nop
 800354a:	e001      	b.n	8003550 <UART_SetConfig+0x2a8>
 800354c:	2310      	movs	r3, #16
 800354e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a14      	ldr	r2, [pc, #80]	; (80035a8 <UART_SetConfig+0x300>)
 8003556:	4293      	cmp	r3, r2
 8003558:	f040 80a1 	bne.w	800369e <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800355c:	7efb      	ldrb	r3, [r7, #27]
 800355e:	2b08      	cmp	r3, #8
 8003560:	d836      	bhi.n	80035d0 <UART_SetConfig+0x328>
 8003562:	a201      	add	r2, pc, #4	; (adr r2, 8003568 <UART_SetConfig+0x2c0>)
 8003564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003568:	0800358d 	.word	0x0800358d
 800356c:	080035d1 	.word	0x080035d1
 8003570:	08003595 	.word	0x08003595
 8003574:	080035d1 	.word	0x080035d1
 8003578:	0800359b 	.word	0x0800359b
 800357c:	080035d1 	.word	0x080035d1
 8003580:	080035d1 	.word	0x080035d1
 8003584:	080035d1 	.word	0x080035d1
 8003588:	080035c9 	.word	0x080035c9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800358c:	f7fe fd4a 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 8003590:	6178      	str	r0, [r7, #20]
        break;
 8003592:	e022      	b.n	80035da <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003594:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <UART_SetConfig+0x31c>)
 8003596:	617b      	str	r3, [r7, #20]
        break;
 8003598:	e01f      	b.n	80035da <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800359a:	f7fe fcad 	bl	8001ef8 <HAL_RCC_GetSysClockFreq>
 800359e:	6178      	str	r0, [r7, #20]
        break;
 80035a0:	e01b      	b.n	80035da <UART_SetConfig+0x332>
 80035a2:	bf00      	nop
 80035a4:	cfff69f3 	.word	0xcfff69f3
 80035a8:	40008000 	.word	0x40008000
 80035ac:	40013800 	.word	0x40013800
 80035b0:	40021000 	.word	0x40021000
 80035b4:	40004400 	.word	0x40004400
 80035b8:	40004800 	.word	0x40004800
 80035bc:	40004c00 	.word	0x40004c00
 80035c0:	40005000 	.word	0x40005000
 80035c4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035cc:	617b      	str	r3, [r7, #20]
        break;
 80035ce:	e004      	b.n	80035da <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	76bb      	strb	r3, [r7, #26]
        break;
 80035d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 811d 	beq.w	800381c <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	4a97      	ldr	r2, [pc, #604]	; (8003844 <UART_SetConfig+0x59c>)
 80035e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035ec:	461a      	mov	r2, r3
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80035f4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	4413      	add	r3, r2
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	429a      	cmp	r2, r3
 8003604:	d305      	bcc.n	8003612 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	429a      	cmp	r2, r3
 8003610:	d902      	bls.n	8003618 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	76bb      	strb	r3, [r7, #26]
 8003616:	e101      	b.n	800381c <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	4618      	mov	r0, r3
 800361c:	f04f 0100 	mov.w	r1, #0
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	4a87      	ldr	r2, [pc, #540]	; (8003844 <UART_SetConfig+0x59c>)
 8003626:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800362a:	b29b      	uxth	r3, r3
 800362c:	f04f 0400 	mov.w	r4, #0
 8003630:	461a      	mov	r2, r3
 8003632:	4623      	mov	r3, r4
 8003634:	f7fc fe34 	bl	80002a0 <__aeabi_uldivmod>
 8003638:	4603      	mov	r3, r0
 800363a:	460c      	mov	r4, r1
 800363c:	4619      	mov	r1, r3
 800363e:	4622      	mov	r2, r4
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	f04f 0400 	mov.w	r4, #0
 8003648:	0214      	lsls	r4, r2, #8
 800364a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800364e:	020b      	lsls	r3, r1, #8
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6852      	ldr	r2, [r2, #4]
 8003654:	0852      	lsrs	r2, r2, #1
 8003656:	4611      	mov	r1, r2
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	eb13 0b01 	adds.w	fp, r3, r1
 8003660:	eb44 0c02 	adc.w	ip, r4, r2
 8003664:	4658      	mov	r0, fp
 8003666:	4661      	mov	r1, ip
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f04f 0400 	mov.w	r4, #0
 8003670:	461a      	mov	r2, r3
 8003672:	4623      	mov	r3, r4
 8003674:	f7fc fe14 	bl	80002a0 <__aeabi_uldivmod>
 8003678:	4603      	mov	r3, r0
 800367a:	460c      	mov	r4, r1
 800367c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003684:	d308      	bcc.n	8003698 <UART_SetConfig+0x3f0>
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800368c:	d204      	bcs.n	8003698 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	60da      	str	r2, [r3, #12]
 8003696:	e0c1      	b.n	800381c <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	76bb      	strb	r3, [r7, #26]
 800369c:	e0be      	b.n	800381c <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036a6:	d164      	bne.n	8003772 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 80036a8:	7efb      	ldrb	r3, [r7, #27]
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d827      	bhi.n	80036fe <UART_SetConfig+0x456>
 80036ae:	a201      	add	r2, pc, #4	; (adr r2, 80036b4 <UART_SetConfig+0x40c>)
 80036b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b4:	080036d9 	.word	0x080036d9
 80036b8:	080036e1 	.word	0x080036e1
 80036bc:	080036e9 	.word	0x080036e9
 80036c0:	080036ff 	.word	0x080036ff
 80036c4:	080036ef 	.word	0x080036ef
 80036c8:	080036ff 	.word	0x080036ff
 80036cc:	080036ff 	.word	0x080036ff
 80036d0:	080036ff 	.word	0x080036ff
 80036d4:	080036f7 	.word	0x080036f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036d8:	f7fe fca4 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 80036dc:	6178      	str	r0, [r7, #20]
        break;
 80036de:	e013      	b.n	8003708 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036e0:	f7fe fcb6 	bl	8002050 <HAL_RCC_GetPCLK2Freq>
 80036e4:	6178      	str	r0, [r7, #20]
        break;
 80036e6:	e00f      	b.n	8003708 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036e8:	4b57      	ldr	r3, [pc, #348]	; (8003848 <UART_SetConfig+0x5a0>)
 80036ea:	617b      	str	r3, [r7, #20]
        break;
 80036ec:	e00c      	b.n	8003708 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ee:	f7fe fc03 	bl	8001ef8 <HAL_RCC_GetSysClockFreq>
 80036f2:	6178      	str	r0, [r7, #20]
        break;
 80036f4:	e008      	b.n	8003708 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036fa:	617b      	str	r3, [r7, #20]
        break;
 80036fc:	e004      	b.n	8003708 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	76bb      	strb	r3, [r7, #26]
        break;
 8003706:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 8086 	beq.w	800381c <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	4a4b      	ldr	r2, [pc, #300]	; (8003844 <UART_SetConfig+0x59c>)
 8003716:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800371a:	461a      	mov	r2, r3
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003722:	005a      	lsls	r2, r3, #1
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	085b      	lsrs	r3, r3, #1
 800372a:	441a      	add	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	fbb2 f3f3 	udiv	r3, r2, r3
 8003734:	b29b      	uxth	r3, r3
 8003736:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	2b0f      	cmp	r3, #15
 800373c:	d916      	bls.n	800376c <UART_SetConfig+0x4c4>
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003744:	d212      	bcs.n	800376c <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	b29b      	uxth	r3, r3
 800374a:	f023 030f 	bic.w	r3, r3, #15
 800374e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	085b      	lsrs	r3, r3, #1
 8003754:	b29b      	uxth	r3, r3
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	b29a      	uxth	r2, r3
 800375c:	89fb      	ldrh	r3, [r7, #14]
 800375e:	4313      	orrs	r3, r2
 8003760:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	89fa      	ldrh	r2, [r7, #14]
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	e057      	b.n	800381c <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	76bb      	strb	r3, [r7, #26]
 8003770:	e054      	b.n	800381c <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003772:	7efb      	ldrb	r3, [r7, #27]
 8003774:	2b08      	cmp	r3, #8
 8003776:	d828      	bhi.n	80037ca <UART_SetConfig+0x522>
 8003778:	a201      	add	r2, pc, #4	; (adr r2, 8003780 <UART_SetConfig+0x4d8>)
 800377a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377e:	bf00      	nop
 8003780:	080037a5 	.word	0x080037a5
 8003784:	080037ad 	.word	0x080037ad
 8003788:	080037b5 	.word	0x080037b5
 800378c:	080037cb 	.word	0x080037cb
 8003790:	080037bb 	.word	0x080037bb
 8003794:	080037cb 	.word	0x080037cb
 8003798:	080037cb 	.word	0x080037cb
 800379c:	080037cb 	.word	0x080037cb
 80037a0:	080037c3 	.word	0x080037c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037a4:	f7fe fc3e 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 80037a8:	6178      	str	r0, [r7, #20]
        break;
 80037aa:	e013      	b.n	80037d4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037ac:	f7fe fc50 	bl	8002050 <HAL_RCC_GetPCLK2Freq>
 80037b0:	6178      	str	r0, [r7, #20]
        break;
 80037b2:	e00f      	b.n	80037d4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037b4:	4b24      	ldr	r3, [pc, #144]	; (8003848 <UART_SetConfig+0x5a0>)
 80037b6:	617b      	str	r3, [r7, #20]
        break;
 80037b8:	e00c      	b.n	80037d4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ba:	f7fe fb9d 	bl	8001ef8 <HAL_RCC_GetSysClockFreq>
 80037be:	6178      	str	r0, [r7, #20]
        break;
 80037c0:	e008      	b.n	80037d4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037c6:	617b      	str	r3, [r7, #20]
        break;
 80037c8:	e004      	b.n	80037d4 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	76bb      	strb	r3, [r7, #26]
        break;
 80037d2:	bf00      	nop
    }

    if (pclk != 0U)
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d020      	beq.n	800381c <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037de:	4a19      	ldr	r2, [pc, #100]	; (8003844 <UART_SetConfig+0x59c>)
 80037e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037e4:	461a      	mov	r2, r3
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	fbb3 f2f2 	udiv	r2, r3, r2
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	085b      	lsrs	r3, r3, #1
 80037f2:	441a      	add	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	2b0f      	cmp	r3, #15
 8003804:	d908      	bls.n	8003818 <UART_SetConfig+0x570>
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380c:	d204      	bcs.n	8003818 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	60da      	str	r2, [r3, #12]
 8003816:	e001      	b.n	800381c <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8003838:	7ebb      	ldrb	r3, [r7, #26]
}
 800383a:	4618      	mov	r0, r3
 800383c:	3720      	adds	r7, #32
 800383e:	46bd      	mov	sp, r7
 8003840:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003844:	080049b8 	.word	0x080049b8
 8003848:	00f42400 	.word	0x00f42400

0800384c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e0:	f003 0310 	and.w	r3, r3, #16
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00a      	beq.n	8003920 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003928:	2b00      	cmp	r3, #0
 800392a:	d01a      	beq.n	8003962 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800394a:	d10a      	bne.n	8003962 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	605a      	str	r2, [r3, #4]
  }
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af02      	add	r7, sp, #8
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80039a0:	f7fd f964 	bl	8000c6c <HAL_GetTick>
 80039a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d10e      	bne.n	80039d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f82c 	bl	8003a20 <UART_WaitOnFlagUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e022      	b.n	8003a18 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d10e      	bne.n	80039fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f816 	bl	8003a20 <UART_WaitOnFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e00c      	b.n	8003a18 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2220      	movs	r2, #32
 8003a02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	603b      	str	r3, [r7, #0]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a30:	e062      	b.n	8003af8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a38:	d05e      	beq.n	8003af8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a3a:	f7fd f917 	bl	8000c6c <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d302      	bcc.n	8003a50 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d11d      	bne.n	8003a8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a5e:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0201 	bic.w	r2, r2, #1
 8003a6e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e045      	b.n	8003b18 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0304 	and.w	r3, r3, #4
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d02e      	beq.n	8003af8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa8:	d126      	bne.n	8003af8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ab2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ac2:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0201 	bic.w	r2, r2, #1
 8003ad2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e00f      	b.n	8003b18 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	69da      	ldr	r2, [r3, #28]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	4013      	ands	r3, r2
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	bf0c      	ite	eq
 8003b08:	2301      	moveq	r3, #1
 8003b0a:	2300      	movne	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	461a      	mov	r2, r3
 8003b10:	79fb      	ldrb	r3, [r7, #7]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d08d      	beq.n	8003a32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b36:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6812      	ldr	r2, [r2, #0]
 8003b42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b46:	f023 0301 	bic.w	r3, r3, #1
 8003b4a:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b084      	sub	sp, #16
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f7ff fb85 	bl	8003294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b8a:	bf00      	nop
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b082      	sub	sp, #8
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ba8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7ff fb61 	bl	8003280 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bbe:	bf00      	nop
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b085      	sub	sp, #20
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_UARTEx_DisableFifoMode+0x16>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e027      	b.n	8003c68 <HAL_UARTEx_DisableFifoMode+0x66>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2224      	movs	r2, #36	; 0x24
 8003c24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0201 	bic.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003c46:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d101      	bne.n	8003c8c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	e02d      	b.n	8003ce8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2224      	movs	r2, #36	; 0x24
 8003c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0201 	bic.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f84f 	bl	8003d6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e02d      	b.n	8003d64 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2224      	movs	r2, #36	; 0x24
 8003d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0201 	bic.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f811 	bl	8003d6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b089      	sub	sp, #36	; 0x24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003d74:	4a2f      	ldr	r2, [pc, #188]	; (8003e34 <UARTEx_SetNbDataToProcess+0xc8>)
 8003d76:	f107 0314 	add.w	r3, r7, #20
 8003d7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d7e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003d82:	4a2d      	ldr	r2, [pc, #180]	; (8003e38 <UARTEx_SetNbDataToProcess+0xcc>)
 8003d84:	f107 030c 	add.w	r3, r7, #12
 8003d88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d8c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d108      	bne.n	8003daa <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003da8:	e03d      	b.n	8003e26 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003daa:	2308      	movs	r3, #8
 8003dac:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003dae:	2308      	movs	r3, #8
 8003db0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	0e5b      	lsrs	r3, r3, #25
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	0f5b      	lsrs	r3, r3, #29
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003dd2:	7fbb      	ldrb	r3, [r7, #30]
 8003dd4:	7f3a      	ldrb	r2, [r7, #28]
 8003dd6:	f107 0120 	add.w	r1, r7, #32
 8003dda:	440a      	add	r2, r1
 8003ddc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003de0:	fb02 f303 	mul.w	r3, r2, r3
 8003de4:	7f3a      	ldrb	r2, [r7, #28]
 8003de6:	f107 0120 	add.w	r1, r7, #32
 8003dea:	440a      	add	r2, r1
 8003dec:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003df0:	fb93 f3f2 	sdiv	r3, r3, r2
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003dfc:	7ffb      	ldrb	r3, [r7, #31]
 8003dfe:	7f7a      	ldrb	r2, [r7, #29]
 8003e00:	f107 0120 	add.w	r1, r7, #32
 8003e04:	440a      	add	r2, r1
 8003e06:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003e0a:	fb02 f303 	mul.w	r3, r2, r3
 8003e0e:	7f7a      	ldrb	r2, [r7, #29]
 8003e10:	f107 0120 	add.w	r1, r7, #32
 8003e14:	440a      	add	r2, r1
 8003e16:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003e1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003e26:	bf00      	nop
 8003e28:	3724      	adds	r7, #36	; 0x24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	08004960 	.word	0x08004960
 8003e38:	08004968 	.word	0x08004968

08003e3c <__errno>:
 8003e3c:	4b01      	ldr	r3, [pc, #4]	; (8003e44 <__errno+0x8>)
 8003e3e:	6818      	ldr	r0, [r3, #0]
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	2000000c 	.word	0x2000000c

08003e48 <__libc_init_array>:
 8003e48:	b570      	push	{r4, r5, r6, lr}
 8003e4a:	4e0d      	ldr	r6, [pc, #52]	; (8003e80 <__libc_init_array+0x38>)
 8003e4c:	4c0d      	ldr	r4, [pc, #52]	; (8003e84 <__libc_init_array+0x3c>)
 8003e4e:	1ba4      	subs	r4, r4, r6
 8003e50:	10a4      	asrs	r4, r4, #2
 8003e52:	2500      	movs	r5, #0
 8003e54:	42a5      	cmp	r5, r4
 8003e56:	d109      	bne.n	8003e6c <__libc_init_array+0x24>
 8003e58:	4e0b      	ldr	r6, [pc, #44]	; (8003e88 <__libc_init_array+0x40>)
 8003e5a:	4c0c      	ldr	r4, [pc, #48]	; (8003e8c <__libc_init_array+0x44>)
 8003e5c:	f000 fc64 	bl	8004728 <_init>
 8003e60:	1ba4      	subs	r4, r4, r6
 8003e62:	10a4      	asrs	r4, r4, #2
 8003e64:	2500      	movs	r5, #0
 8003e66:	42a5      	cmp	r5, r4
 8003e68:	d105      	bne.n	8003e76 <__libc_init_array+0x2e>
 8003e6a:	bd70      	pop	{r4, r5, r6, pc}
 8003e6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e70:	4798      	blx	r3
 8003e72:	3501      	adds	r5, #1
 8003e74:	e7ee      	b.n	8003e54 <__libc_init_array+0xc>
 8003e76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e7a:	4798      	blx	r3
 8003e7c:	3501      	adds	r5, #1
 8003e7e:	e7f2      	b.n	8003e66 <__libc_init_array+0x1e>
 8003e80:	08004a0c 	.word	0x08004a0c
 8003e84:	08004a0c 	.word	0x08004a0c
 8003e88:	08004a0c 	.word	0x08004a0c
 8003e8c:	08004a10 	.word	0x08004a10

08003e90 <memcpy>:
 8003e90:	b510      	push	{r4, lr}
 8003e92:	1e43      	subs	r3, r0, #1
 8003e94:	440a      	add	r2, r1
 8003e96:	4291      	cmp	r1, r2
 8003e98:	d100      	bne.n	8003e9c <memcpy+0xc>
 8003e9a:	bd10      	pop	{r4, pc}
 8003e9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ea0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ea4:	e7f7      	b.n	8003e96 <memcpy+0x6>

08003ea6 <memset>:
 8003ea6:	4402      	add	r2, r0
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d100      	bne.n	8003eb0 <memset+0xa>
 8003eae:	4770      	bx	lr
 8003eb0:	f803 1b01 	strb.w	r1, [r3], #1
 8003eb4:	e7f9      	b.n	8003eaa <memset+0x4>
	...

08003eb8 <rand>:
 8003eb8:	b538      	push	{r3, r4, r5, lr}
 8003eba:	4b13      	ldr	r3, [pc, #76]	; (8003f08 <rand+0x50>)
 8003ebc:	681c      	ldr	r4, [r3, #0]
 8003ebe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ec0:	b97b      	cbnz	r3, 8003ee2 <rand+0x2a>
 8003ec2:	2018      	movs	r0, #24
 8003ec4:	f000 f84c 	bl	8003f60 <malloc>
 8003ec8:	4a10      	ldr	r2, [pc, #64]	; (8003f0c <rand+0x54>)
 8003eca:	4b11      	ldr	r3, [pc, #68]	; (8003f10 <rand+0x58>)
 8003ecc:	63a0      	str	r0, [r4, #56]	; 0x38
 8003ece:	e9c0 2300 	strd	r2, r3, [r0]
 8003ed2:	4b10      	ldr	r3, [pc, #64]	; (8003f14 <rand+0x5c>)
 8003ed4:	6083      	str	r3, [r0, #8]
 8003ed6:	230b      	movs	r3, #11
 8003ed8:	8183      	strh	r3, [r0, #12]
 8003eda:	2201      	movs	r2, #1
 8003edc:	2300      	movs	r3, #0
 8003ede:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003ee2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003ee4:	480c      	ldr	r0, [pc, #48]	; (8003f18 <rand+0x60>)
 8003ee6:	690a      	ldr	r2, [r1, #16]
 8003ee8:	694b      	ldr	r3, [r1, #20]
 8003eea:	4c0c      	ldr	r4, [pc, #48]	; (8003f1c <rand+0x64>)
 8003eec:	4350      	muls	r0, r2
 8003eee:	fb04 0003 	mla	r0, r4, r3, r0
 8003ef2:	fba2 2304 	umull	r2, r3, r2, r4
 8003ef6:	4403      	add	r3, r0
 8003ef8:	1c54      	adds	r4, r2, #1
 8003efa:	f143 0500 	adc.w	r5, r3, #0
 8003efe:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8003f02:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8003f06:	bd38      	pop	{r3, r4, r5, pc}
 8003f08:	2000000c 	.word	0x2000000c
 8003f0c:	abcd330e 	.word	0xabcd330e
 8003f10:	e66d1234 	.word	0xe66d1234
 8003f14:	0005deec 	.word	0x0005deec
 8003f18:	5851f42d 	.word	0x5851f42d
 8003f1c:	4c957f2d 	.word	0x4c957f2d

08003f20 <siprintf>:
 8003f20:	b40e      	push	{r1, r2, r3}
 8003f22:	b500      	push	{lr}
 8003f24:	b09c      	sub	sp, #112	; 0x70
 8003f26:	ab1d      	add	r3, sp, #116	; 0x74
 8003f28:	9002      	str	r0, [sp, #8]
 8003f2a:	9006      	str	r0, [sp, #24]
 8003f2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f30:	4809      	ldr	r0, [pc, #36]	; (8003f58 <siprintf+0x38>)
 8003f32:	9107      	str	r1, [sp, #28]
 8003f34:	9104      	str	r1, [sp, #16]
 8003f36:	4909      	ldr	r1, [pc, #36]	; (8003f5c <siprintf+0x3c>)
 8003f38:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f3c:	9105      	str	r1, [sp, #20]
 8003f3e:	6800      	ldr	r0, [r0, #0]
 8003f40:	9301      	str	r3, [sp, #4]
 8003f42:	a902      	add	r1, sp, #8
 8003f44:	f000 f916 	bl	8004174 <_svfiprintf_r>
 8003f48:	9b02      	ldr	r3, [sp, #8]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	701a      	strb	r2, [r3, #0]
 8003f4e:	b01c      	add	sp, #112	; 0x70
 8003f50:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f54:	b003      	add	sp, #12
 8003f56:	4770      	bx	lr
 8003f58:	2000000c 	.word	0x2000000c
 8003f5c:	ffff0208 	.word	0xffff0208

08003f60 <malloc>:
 8003f60:	4b02      	ldr	r3, [pc, #8]	; (8003f6c <malloc+0xc>)
 8003f62:	4601      	mov	r1, r0
 8003f64:	6818      	ldr	r0, [r3, #0]
 8003f66:	f000 b851 	b.w	800400c <_malloc_r>
 8003f6a:	bf00      	nop
 8003f6c:	2000000c 	.word	0x2000000c

08003f70 <_free_r>:
 8003f70:	b538      	push	{r3, r4, r5, lr}
 8003f72:	4605      	mov	r5, r0
 8003f74:	2900      	cmp	r1, #0
 8003f76:	d045      	beq.n	8004004 <_free_r+0x94>
 8003f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f7c:	1f0c      	subs	r4, r1, #4
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	bfb8      	it	lt
 8003f82:	18e4      	addlt	r4, r4, r3
 8003f84:	f000 fb9f 	bl	80046c6 <__malloc_lock>
 8003f88:	4a1f      	ldr	r2, [pc, #124]	; (8004008 <_free_r+0x98>)
 8003f8a:	6813      	ldr	r3, [r2, #0]
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	b933      	cbnz	r3, 8003f9e <_free_r+0x2e>
 8003f90:	6063      	str	r3, [r4, #4]
 8003f92:	6014      	str	r4, [r2, #0]
 8003f94:	4628      	mov	r0, r5
 8003f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f9a:	f000 bb95 	b.w	80046c8 <__malloc_unlock>
 8003f9e:	42a3      	cmp	r3, r4
 8003fa0:	d90c      	bls.n	8003fbc <_free_r+0x4c>
 8003fa2:	6821      	ldr	r1, [r4, #0]
 8003fa4:	1862      	adds	r2, r4, r1
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	bf04      	itt	eq
 8003faa:	681a      	ldreq	r2, [r3, #0]
 8003fac:	685b      	ldreq	r3, [r3, #4]
 8003fae:	6063      	str	r3, [r4, #4]
 8003fb0:	bf04      	itt	eq
 8003fb2:	1852      	addeq	r2, r2, r1
 8003fb4:	6022      	streq	r2, [r4, #0]
 8003fb6:	6004      	str	r4, [r0, #0]
 8003fb8:	e7ec      	b.n	8003f94 <_free_r+0x24>
 8003fba:	4613      	mov	r3, r2
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	b10a      	cbz	r2, 8003fc4 <_free_r+0x54>
 8003fc0:	42a2      	cmp	r2, r4
 8003fc2:	d9fa      	bls.n	8003fba <_free_r+0x4a>
 8003fc4:	6819      	ldr	r1, [r3, #0]
 8003fc6:	1858      	adds	r0, r3, r1
 8003fc8:	42a0      	cmp	r0, r4
 8003fca:	d10b      	bne.n	8003fe4 <_free_r+0x74>
 8003fcc:	6820      	ldr	r0, [r4, #0]
 8003fce:	4401      	add	r1, r0
 8003fd0:	1858      	adds	r0, r3, r1
 8003fd2:	4282      	cmp	r2, r0
 8003fd4:	6019      	str	r1, [r3, #0]
 8003fd6:	d1dd      	bne.n	8003f94 <_free_r+0x24>
 8003fd8:	6810      	ldr	r0, [r2, #0]
 8003fda:	6852      	ldr	r2, [r2, #4]
 8003fdc:	605a      	str	r2, [r3, #4]
 8003fde:	4401      	add	r1, r0
 8003fe0:	6019      	str	r1, [r3, #0]
 8003fe2:	e7d7      	b.n	8003f94 <_free_r+0x24>
 8003fe4:	d902      	bls.n	8003fec <_free_r+0x7c>
 8003fe6:	230c      	movs	r3, #12
 8003fe8:	602b      	str	r3, [r5, #0]
 8003fea:	e7d3      	b.n	8003f94 <_free_r+0x24>
 8003fec:	6820      	ldr	r0, [r4, #0]
 8003fee:	1821      	adds	r1, r4, r0
 8003ff0:	428a      	cmp	r2, r1
 8003ff2:	bf04      	itt	eq
 8003ff4:	6811      	ldreq	r1, [r2, #0]
 8003ff6:	6852      	ldreq	r2, [r2, #4]
 8003ff8:	6062      	str	r2, [r4, #4]
 8003ffa:	bf04      	itt	eq
 8003ffc:	1809      	addeq	r1, r1, r0
 8003ffe:	6021      	streq	r1, [r4, #0]
 8004000:	605c      	str	r4, [r3, #4]
 8004002:	e7c7      	b.n	8003f94 <_free_r+0x24>
 8004004:	bd38      	pop	{r3, r4, r5, pc}
 8004006:	bf00      	nop
 8004008:	20000090 	.word	0x20000090

0800400c <_malloc_r>:
 800400c:	b570      	push	{r4, r5, r6, lr}
 800400e:	1ccd      	adds	r5, r1, #3
 8004010:	f025 0503 	bic.w	r5, r5, #3
 8004014:	3508      	adds	r5, #8
 8004016:	2d0c      	cmp	r5, #12
 8004018:	bf38      	it	cc
 800401a:	250c      	movcc	r5, #12
 800401c:	2d00      	cmp	r5, #0
 800401e:	4606      	mov	r6, r0
 8004020:	db01      	blt.n	8004026 <_malloc_r+0x1a>
 8004022:	42a9      	cmp	r1, r5
 8004024:	d903      	bls.n	800402e <_malloc_r+0x22>
 8004026:	230c      	movs	r3, #12
 8004028:	6033      	str	r3, [r6, #0]
 800402a:	2000      	movs	r0, #0
 800402c:	bd70      	pop	{r4, r5, r6, pc}
 800402e:	f000 fb4a 	bl	80046c6 <__malloc_lock>
 8004032:	4a21      	ldr	r2, [pc, #132]	; (80040b8 <_malloc_r+0xac>)
 8004034:	6814      	ldr	r4, [r2, #0]
 8004036:	4621      	mov	r1, r4
 8004038:	b991      	cbnz	r1, 8004060 <_malloc_r+0x54>
 800403a:	4c20      	ldr	r4, [pc, #128]	; (80040bc <_malloc_r+0xb0>)
 800403c:	6823      	ldr	r3, [r4, #0]
 800403e:	b91b      	cbnz	r3, 8004048 <_malloc_r+0x3c>
 8004040:	4630      	mov	r0, r6
 8004042:	f000 fb17 	bl	8004674 <_sbrk_r>
 8004046:	6020      	str	r0, [r4, #0]
 8004048:	4629      	mov	r1, r5
 800404a:	4630      	mov	r0, r6
 800404c:	f000 fb12 	bl	8004674 <_sbrk_r>
 8004050:	1c43      	adds	r3, r0, #1
 8004052:	d124      	bne.n	800409e <_malloc_r+0x92>
 8004054:	230c      	movs	r3, #12
 8004056:	6033      	str	r3, [r6, #0]
 8004058:	4630      	mov	r0, r6
 800405a:	f000 fb35 	bl	80046c8 <__malloc_unlock>
 800405e:	e7e4      	b.n	800402a <_malloc_r+0x1e>
 8004060:	680b      	ldr	r3, [r1, #0]
 8004062:	1b5b      	subs	r3, r3, r5
 8004064:	d418      	bmi.n	8004098 <_malloc_r+0x8c>
 8004066:	2b0b      	cmp	r3, #11
 8004068:	d90f      	bls.n	800408a <_malloc_r+0x7e>
 800406a:	600b      	str	r3, [r1, #0]
 800406c:	50cd      	str	r5, [r1, r3]
 800406e:	18cc      	adds	r4, r1, r3
 8004070:	4630      	mov	r0, r6
 8004072:	f000 fb29 	bl	80046c8 <__malloc_unlock>
 8004076:	f104 000b 	add.w	r0, r4, #11
 800407a:	1d23      	adds	r3, r4, #4
 800407c:	f020 0007 	bic.w	r0, r0, #7
 8004080:	1ac3      	subs	r3, r0, r3
 8004082:	d0d3      	beq.n	800402c <_malloc_r+0x20>
 8004084:	425a      	negs	r2, r3
 8004086:	50e2      	str	r2, [r4, r3]
 8004088:	e7d0      	b.n	800402c <_malloc_r+0x20>
 800408a:	428c      	cmp	r4, r1
 800408c:	684b      	ldr	r3, [r1, #4]
 800408e:	bf16      	itet	ne
 8004090:	6063      	strne	r3, [r4, #4]
 8004092:	6013      	streq	r3, [r2, #0]
 8004094:	460c      	movne	r4, r1
 8004096:	e7eb      	b.n	8004070 <_malloc_r+0x64>
 8004098:	460c      	mov	r4, r1
 800409a:	6849      	ldr	r1, [r1, #4]
 800409c:	e7cc      	b.n	8004038 <_malloc_r+0x2c>
 800409e:	1cc4      	adds	r4, r0, #3
 80040a0:	f024 0403 	bic.w	r4, r4, #3
 80040a4:	42a0      	cmp	r0, r4
 80040a6:	d005      	beq.n	80040b4 <_malloc_r+0xa8>
 80040a8:	1a21      	subs	r1, r4, r0
 80040aa:	4630      	mov	r0, r6
 80040ac:	f000 fae2 	bl	8004674 <_sbrk_r>
 80040b0:	3001      	adds	r0, #1
 80040b2:	d0cf      	beq.n	8004054 <_malloc_r+0x48>
 80040b4:	6025      	str	r5, [r4, #0]
 80040b6:	e7db      	b.n	8004070 <_malloc_r+0x64>
 80040b8:	20000090 	.word	0x20000090
 80040bc:	20000094 	.word	0x20000094

080040c0 <__ssputs_r>:
 80040c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040c4:	688e      	ldr	r6, [r1, #8]
 80040c6:	429e      	cmp	r6, r3
 80040c8:	4682      	mov	sl, r0
 80040ca:	460c      	mov	r4, r1
 80040cc:	4690      	mov	r8, r2
 80040ce:	4699      	mov	r9, r3
 80040d0:	d837      	bhi.n	8004142 <__ssputs_r+0x82>
 80040d2:	898a      	ldrh	r2, [r1, #12]
 80040d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80040d8:	d031      	beq.n	800413e <__ssputs_r+0x7e>
 80040da:	6825      	ldr	r5, [r4, #0]
 80040dc:	6909      	ldr	r1, [r1, #16]
 80040de:	1a6f      	subs	r7, r5, r1
 80040e0:	6965      	ldr	r5, [r4, #20]
 80040e2:	2302      	movs	r3, #2
 80040e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040e8:	fb95 f5f3 	sdiv	r5, r5, r3
 80040ec:	f109 0301 	add.w	r3, r9, #1
 80040f0:	443b      	add	r3, r7
 80040f2:	429d      	cmp	r5, r3
 80040f4:	bf38      	it	cc
 80040f6:	461d      	movcc	r5, r3
 80040f8:	0553      	lsls	r3, r2, #21
 80040fa:	d530      	bpl.n	800415e <__ssputs_r+0x9e>
 80040fc:	4629      	mov	r1, r5
 80040fe:	f7ff ff85 	bl	800400c <_malloc_r>
 8004102:	4606      	mov	r6, r0
 8004104:	b950      	cbnz	r0, 800411c <__ssputs_r+0x5c>
 8004106:	230c      	movs	r3, #12
 8004108:	f8ca 3000 	str.w	r3, [sl]
 800410c:	89a3      	ldrh	r3, [r4, #12]
 800410e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004112:	81a3      	strh	r3, [r4, #12]
 8004114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800411c:	463a      	mov	r2, r7
 800411e:	6921      	ldr	r1, [r4, #16]
 8004120:	f7ff feb6 	bl	8003e90 <memcpy>
 8004124:	89a3      	ldrh	r3, [r4, #12]
 8004126:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800412a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800412e:	81a3      	strh	r3, [r4, #12]
 8004130:	6126      	str	r6, [r4, #16]
 8004132:	6165      	str	r5, [r4, #20]
 8004134:	443e      	add	r6, r7
 8004136:	1bed      	subs	r5, r5, r7
 8004138:	6026      	str	r6, [r4, #0]
 800413a:	60a5      	str	r5, [r4, #8]
 800413c:	464e      	mov	r6, r9
 800413e:	454e      	cmp	r6, r9
 8004140:	d900      	bls.n	8004144 <__ssputs_r+0x84>
 8004142:	464e      	mov	r6, r9
 8004144:	4632      	mov	r2, r6
 8004146:	4641      	mov	r1, r8
 8004148:	6820      	ldr	r0, [r4, #0]
 800414a:	f000 faa3 	bl	8004694 <memmove>
 800414e:	68a3      	ldr	r3, [r4, #8]
 8004150:	1b9b      	subs	r3, r3, r6
 8004152:	60a3      	str	r3, [r4, #8]
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	441e      	add	r6, r3
 8004158:	6026      	str	r6, [r4, #0]
 800415a:	2000      	movs	r0, #0
 800415c:	e7dc      	b.n	8004118 <__ssputs_r+0x58>
 800415e:	462a      	mov	r2, r5
 8004160:	f000 fab3 	bl	80046ca <_realloc_r>
 8004164:	4606      	mov	r6, r0
 8004166:	2800      	cmp	r0, #0
 8004168:	d1e2      	bne.n	8004130 <__ssputs_r+0x70>
 800416a:	6921      	ldr	r1, [r4, #16]
 800416c:	4650      	mov	r0, sl
 800416e:	f7ff feff 	bl	8003f70 <_free_r>
 8004172:	e7c8      	b.n	8004106 <__ssputs_r+0x46>

08004174 <_svfiprintf_r>:
 8004174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004178:	461d      	mov	r5, r3
 800417a:	898b      	ldrh	r3, [r1, #12]
 800417c:	061f      	lsls	r7, r3, #24
 800417e:	b09d      	sub	sp, #116	; 0x74
 8004180:	4680      	mov	r8, r0
 8004182:	460c      	mov	r4, r1
 8004184:	4616      	mov	r6, r2
 8004186:	d50f      	bpl.n	80041a8 <_svfiprintf_r+0x34>
 8004188:	690b      	ldr	r3, [r1, #16]
 800418a:	b96b      	cbnz	r3, 80041a8 <_svfiprintf_r+0x34>
 800418c:	2140      	movs	r1, #64	; 0x40
 800418e:	f7ff ff3d 	bl	800400c <_malloc_r>
 8004192:	6020      	str	r0, [r4, #0]
 8004194:	6120      	str	r0, [r4, #16]
 8004196:	b928      	cbnz	r0, 80041a4 <_svfiprintf_r+0x30>
 8004198:	230c      	movs	r3, #12
 800419a:	f8c8 3000 	str.w	r3, [r8]
 800419e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041a2:	e0c8      	b.n	8004336 <_svfiprintf_r+0x1c2>
 80041a4:	2340      	movs	r3, #64	; 0x40
 80041a6:	6163      	str	r3, [r4, #20]
 80041a8:	2300      	movs	r3, #0
 80041aa:	9309      	str	r3, [sp, #36]	; 0x24
 80041ac:	2320      	movs	r3, #32
 80041ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041b2:	2330      	movs	r3, #48	; 0x30
 80041b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041b8:	9503      	str	r5, [sp, #12]
 80041ba:	f04f 0b01 	mov.w	fp, #1
 80041be:	4637      	mov	r7, r6
 80041c0:	463d      	mov	r5, r7
 80041c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80041c6:	b10b      	cbz	r3, 80041cc <_svfiprintf_r+0x58>
 80041c8:	2b25      	cmp	r3, #37	; 0x25
 80041ca:	d13e      	bne.n	800424a <_svfiprintf_r+0xd6>
 80041cc:	ebb7 0a06 	subs.w	sl, r7, r6
 80041d0:	d00b      	beq.n	80041ea <_svfiprintf_r+0x76>
 80041d2:	4653      	mov	r3, sl
 80041d4:	4632      	mov	r2, r6
 80041d6:	4621      	mov	r1, r4
 80041d8:	4640      	mov	r0, r8
 80041da:	f7ff ff71 	bl	80040c0 <__ssputs_r>
 80041de:	3001      	adds	r0, #1
 80041e0:	f000 80a4 	beq.w	800432c <_svfiprintf_r+0x1b8>
 80041e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041e6:	4453      	add	r3, sl
 80041e8:	9309      	str	r3, [sp, #36]	; 0x24
 80041ea:	783b      	ldrb	r3, [r7, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 809d 	beq.w	800432c <_svfiprintf_r+0x1b8>
 80041f2:	2300      	movs	r3, #0
 80041f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041fc:	9304      	str	r3, [sp, #16]
 80041fe:	9307      	str	r3, [sp, #28]
 8004200:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004204:	931a      	str	r3, [sp, #104]	; 0x68
 8004206:	462f      	mov	r7, r5
 8004208:	2205      	movs	r2, #5
 800420a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800420e:	4850      	ldr	r0, [pc, #320]	; (8004350 <_svfiprintf_r+0x1dc>)
 8004210:	f7fb fff6 	bl	8000200 <memchr>
 8004214:	9b04      	ldr	r3, [sp, #16]
 8004216:	b9d0      	cbnz	r0, 800424e <_svfiprintf_r+0xda>
 8004218:	06d9      	lsls	r1, r3, #27
 800421a:	bf44      	itt	mi
 800421c:	2220      	movmi	r2, #32
 800421e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004222:	071a      	lsls	r2, r3, #28
 8004224:	bf44      	itt	mi
 8004226:	222b      	movmi	r2, #43	; 0x2b
 8004228:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800422c:	782a      	ldrb	r2, [r5, #0]
 800422e:	2a2a      	cmp	r2, #42	; 0x2a
 8004230:	d015      	beq.n	800425e <_svfiprintf_r+0xea>
 8004232:	9a07      	ldr	r2, [sp, #28]
 8004234:	462f      	mov	r7, r5
 8004236:	2000      	movs	r0, #0
 8004238:	250a      	movs	r5, #10
 800423a:	4639      	mov	r1, r7
 800423c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004240:	3b30      	subs	r3, #48	; 0x30
 8004242:	2b09      	cmp	r3, #9
 8004244:	d94d      	bls.n	80042e2 <_svfiprintf_r+0x16e>
 8004246:	b1b8      	cbz	r0, 8004278 <_svfiprintf_r+0x104>
 8004248:	e00f      	b.n	800426a <_svfiprintf_r+0xf6>
 800424a:	462f      	mov	r7, r5
 800424c:	e7b8      	b.n	80041c0 <_svfiprintf_r+0x4c>
 800424e:	4a40      	ldr	r2, [pc, #256]	; (8004350 <_svfiprintf_r+0x1dc>)
 8004250:	1a80      	subs	r0, r0, r2
 8004252:	fa0b f000 	lsl.w	r0, fp, r0
 8004256:	4318      	orrs	r0, r3
 8004258:	9004      	str	r0, [sp, #16]
 800425a:	463d      	mov	r5, r7
 800425c:	e7d3      	b.n	8004206 <_svfiprintf_r+0x92>
 800425e:	9a03      	ldr	r2, [sp, #12]
 8004260:	1d11      	adds	r1, r2, #4
 8004262:	6812      	ldr	r2, [r2, #0]
 8004264:	9103      	str	r1, [sp, #12]
 8004266:	2a00      	cmp	r2, #0
 8004268:	db01      	blt.n	800426e <_svfiprintf_r+0xfa>
 800426a:	9207      	str	r2, [sp, #28]
 800426c:	e004      	b.n	8004278 <_svfiprintf_r+0x104>
 800426e:	4252      	negs	r2, r2
 8004270:	f043 0302 	orr.w	r3, r3, #2
 8004274:	9207      	str	r2, [sp, #28]
 8004276:	9304      	str	r3, [sp, #16]
 8004278:	783b      	ldrb	r3, [r7, #0]
 800427a:	2b2e      	cmp	r3, #46	; 0x2e
 800427c:	d10c      	bne.n	8004298 <_svfiprintf_r+0x124>
 800427e:	787b      	ldrb	r3, [r7, #1]
 8004280:	2b2a      	cmp	r3, #42	; 0x2a
 8004282:	d133      	bne.n	80042ec <_svfiprintf_r+0x178>
 8004284:	9b03      	ldr	r3, [sp, #12]
 8004286:	1d1a      	adds	r2, r3, #4
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	9203      	str	r2, [sp, #12]
 800428c:	2b00      	cmp	r3, #0
 800428e:	bfb8      	it	lt
 8004290:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004294:	3702      	adds	r7, #2
 8004296:	9305      	str	r3, [sp, #20]
 8004298:	4d2e      	ldr	r5, [pc, #184]	; (8004354 <_svfiprintf_r+0x1e0>)
 800429a:	7839      	ldrb	r1, [r7, #0]
 800429c:	2203      	movs	r2, #3
 800429e:	4628      	mov	r0, r5
 80042a0:	f7fb ffae 	bl	8000200 <memchr>
 80042a4:	b138      	cbz	r0, 80042b6 <_svfiprintf_r+0x142>
 80042a6:	2340      	movs	r3, #64	; 0x40
 80042a8:	1b40      	subs	r0, r0, r5
 80042aa:	fa03 f000 	lsl.w	r0, r3, r0
 80042ae:	9b04      	ldr	r3, [sp, #16]
 80042b0:	4303      	orrs	r3, r0
 80042b2:	3701      	adds	r7, #1
 80042b4:	9304      	str	r3, [sp, #16]
 80042b6:	7839      	ldrb	r1, [r7, #0]
 80042b8:	4827      	ldr	r0, [pc, #156]	; (8004358 <_svfiprintf_r+0x1e4>)
 80042ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042be:	2206      	movs	r2, #6
 80042c0:	1c7e      	adds	r6, r7, #1
 80042c2:	f7fb ff9d 	bl	8000200 <memchr>
 80042c6:	2800      	cmp	r0, #0
 80042c8:	d038      	beq.n	800433c <_svfiprintf_r+0x1c8>
 80042ca:	4b24      	ldr	r3, [pc, #144]	; (800435c <_svfiprintf_r+0x1e8>)
 80042cc:	bb13      	cbnz	r3, 8004314 <_svfiprintf_r+0x1a0>
 80042ce:	9b03      	ldr	r3, [sp, #12]
 80042d0:	3307      	adds	r3, #7
 80042d2:	f023 0307 	bic.w	r3, r3, #7
 80042d6:	3308      	adds	r3, #8
 80042d8:	9303      	str	r3, [sp, #12]
 80042da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042dc:	444b      	add	r3, r9
 80042de:	9309      	str	r3, [sp, #36]	; 0x24
 80042e0:	e76d      	b.n	80041be <_svfiprintf_r+0x4a>
 80042e2:	fb05 3202 	mla	r2, r5, r2, r3
 80042e6:	2001      	movs	r0, #1
 80042e8:	460f      	mov	r7, r1
 80042ea:	e7a6      	b.n	800423a <_svfiprintf_r+0xc6>
 80042ec:	2300      	movs	r3, #0
 80042ee:	3701      	adds	r7, #1
 80042f0:	9305      	str	r3, [sp, #20]
 80042f2:	4619      	mov	r1, r3
 80042f4:	250a      	movs	r5, #10
 80042f6:	4638      	mov	r0, r7
 80042f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042fc:	3a30      	subs	r2, #48	; 0x30
 80042fe:	2a09      	cmp	r2, #9
 8004300:	d903      	bls.n	800430a <_svfiprintf_r+0x196>
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0c8      	beq.n	8004298 <_svfiprintf_r+0x124>
 8004306:	9105      	str	r1, [sp, #20]
 8004308:	e7c6      	b.n	8004298 <_svfiprintf_r+0x124>
 800430a:	fb05 2101 	mla	r1, r5, r1, r2
 800430e:	2301      	movs	r3, #1
 8004310:	4607      	mov	r7, r0
 8004312:	e7f0      	b.n	80042f6 <_svfiprintf_r+0x182>
 8004314:	ab03      	add	r3, sp, #12
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	4622      	mov	r2, r4
 800431a:	4b11      	ldr	r3, [pc, #68]	; (8004360 <_svfiprintf_r+0x1ec>)
 800431c:	a904      	add	r1, sp, #16
 800431e:	4640      	mov	r0, r8
 8004320:	f3af 8000 	nop.w
 8004324:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004328:	4681      	mov	r9, r0
 800432a:	d1d6      	bne.n	80042da <_svfiprintf_r+0x166>
 800432c:	89a3      	ldrh	r3, [r4, #12]
 800432e:	065b      	lsls	r3, r3, #25
 8004330:	f53f af35 	bmi.w	800419e <_svfiprintf_r+0x2a>
 8004334:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004336:	b01d      	add	sp, #116	; 0x74
 8004338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800433c:	ab03      	add	r3, sp, #12
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	4622      	mov	r2, r4
 8004342:	4b07      	ldr	r3, [pc, #28]	; (8004360 <_svfiprintf_r+0x1ec>)
 8004344:	a904      	add	r1, sp, #16
 8004346:	4640      	mov	r0, r8
 8004348:	f000 f882 	bl	8004450 <_printf_i>
 800434c:	e7ea      	b.n	8004324 <_svfiprintf_r+0x1b0>
 800434e:	bf00      	nop
 8004350:	080049d0 	.word	0x080049d0
 8004354:	080049d6 	.word	0x080049d6
 8004358:	080049da 	.word	0x080049da
 800435c:	00000000 	.word	0x00000000
 8004360:	080040c1 	.word	0x080040c1

08004364 <_printf_common>:
 8004364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004368:	4691      	mov	r9, r2
 800436a:	461f      	mov	r7, r3
 800436c:	688a      	ldr	r2, [r1, #8]
 800436e:	690b      	ldr	r3, [r1, #16]
 8004370:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004374:	4293      	cmp	r3, r2
 8004376:	bfb8      	it	lt
 8004378:	4613      	movlt	r3, r2
 800437a:	f8c9 3000 	str.w	r3, [r9]
 800437e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004382:	4606      	mov	r6, r0
 8004384:	460c      	mov	r4, r1
 8004386:	b112      	cbz	r2, 800438e <_printf_common+0x2a>
 8004388:	3301      	adds	r3, #1
 800438a:	f8c9 3000 	str.w	r3, [r9]
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	0699      	lsls	r1, r3, #26
 8004392:	bf42      	ittt	mi
 8004394:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004398:	3302      	addmi	r3, #2
 800439a:	f8c9 3000 	strmi.w	r3, [r9]
 800439e:	6825      	ldr	r5, [r4, #0]
 80043a0:	f015 0506 	ands.w	r5, r5, #6
 80043a4:	d107      	bne.n	80043b6 <_printf_common+0x52>
 80043a6:	f104 0a19 	add.w	sl, r4, #25
 80043aa:	68e3      	ldr	r3, [r4, #12]
 80043ac:	f8d9 2000 	ldr.w	r2, [r9]
 80043b0:	1a9b      	subs	r3, r3, r2
 80043b2:	42ab      	cmp	r3, r5
 80043b4:	dc28      	bgt.n	8004408 <_printf_common+0xa4>
 80043b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80043ba:	6822      	ldr	r2, [r4, #0]
 80043bc:	3300      	adds	r3, #0
 80043be:	bf18      	it	ne
 80043c0:	2301      	movne	r3, #1
 80043c2:	0692      	lsls	r2, r2, #26
 80043c4:	d42d      	bmi.n	8004422 <_printf_common+0xbe>
 80043c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043ca:	4639      	mov	r1, r7
 80043cc:	4630      	mov	r0, r6
 80043ce:	47c0      	blx	r8
 80043d0:	3001      	adds	r0, #1
 80043d2:	d020      	beq.n	8004416 <_printf_common+0xb2>
 80043d4:	6823      	ldr	r3, [r4, #0]
 80043d6:	68e5      	ldr	r5, [r4, #12]
 80043d8:	f8d9 2000 	ldr.w	r2, [r9]
 80043dc:	f003 0306 	and.w	r3, r3, #6
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	bf08      	it	eq
 80043e4:	1aad      	subeq	r5, r5, r2
 80043e6:	68a3      	ldr	r3, [r4, #8]
 80043e8:	6922      	ldr	r2, [r4, #16]
 80043ea:	bf0c      	ite	eq
 80043ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043f0:	2500      	movne	r5, #0
 80043f2:	4293      	cmp	r3, r2
 80043f4:	bfc4      	itt	gt
 80043f6:	1a9b      	subgt	r3, r3, r2
 80043f8:	18ed      	addgt	r5, r5, r3
 80043fa:	f04f 0900 	mov.w	r9, #0
 80043fe:	341a      	adds	r4, #26
 8004400:	454d      	cmp	r5, r9
 8004402:	d11a      	bne.n	800443a <_printf_common+0xd6>
 8004404:	2000      	movs	r0, #0
 8004406:	e008      	b.n	800441a <_printf_common+0xb6>
 8004408:	2301      	movs	r3, #1
 800440a:	4652      	mov	r2, sl
 800440c:	4639      	mov	r1, r7
 800440e:	4630      	mov	r0, r6
 8004410:	47c0      	blx	r8
 8004412:	3001      	adds	r0, #1
 8004414:	d103      	bne.n	800441e <_printf_common+0xba>
 8004416:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800441a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800441e:	3501      	adds	r5, #1
 8004420:	e7c3      	b.n	80043aa <_printf_common+0x46>
 8004422:	18e1      	adds	r1, r4, r3
 8004424:	1c5a      	adds	r2, r3, #1
 8004426:	2030      	movs	r0, #48	; 0x30
 8004428:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800442c:	4422      	add	r2, r4
 800442e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004432:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004436:	3302      	adds	r3, #2
 8004438:	e7c5      	b.n	80043c6 <_printf_common+0x62>
 800443a:	2301      	movs	r3, #1
 800443c:	4622      	mov	r2, r4
 800443e:	4639      	mov	r1, r7
 8004440:	4630      	mov	r0, r6
 8004442:	47c0      	blx	r8
 8004444:	3001      	adds	r0, #1
 8004446:	d0e6      	beq.n	8004416 <_printf_common+0xb2>
 8004448:	f109 0901 	add.w	r9, r9, #1
 800444c:	e7d8      	b.n	8004400 <_printf_common+0x9c>
	...

08004450 <_printf_i>:
 8004450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004454:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004458:	460c      	mov	r4, r1
 800445a:	7e09      	ldrb	r1, [r1, #24]
 800445c:	b085      	sub	sp, #20
 800445e:	296e      	cmp	r1, #110	; 0x6e
 8004460:	4617      	mov	r7, r2
 8004462:	4606      	mov	r6, r0
 8004464:	4698      	mov	r8, r3
 8004466:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004468:	f000 80b3 	beq.w	80045d2 <_printf_i+0x182>
 800446c:	d822      	bhi.n	80044b4 <_printf_i+0x64>
 800446e:	2963      	cmp	r1, #99	; 0x63
 8004470:	d036      	beq.n	80044e0 <_printf_i+0x90>
 8004472:	d80a      	bhi.n	800448a <_printf_i+0x3a>
 8004474:	2900      	cmp	r1, #0
 8004476:	f000 80b9 	beq.w	80045ec <_printf_i+0x19c>
 800447a:	2958      	cmp	r1, #88	; 0x58
 800447c:	f000 8083 	beq.w	8004586 <_printf_i+0x136>
 8004480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004484:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004488:	e032      	b.n	80044f0 <_printf_i+0xa0>
 800448a:	2964      	cmp	r1, #100	; 0x64
 800448c:	d001      	beq.n	8004492 <_printf_i+0x42>
 800448e:	2969      	cmp	r1, #105	; 0x69
 8004490:	d1f6      	bne.n	8004480 <_printf_i+0x30>
 8004492:	6820      	ldr	r0, [r4, #0]
 8004494:	6813      	ldr	r3, [r2, #0]
 8004496:	0605      	lsls	r5, r0, #24
 8004498:	f103 0104 	add.w	r1, r3, #4
 800449c:	d52a      	bpl.n	80044f4 <_printf_i+0xa4>
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6011      	str	r1, [r2, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	da03      	bge.n	80044ae <_printf_i+0x5e>
 80044a6:	222d      	movs	r2, #45	; 0x2d
 80044a8:	425b      	negs	r3, r3
 80044aa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80044ae:	486f      	ldr	r0, [pc, #444]	; (800466c <_printf_i+0x21c>)
 80044b0:	220a      	movs	r2, #10
 80044b2:	e039      	b.n	8004528 <_printf_i+0xd8>
 80044b4:	2973      	cmp	r1, #115	; 0x73
 80044b6:	f000 809d 	beq.w	80045f4 <_printf_i+0x1a4>
 80044ba:	d808      	bhi.n	80044ce <_printf_i+0x7e>
 80044bc:	296f      	cmp	r1, #111	; 0x6f
 80044be:	d020      	beq.n	8004502 <_printf_i+0xb2>
 80044c0:	2970      	cmp	r1, #112	; 0x70
 80044c2:	d1dd      	bne.n	8004480 <_printf_i+0x30>
 80044c4:	6823      	ldr	r3, [r4, #0]
 80044c6:	f043 0320 	orr.w	r3, r3, #32
 80044ca:	6023      	str	r3, [r4, #0]
 80044cc:	e003      	b.n	80044d6 <_printf_i+0x86>
 80044ce:	2975      	cmp	r1, #117	; 0x75
 80044d0:	d017      	beq.n	8004502 <_printf_i+0xb2>
 80044d2:	2978      	cmp	r1, #120	; 0x78
 80044d4:	d1d4      	bne.n	8004480 <_printf_i+0x30>
 80044d6:	2378      	movs	r3, #120	; 0x78
 80044d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044dc:	4864      	ldr	r0, [pc, #400]	; (8004670 <_printf_i+0x220>)
 80044de:	e055      	b.n	800458c <_printf_i+0x13c>
 80044e0:	6813      	ldr	r3, [r2, #0]
 80044e2:	1d19      	adds	r1, r3, #4
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6011      	str	r1, [r2, #0]
 80044e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044f0:	2301      	movs	r3, #1
 80044f2:	e08c      	b.n	800460e <_printf_i+0x1be>
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6011      	str	r1, [r2, #0]
 80044f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044fc:	bf18      	it	ne
 80044fe:	b21b      	sxthne	r3, r3
 8004500:	e7cf      	b.n	80044a2 <_printf_i+0x52>
 8004502:	6813      	ldr	r3, [r2, #0]
 8004504:	6825      	ldr	r5, [r4, #0]
 8004506:	1d18      	adds	r0, r3, #4
 8004508:	6010      	str	r0, [r2, #0]
 800450a:	0628      	lsls	r0, r5, #24
 800450c:	d501      	bpl.n	8004512 <_printf_i+0xc2>
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	e002      	b.n	8004518 <_printf_i+0xc8>
 8004512:	0668      	lsls	r0, r5, #25
 8004514:	d5fb      	bpl.n	800450e <_printf_i+0xbe>
 8004516:	881b      	ldrh	r3, [r3, #0]
 8004518:	4854      	ldr	r0, [pc, #336]	; (800466c <_printf_i+0x21c>)
 800451a:	296f      	cmp	r1, #111	; 0x6f
 800451c:	bf14      	ite	ne
 800451e:	220a      	movne	r2, #10
 8004520:	2208      	moveq	r2, #8
 8004522:	2100      	movs	r1, #0
 8004524:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004528:	6865      	ldr	r5, [r4, #4]
 800452a:	60a5      	str	r5, [r4, #8]
 800452c:	2d00      	cmp	r5, #0
 800452e:	f2c0 8095 	blt.w	800465c <_printf_i+0x20c>
 8004532:	6821      	ldr	r1, [r4, #0]
 8004534:	f021 0104 	bic.w	r1, r1, #4
 8004538:	6021      	str	r1, [r4, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d13d      	bne.n	80045ba <_printf_i+0x16a>
 800453e:	2d00      	cmp	r5, #0
 8004540:	f040 808e 	bne.w	8004660 <_printf_i+0x210>
 8004544:	4665      	mov	r5, ip
 8004546:	2a08      	cmp	r2, #8
 8004548:	d10b      	bne.n	8004562 <_printf_i+0x112>
 800454a:	6823      	ldr	r3, [r4, #0]
 800454c:	07db      	lsls	r3, r3, #31
 800454e:	d508      	bpl.n	8004562 <_printf_i+0x112>
 8004550:	6923      	ldr	r3, [r4, #16]
 8004552:	6862      	ldr	r2, [r4, #4]
 8004554:	429a      	cmp	r2, r3
 8004556:	bfde      	ittt	le
 8004558:	2330      	movle	r3, #48	; 0x30
 800455a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800455e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004562:	ebac 0305 	sub.w	r3, ip, r5
 8004566:	6123      	str	r3, [r4, #16]
 8004568:	f8cd 8000 	str.w	r8, [sp]
 800456c:	463b      	mov	r3, r7
 800456e:	aa03      	add	r2, sp, #12
 8004570:	4621      	mov	r1, r4
 8004572:	4630      	mov	r0, r6
 8004574:	f7ff fef6 	bl	8004364 <_printf_common>
 8004578:	3001      	adds	r0, #1
 800457a:	d14d      	bne.n	8004618 <_printf_i+0x1c8>
 800457c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004580:	b005      	add	sp, #20
 8004582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004586:	4839      	ldr	r0, [pc, #228]	; (800466c <_printf_i+0x21c>)
 8004588:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800458c:	6813      	ldr	r3, [r2, #0]
 800458e:	6821      	ldr	r1, [r4, #0]
 8004590:	1d1d      	adds	r5, r3, #4
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6015      	str	r5, [r2, #0]
 8004596:	060a      	lsls	r2, r1, #24
 8004598:	d50b      	bpl.n	80045b2 <_printf_i+0x162>
 800459a:	07ca      	lsls	r2, r1, #31
 800459c:	bf44      	itt	mi
 800459e:	f041 0120 	orrmi.w	r1, r1, #32
 80045a2:	6021      	strmi	r1, [r4, #0]
 80045a4:	b91b      	cbnz	r3, 80045ae <_printf_i+0x15e>
 80045a6:	6822      	ldr	r2, [r4, #0]
 80045a8:	f022 0220 	bic.w	r2, r2, #32
 80045ac:	6022      	str	r2, [r4, #0]
 80045ae:	2210      	movs	r2, #16
 80045b0:	e7b7      	b.n	8004522 <_printf_i+0xd2>
 80045b2:	064d      	lsls	r5, r1, #25
 80045b4:	bf48      	it	mi
 80045b6:	b29b      	uxthmi	r3, r3
 80045b8:	e7ef      	b.n	800459a <_printf_i+0x14a>
 80045ba:	4665      	mov	r5, ip
 80045bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80045c0:	fb02 3311 	mls	r3, r2, r1, r3
 80045c4:	5cc3      	ldrb	r3, [r0, r3]
 80045c6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80045ca:	460b      	mov	r3, r1
 80045cc:	2900      	cmp	r1, #0
 80045ce:	d1f5      	bne.n	80045bc <_printf_i+0x16c>
 80045d0:	e7b9      	b.n	8004546 <_printf_i+0xf6>
 80045d2:	6813      	ldr	r3, [r2, #0]
 80045d4:	6825      	ldr	r5, [r4, #0]
 80045d6:	6961      	ldr	r1, [r4, #20]
 80045d8:	1d18      	adds	r0, r3, #4
 80045da:	6010      	str	r0, [r2, #0]
 80045dc:	0628      	lsls	r0, r5, #24
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	d501      	bpl.n	80045e6 <_printf_i+0x196>
 80045e2:	6019      	str	r1, [r3, #0]
 80045e4:	e002      	b.n	80045ec <_printf_i+0x19c>
 80045e6:	066a      	lsls	r2, r5, #25
 80045e8:	d5fb      	bpl.n	80045e2 <_printf_i+0x192>
 80045ea:	8019      	strh	r1, [r3, #0]
 80045ec:	2300      	movs	r3, #0
 80045ee:	6123      	str	r3, [r4, #16]
 80045f0:	4665      	mov	r5, ip
 80045f2:	e7b9      	b.n	8004568 <_printf_i+0x118>
 80045f4:	6813      	ldr	r3, [r2, #0]
 80045f6:	1d19      	adds	r1, r3, #4
 80045f8:	6011      	str	r1, [r2, #0]
 80045fa:	681d      	ldr	r5, [r3, #0]
 80045fc:	6862      	ldr	r2, [r4, #4]
 80045fe:	2100      	movs	r1, #0
 8004600:	4628      	mov	r0, r5
 8004602:	f7fb fdfd 	bl	8000200 <memchr>
 8004606:	b108      	cbz	r0, 800460c <_printf_i+0x1bc>
 8004608:	1b40      	subs	r0, r0, r5
 800460a:	6060      	str	r0, [r4, #4]
 800460c:	6863      	ldr	r3, [r4, #4]
 800460e:	6123      	str	r3, [r4, #16]
 8004610:	2300      	movs	r3, #0
 8004612:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004616:	e7a7      	b.n	8004568 <_printf_i+0x118>
 8004618:	6923      	ldr	r3, [r4, #16]
 800461a:	462a      	mov	r2, r5
 800461c:	4639      	mov	r1, r7
 800461e:	4630      	mov	r0, r6
 8004620:	47c0      	blx	r8
 8004622:	3001      	adds	r0, #1
 8004624:	d0aa      	beq.n	800457c <_printf_i+0x12c>
 8004626:	6823      	ldr	r3, [r4, #0]
 8004628:	079b      	lsls	r3, r3, #30
 800462a:	d413      	bmi.n	8004654 <_printf_i+0x204>
 800462c:	68e0      	ldr	r0, [r4, #12]
 800462e:	9b03      	ldr	r3, [sp, #12]
 8004630:	4298      	cmp	r0, r3
 8004632:	bfb8      	it	lt
 8004634:	4618      	movlt	r0, r3
 8004636:	e7a3      	b.n	8004580 <_printf_i+0x130>
 8004638:	2301      	movs	r3, #1
 800463a:	464a      	mov	r2, r9
 800463c:	4639      	mov	r1, r7
 800463e:	4630      	mov	r0, r6
 8004640:	47c0      	blx	r8
 8004642:	3001      	adds	r0, #1
 8004644:	d09a      	beq.n	800457c <_printf_i+0x12c>
 8004646:	3501      	adds	r5, #1
 8004648:	68e3      	ldr	r3, [r4, #12]
 800464a:	9a03      	ldr	r2, [sp, #12]
 800464c:	1a9b      	subs	r3, r3, r2
 800464e:	42ab      	cmp	r3, r5
 8004650:	dcf2      	bgt.n	8004638 <_printf_i+0x1e8>
 8004652:	e7eb      	b.n	800462c <_printf_i+0x1dc>
 8004654:	2500      	movs	r5, #0
 8004656:	f104 0919 	add.w	r9, r4, #25
 800465a:	e7f5      	b.n	8004648 <_printf_i+0x1f8>
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1ac      	bne.n	80045ba <_printf_i+0x16a>
 8004660:	7803      	ldrb	r3, [r0, #0]
 8004662:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004666:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800466a:	e76c      	b.n	8004546 <_printf_i+0xf6>
 800466c:	080049e1 	.word	0x080049e1
 8004670:	080049f2 	.word	0x080049f2

08004674 <_sbrk_r>:
 8004674:	b538      	push	{r3, r4, r5, lr}
 8004676:	4c06      	ldr	r4, [pc, #24]	; (8004690 <_sbrk_r+0x1c>)
 8004678:	2300      	movs	r3, #0
 800467a:	4605      	mov	r5, r0
 800467c:	4608      	mov	r0, r1
 800467e:	6023      	str	r3, [r4, #0]
 8004680:	f7fc f9f6 	bl	8000a70 <_sbrk>
 8004684:	1c43      	adds	r3, r0, #1
 8004686:	d102      	bne.n	800468e <_sbrk_r+0x1a>
 8004688:	6823      	ldr	r3, [r4, #0]
 800468a:	b103      	cbz	r3, 800468e <_sbrk_r+0x1a>
 800468c:	602b      	str	r3, [r5, #0]
 800468e:	bd38      	pop	{r3, r4, r5, pc}
 8004690:	200002c0 	.word	0x200002c0

08004694 <memmove>:
 8004694:	4288      	cmp	r0, r1
 8004696:	b510      	push	{r4, lr}
 8004698:	eb01 0302 	add.w	r3, r1, r2
 800469c:	d807      	bhi.n	80046ae <memmove+0x1a>
 800469e:	1e42      	subs	r2, r0, #1
 80046a0:	4299      	cmp	r1, r3
 80046a2:	d00a      	beq.n	80046ba <memmove+0x26>
 80046a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046a8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80046ac:	e7f8      	b.n	80046a0 <memmove+0xc>
 80046ae:	4283      	cmp	r3, r0
 80046b0:	d9f5      	bls.n	800469e <memmove+0xa>
 80046b2:	1881      	adds	r1, r0, r2
 80046b4:	1ad2      	subs	r2, r2, r3
 80046b6:	42d3      	cmn	r3, r2
 80046b8:	d100      	bne.n	80046bc <memmove+0x28>
 80046ba:	bd10      	pop	{r4, pc}
 80046bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046c0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80046c4:	e7f7      	b.n	80046b6 <memmove+0x22>

080046c6 <__malloc_lock>:
 80046c6:	4770      	bx	lr

080046c8 <__malloc_unlock>:
 80046c8:	4770      	bx	lr

080046ca <_realloc_r>:
 80046ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046cc:	4607      	mov	r7, r0
 80046ce:	4614      	mov	r4, r2
 80046d0:	460e      	mov	r6, r1
 80046d2:	b921      	cbnz	r1, 80046de <_realloc_r+0x14>
 80046d4:	4611      	mov	r1, r2
 80046d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80046da:	f7ff bc97 	b.w	800400c <_malloc_r>
 80046de:	b922      	cbnz	r2, 80046ea <_realloc_r+0x20>
 80046e0:	f7ff fc46 	bl	8003f70 <_free_r>
 80046e4:	4625      	mov	r5, r4
 80046e6:	4628      	mov	r0, r5
 80046e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046ea:	f000 f814 	bl	8004716 <_malloc_usable_size_r>
 80046ee:	42a0      	cmp	r0, r4
 80046f0:	d20f      	bcs.n	8004712 <_realloc_r+0x48>
 80046f2:	4621      	mov	r1, r4
 80046f4:	4638      	mov	r0, r7
 80046f6:	f7ff fc89 	bl	800400c <_malloc_r>
 80046fa:	4605      	mov	r5, r0
 80046fc:	2800      	cmp	r0, #0
 80046fe:	d0f2      	beq.n	80046e6 <_realloc_r+0x1c>
 8004700:	4631      	mov	r1, r6
 8004702:	4622      	mov	r2, r4
 8004704:	f7ff fbc4 	bl	8003e90 <memcpy>
 8004708:	4631      	mov	r1, r6
 800470a:	4638      	mov	r0, r7
 800470c:	f7ff fc30 	bl	8003f70 <_free_r>
 8004710:	e7e9      	b.n	80046e6 <_realloc_r+0x1c>
 8004712:	4635      	mov	r5, r6
 8004714:	e7e7      	b.n	80046e6 <_realloc_r+0x1c>

08004716 <_malloc_usable_size_r>:
 8004716:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800471a:	1f18      	subs	r0, r3, #4
 800471c:	2b00      	cmp	r3, #0
 800471e:	bfbc      	itt	lt
 8004720:	580b      	ldrlt	r3, [r1, r0]
 8004722:	18c0      	addlt	r0, r0, r3
 8004724:	4770      	bx	lr
	...

08004728 <_init>:
 8004728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472a:	bf00      	nop
 800472c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800472e:	bc08      	pop	{r3}
 8004730:	469e      	mov	lr, r3
 8004732:	4770      	bx	lr

08004734 <_fini>:
 8004734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004736:	bf00      	nop
 8004738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473a:	bc08      	pop	{r3}
 800473c:	469e      	mov	lr, r3
 800473e:	4770      	bx	lr
