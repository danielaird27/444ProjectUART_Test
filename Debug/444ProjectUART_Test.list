
444ProjectUART_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005010  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  080051d0  080051d0  000151d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005494  08005494  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005494  08005494  00015494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800549c  0800549c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800549c  0800549c  0001549c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054a0  080054a0  000154a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080054a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  20000074  08005518  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08005518  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119bb  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000204c  00000000  00000000  00031a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fe8  00000000  00000000  00033ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ee0  00000000  00000000  00034a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ad14  00000000  00000000  00035978  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c982  00000000  00000000  0006068c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010adc5  00000000  00000000  0006d00e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00177dd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004694  00000000  00000000  00177e50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000074 	.word	0x20000074
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080051b8 	.word	0x080051b8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000078 	.word	0x20000078
 80001fc:	080051b8 	.word	0x080051b8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <screenClear>:
int potentialPoints = 10;



//Clear screen function
void screenClear() {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
	char buffer[5];

	sprintf(buffer, "%c[2J", ASCII_ESC);
 80005a6:	463b      	mov	r3, r7
 80005a8:	221b      	movs	r2, #27
 80005aa:	4907      	ldr	r1, [pc, #28]	; (80005c8 <screenClear+0x28>)
 80005ac:	4618      	mov	r0, r3
 80005ae:	f004 f9ff 	bl	80049b0 <siprintf>
	HAL_UART_Transmit(&huart1, &buffer, sizeof(buffer), HAL_MAX_DELAY);
 80005b2:	4639      	mov	r1, r7
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005b8:	2205      	movs	r2, #5
 80005ba:	4804      	ldr	r0, [pc, #16]	; (80005cc <screenClear+0x2c>)
 80005bc:	f003 f8c0 	bl	8003740 <HAL_UART_Transmit>
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	080051d0 	.word	0x080051d0
 80005cc:	20000230 	.word	0x20000230

080005d0 <invisibleCursor>:

//Make cursor invisible
void invisibleCursor() {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
	char buffer[6];

	sprintf(buffer, "%c[?25l", ASCII_ESC);
 80005d6:	463b      	mov	r3, r7
 80005d8:	221b      	movs	r2, #27
 80005da:	4907      	ldr	r1, [pc, #28]	; (80005f8 <invisibleCursor+0x28>)
 80005dc:	4618      	mov	r0, r3
 80005de:	f004 f9e7 	bl	80049b0 <siprintf>
	HAL_UART_Transmit(&huart1, &buffer, sizeof(buffer), HAL_MAX_DELAY);
 80005e2:	4639      	mov	r1, r7
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005e8:	2206      	movs	r2, #6
 80005ea:	4804      	ldr	r0, [pc, #16]	; (80005fc <invisibleCursor+0x2c>)
 80005ec:	f003 f8a8 	bl	8003740 <HAL_UART_Transmit>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	080051d8 	.word	0x080051d8
 80005fc:	20000230 	.word	0x20000230

08000600 <printWelcomeScreen>:

//Print welcome screen
void printWelcomeScreen() {
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	sprintf(title, "                         Welcome To Karaoke!                          "); //70 long
 8000604:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <printWelcomeScreen+0x34>)
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <printWelcomeScreen+0x38>)
 8000608:	4610      	mov	r0, r2
 800060a:	4619      	mov	r1, r3
 800060c:	2347      	movs	r3, #71	; 0x47
 800060e:	461a      	mov	r2, r3
 8000610:	f004 f986 	bl	8004920 <memcpy>
	sprintf(screen, "\r//////////////////////////////////////////////////////////////////////////\r\n//%s//\r\n//////////////////////////////////////////////////////////////////////////\r\n\n\nPress any key to continue...", title);
 8000614:	4a07      	ldr	r2, [pc, #28]	; (8000634 <printWelcomeScreen+0x34>)
 8000616:	4909      	ldr	r1, [pc, #36]	; (800063c <printWelcomeScreen+0x3c>)
 8000618:	4809      	ldr	r0, [pc, #36]	; (8000640 <printWelcomeScreen+0x40>)
 800061a:	f004 f9c9 	bl	80049b0 <siprintf>
	HAL_UART_Transmit(&huart1, &screen, sizeof(screen), HAL_MAX_DELAY);
 800061e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000622:	f240 1203 	movw	r2, #259	; 0x103
 8000626:	4906      	ldr	r1, [pc, #24]	; (8000640 <printWelcomeScreen+0x40>)
 8000628:	4806      	ldr	r0, [pc, #24]	; (8000644 <printWelcomeScreen+0x44>)
 800062a:	f003 f889 	bl	8003740 <HAL_UART_Transmit>
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200001e8 	.word	0x200001e8
 8000638:	080051e0 	.word	0x080051e0
 800063c:	08005228 	.word	0x08005228
 8000640:	200000e4 	.word	0x200000e4
 8000644:	20000230 	.word	0x20000230

08000648 <printGame>:

//Print the game starting screen
void printGame(int goalTonePeriod, int voiceTonePeriod, int score) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]

	screenClear();
 8000654:	f7ff ffa4 	bl	80005a0 <screenClear>

	sprintf(liveToneAndGoal, "                                                                      "); //70 long
 8000658:	4a11      	ldr	r2, [pc, #68]	; (80006a0 <printGame+0x58>)
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <printGame+0x5c>)
 800065c:	4610      	mov	r0, r2
 800065e:	4619      	mov	r1, r3
 8000660:	2347      	movs	r3, #71	; 0x47
 8000662:	461a      	mov	r2, r3
 8000664:	f004 f95c 	bl	8004920 <memcpy>

	liveToneAndGoal[goalTonePeriod] = 'I';
 8000668:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <printGame+0x58>)
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	4413      	add	r3, r2
 800066e:	2249      	movs	r2, #73	; 0x49
 8000670:	701a      	strb	r2, [r3, #0]
	liveToneAndGoal[voiceTonePeriod] = 'I';
 8000672:	4a0b      	ldr	r2, [pc, #44]	; (80006a0 <printGame+0x58>)
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	4413      	add	r3, r2
 8000678:	2249      	movs	r2, #73	; 0x49
 800067a:	701a      	strb	r2, [r3, #0]

	sprintf(screen, "\r//////////////////////////////////////////////////////////////////////////\r\n//%s//\r\n//////////////////////////////////////////////////////////////////////////\r\n\n\n\t+---\tSCORE:\t%d\t---+        ", liveToneAndGoal, score);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4a08      	ldr	r2, [pc, #32]	; (80006a0 <printGame+0x58>)
 8000680:	4909      	ldr	r1, [pc, #36]	; (80006a8 <printGame+0x60>)
 8000682:	480a      	ldr	r0, [pc, #40]	; (80006ac <printGame+0x64>)
 8000684:	f004 f994 	bl	80049b0 <siprintf>
	HAL_UART_Transmit(&huart1, &screen, sizeof(screen), HAL_MAX_DELAY);
 8000688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800068c:	f240 1203 	movw	r2, #259	; 0x103
 8000690:	4906      	ldr	r1, [pc, #24]	; (80006ac <printGame+0x64>)
 8000692:	4807      	ldr	r0, [pc, #28]	; (80006b0 <printGame+0x68>)
 8000694:	f003 f854 	bl	8003740 <HAL_UART_Transmit>
}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	2000009c 	.word	0x2000009c
 80006a4:	080052e8 	.word	0x080052e8
 80006a8:	08005330 	.word	0x08005330
 80006ac:	200000e4 	.word	0x200000e4
 80006b0:	20000230 	.word	0x20000230

080006b4 <HAL_TIM_PeriodElapsedCallback>:


//Timer callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a09      	ldr	r2, [pc, #36]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d108      	bne.n	80006d6 <HAL_TIM_PeriodElapsedCallback+0x22>
		if (potentialPoints > 0) potentialPoints = potentialPoints - 1;
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	dd04      	ble.n	80006d6 <HAL_TIM_PeriodElapsedCallback+0x22>
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	3b01      	subs	r3, #1
 80006d2:	4a05      	ldr	r2, [pc, #20]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80006d4:	6013      	str	r3, [r2, #0]
	}
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	200002bc 	.word	0x200002bc
 80006e8:	20000000 	.word	0x20000000

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f000 faf8 	bl	8000ce6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 f861 	bl	80007bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fa:	f000 f971 	bl	80009e0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006fe:	f000 f923 	bl	8000948 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000702:	f000 f8d3 	bl	80008ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
//############################################################################################################################################



  invisibleCursor();
 8000706:	f7ff ff63 	bl	80005d0 <invisibleCursor>

  screenClear(); //Start with fresh screen
 800070a:	f7ff ff49 	bl	80005a0 <screenClear>

  printWelcomeScreen();
 800070e:	f7ff ff77 	bl	8000600 <printWelcomeScreen>

  HAL_UART_Receive(&huart1, &receivedKey, 1, HAL_MAX_DELAY); //Wait for key press before starting game
 8000712:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000716:	2201      	movs	r2, #1
 8000718:	4923      	ldr	r1, [pc, #140]	; (80007a8 <main+0xbc>)
 800071a:	4824      	ldr	r0, [pc, #144]	; (80007ac <main+0xc0>)
 800071c:	f003 f8a7 	bl	800386e <HAL_UART_Receive>

  screenClear();
 8000720:	f7ff ff3e 	bl	80005a0 <screenClear>

  int success = 1; //Create first goal tone period
 8000724:	2301      	movs	r3, #1
 8000726:	60fb      	str	r3, [r7, #12]
  int goalTonePeriod;
  int voiceTonePeriod;
  int score = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	603b      	str	r3, [r7, #0]

  HAL_TIM_Base_Start_IT(&htim2);
 800072c:	4820      	ldr	r0, [pc, #128]	; (80007b0 <main+0xc4>)
 800072e:	f002 fb6d 	bl	8002e0c <HAL_TIM_Base_Start_IT>



  while (1)
  {
	  if (success) {
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d01a      	beq.n	800076e <main+0x82>
		  goalTonePeriod = rand()%66;
 8000738:	f004 f906 	bl	8004948 <rand>
 800073c:	4602      	mov	r2, r0
 800073e:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <main+0xc8>)
 8000740:	fb83 1302 	smull	r1, r3, r3, r2
 8000744:	1119      	asrs	r1, r3, #4
 8000746:	17d3      	asrs	r3, r2, #31
 8000748:	1ac9      	subs	r1, r1, r3
 800074a:	460b      	mov	r3, r1
 800074c:	015b      	lsls	r3, r3, #5
 800074e:	440b      	add	r3, r1
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	1ad3      	subs	r3, r2, r3
 8000754:	60bb      	str	r3, [r7, #8]
		  voiceTonePeriod = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
		  score = score + potentialPoints;
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <main+0xcc>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	683a      	ldr	r2, [r7, #0]
 8000760:	4413      	add	r3, r2
 8000762:	603b      	str	r3, [r7, #0]
		  potentialPoints = 10;
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <main+0xcc>)
 8000766:	220a      	movs	r2, #10
 8000768:	601a      	str	r2, [r3, #0]
		  success = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
	  }


	  printGame(goalTonePeriod, voiceTonePeriod, score);
 800076e:	683a      	ldr	r2, [r7, #0]
 8000770:	6879      	ldr	r1, [r7, #4]
 8000772:	68b8      	ldr	r0, [r7, #8]
 8000774:	f7ff ff68 	bl	8000648 <printGame>

	  if (goalTonePeriod == voiceTonePeriod) success = 1;
 8000778:	68ba      	ldr	r2, [r7, #8]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	429a      	cmp	r2, r3
 800077e:	d101      	bne.n	8000784 <main+0x98>
 8000780:	2301      	movs	r3, #1
 8000782:	60fb      	str	r3, [r7, #12]

	  voiceTonePeriod = (voiceTonePeriod + 1)%66;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	1c5a      	adds	r2, r3, #1
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <main+0xc8>)
 800078a:	fb83 1302 	smull	r1, r3, r3, r2
 800078e:	1119      	asrs	r1, r3, #4
 8000790:	17d3      	asrs	r3, r2, #31
 8000792:	1ac9      	subs	r1, r1, r3
 8000794:	460b      	mov	r3, r1
 8000796:	015b      	lsls	r3, r3, #5
 8000798:	440b      	add	r3, r1
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	607b      	str	r3, [r7, #4]

	  HAL_Delay(100);
 80007a0:	2064      	movs	r0, #100	; 0x64
 80007a2:	f000 fb15 	bl	8000dd0 <HAL_Delay>
	  if (success) {
 80007a6:	e7c4      	b.n	8000732 <main+0x46>
 80007a8:	2000022e 	.word	0x2000022e
 80007ac:	20000230 	.word	0x20000230
 80007b0:	200002bc 	.word	0x200002bc
 80007b4:	3e0f83e1 	.word	0x3e0f83e1
 80007b8:	20000000 	.word	0x20000000

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b0bc      	sub	sp, #240	; 0xf0
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007c6:	2244      	movs	r2, #68	; 0x44
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f004 f8b3 	bl	8004936 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2294      	movs	r2, #148	; 0x94
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f004 f8a5 	bl	8004936 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007f0:	f000 fe32 	bl	8001458 <HAL_PWREx_ControlVoltageScaling>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x42>
  {
    Error_Handler();
 80007fa:	f000 f909 	bl	8000a10 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007fe:	2310      	movs	r3, #16
 8000800:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000804:	2301      	movs	r3, #1
 8000806:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000810:	2360      	movs	r3, #96	; 0x60
 8000812:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000816:	2302      	movs	r3, #2
 8000818:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800081c:	2301      	movs	r3, #1
 800081e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000822:	2301      	movs	r3, #1
 8000824:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000828:	2328      	movs	r3, #40	; 0x28
 800082a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082e:	2302      	movs	r3, #2
 8000830:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000834:	2302      	movs	r3, #2
 8000836:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800083a:	2302      	movs	r3, #2
 800083c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000840:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000844:	4618      	mov	r0, r3
 8000846:	f000 feab 	bl	80015a0 <HAL_RCC_OscConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000850:	f000 f8de 	bl	8000a10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000854:	230f      	movs	r3, #15
 8000856:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085a:	2303      	movs	r3, #3
 800085c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000872:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000876:	2103      	movs	r1, #3
 8000878:	4618      	mov	r0, r3
 800087a:	f001 fab7 	bl	8001dec <HAL_RCC_ClockConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000884:	f000 f8c4 	bl	8000a10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000888:	2301      	movs	r3, #1
 800088a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800088c:	2300      	movs	r3, #0
 800088e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	4618      	mov	r0, r3
 8000894:	f001 fd5a 	bl	800234c <HAL_RCCEx_PeriphCLKConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800089e:	f000 f8b7 	bl	8000a10 <Error_Handler>
  }
}
 80008a2:	bf00      	nop
 80008a4:	37f0      	adds	r7, #240	; 0xf0
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008ca:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <MX_TIM2_Init+0x94>)
 80008cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008d2:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_TIM2_Init+0x94>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d8:	4b19      	ldr	r3, [pc, #100]	; (8000940 <MX_TIM2_Init+0x94>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000000;
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_TIM2_Init+0x94>)
 80008e0:	4a18      	ldr	r2, [pc, #96]	; (8000944 <MX_TIM2_Init+0x98>)
 80008e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e4:	4b16      	ldr	r3, [pc, #88]	; (8000940 <MX_TIM2_Init+0x94>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_TIM2_Init+0x94>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008f0:	4813      	ldr	r0, [pc, #76]	; (8000940 <MX_TIM2_Init+0x94>)
 80008f2:	f002 fa33 	bl	8002d5c <HAL_TIM_Base_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008fc:	f000 f888 	bl	8000a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000904:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000906:	f107 0310 	add.w	r3, r7, #16
 800090a:	4619      	mov	r1, r3
 800090c:	480c      	ldr	r0, [pc, #48]	; (8000940 <MX_TIM2_Init+0x94>)
 800090e:	f002 fc0c 	bl	800312a <HAL_TIM_ConfigClockSource>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000918:	f000 f87a 	bl	8000a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091c:	2300      	movs	r3, #0
 800091e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	4619      	mov	r1, r3
 8000928:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_TIM2_Init+0x94>)
 800092a:	f002 fe13 	bl	8003554 <HAL_TIMEx_MasterConfigSynchronization>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000934:	f000 f86c 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	3720      	adds	r7, #32
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	200002bc 	.word	0x200002bc
 8000944:	02625a00 	.word	0x02625a00

08000948 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800094c:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <MX_USART1_UART_Init+0x90>)
 800094e:	4a23      	ldr	r2, [pc, #140]	; (80009dc <MX_USART1_UART_Init+0x94>)
 8000950:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000952:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <MX_USART1_UART_Init+0x90>)
 8000954:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000958:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <MX_USART1_UART_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000960:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <MX_USART1_UART_Init+0x90>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_USART1_UART_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800096c:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <MX_USART1_UART_Init+0x90>)
 800096e:	220c      	movs	r2, #12
 8000970:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <MX_USART1_UART_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000978:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <MX_USART1_UART_Init+0x90>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <MX_USART1_UART_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_USART1_UART_Init+0x90>)
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <MX_USART1_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000990:	4811      	ldr	r0, [pc, #68]	; (80009d8 <MX_USART1_UART_Init+0x90>)
 8000992:	f002 fe85 	bl	80036a0 <HAL_UART_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800099c:	f000 f838 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a0:	2100      	movs	r1, #0
 80009a2:	480d      	ldr	r0, [pc, #52]	; (80009d8 <MX_USART1_UART_Init+0x90>)
 80009a4:	f003 feae 	bl	8004704 <HAL_UARTEx_SetTxFifoThreshold>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009ae:	f000 f82f 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b2:	2100      	movs	r1, #0
 80009b4:	4808      	ldr	r0, [pc, #32]	; (80009d8 <MX_USART1_UART_Init+0x90>)
 80009b6:	f003 fee3 	bl	8004780 <HAL_UARTEx_SetRxFifoThreshold>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009c0:	f000 f826 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_USART1_UART_Init+0x90>)
 80009c6:	f003 fe64 	bl	8004692 <HAL_UARTEx_DisableFifoMode>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009d0:	f000 f81e 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000230 	.word	0x20000230
 80009dc:	40013800 	.word	0x40013800

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_GPIO_Init+0x2c>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <MX_GPIO_Init+0x2c>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_GPIO_Init+0x2c>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]

}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40021000 	.word	0x40021000

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <Error_Handler+0x6>

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <HAL_MspInit+0x44>)
 8000a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a22:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <HAL_MspInit+0x44>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6613      	str	r3, [r2, #96]	; 0x60
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <HAL_MspInit+0x44>)
 8000a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <HAL_MspInit+0x44>)
 8000a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3a:	4a08      	ldr	r2, [pc, #32]	; (8000a5c <HAL_MspInit+0x44>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a40:	6593      	str	r3, [r2, #88]	; 0x58
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_MspInit+0x44>)
 8000a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40021000 	.word	0x40021000

08000a60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a70:	d113      	bne.n	8000a9a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <HAL_TIM_Base_MspInit+0x44>)
 8000a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a76:	4a0b      	ldr	r2, [pc, #44]	; (8000aa4 <HAL_TIM_Base_MspInit+0x44>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <HAL_TIM_Base_MspInit+0x44>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	201c      	movs	r0, #28
 8000a90:	f000 fa9b 	bl	8000fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a94:	201c      	movs	r0, #28
 8000a96:	f000 fab4 	bl	8001002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a1b      	ldr	r2, [pc, #108]	; (8000b34 <HAL_UART_MspInit+0x8c>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d12f      	bne.n	8000b2a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aca:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <HAL_UART_MspInit+0x90>)
 8000acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ace:	4a1a      	ldr	r2, [pc, #104]	; (8000b38 <HAL_UART_MspInit+0x90>)
 8000ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <HAL_UART_MspInit+0x90>)
 8000ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <HAL_UART_MspInit+0x90>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4a14      	ldr	r2, [pc, #80]	; (8000b38 <HAL_UART_MspInit+0x90>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_UART_MspInit+0x90>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000afa:	23c0      	movs	r3, #192	; 0xc0
 8000afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b06:	2303      	movs	r3, #3
 8000b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b0a:	2307      	movs	r3, #7
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	4809      	ldr	r0, [pc, #36]	; (8000b3c <HAL_UART_MspInit+0x94>)
 8000b16:	f000 faed 	bl	80010f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2025      	movs	r0, #37	; 0x25
 8000b20:	f000 fa53 	bl	8000fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b24:	2025      	movs	r0, #37	; 0x25
 8000b26:	f000 fa6c 	bl	8001002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b2a:	bf00      	nop
 8000b2c:	3728      	adds	r7, #40	; 0x28
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40013800 	.word	0x40013800
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	48000400 	.word	0x48000400

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <NMI_Handler+0x4>

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <MemManage_Handler+0x4>

08000b52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8c:	f000 f900 	bl	8000d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <TIM2_IRQHandler+0x10>)
 8000b9a:	f002 f9a7 	bl	8002eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200002bc 	.word	0x200002bc

08000ba8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bac:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <USART1_IRQHandler+0x10>)
 8000bae:	f002 ff2f 	bl	8003a10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000230 	.word	0x20000230

08000bbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc4:	4a14      	ldr	r2, [pc, #80]	; (8000c18 <_sbrk+0x5c>)
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <_sbrk+0x60>)
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd0:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d102      	bne.n	8000bde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <_sbrk+0x64>)
 8000bda:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <_sbrk+0x68>)
 8000bdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <_sbrk+0x64>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d207      	bcs.n	8000bfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bec:	f003 fe6e 	bl	80048cc <__errno>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	230c      	movs	r3, #12
 8000bf4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bfa:	e009      	b.n	8000c10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <_sbrk+0x64>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c02:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <_sbrk+0x64>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <_sbrk+0x64>)
 8000c0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200a0000 	.word	0x200a0000
 8000c1c:	00000400 	.word	0x00000400
 8000c20:	20000090 	.word	0x20000090
 8000c24:	20000310 	.word	0x20000310

08000c28 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c2c:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <SystemInit+0x64>)
 8000c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c32:	4a16      	ldr	r2, [pc, #88]	; (8000c8c <SystemInit+0x64>)
 8000c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c3c:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <SystemInit+0x68>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a13      	ldr	r2, [pc, #76]	; (8000c90 <SystemInit+0x68>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <SystemInit+0x68>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <SystemInit+0x68>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a0f      	ldr	r2, [pc, #60]	; (8000c90 <SystemInit+0x68>)
 8000c54:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c58:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c5c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <SystemInit+0x68>)
 8000c60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c64:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <SystemInit+0x68>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a09      	ldr	r2, [pc, #36]	; (8000c90 <SystemInit+0x68>)
 8000c6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c70:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <SystemInit+0x68>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <SystemInit+0x64>)
 8000c7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c7e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00
 8000c90:	40021000 	.word	0x40021000

08000c94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ccc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c98:	f7ff ffc6 	bl	8000c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c9c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c9e:	e003      	b.n	8000ca8 <LoopCopyDataInit>

08000ca0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ca2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ca4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ca6:	3104      	adds	r1, #4

08000ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ca8:	480a      	ldr	r0, [pc, #40]	; (8000cd4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000cac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000cae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000cb0:	d3f6      	bcc.n	8000ca0 <CopyDataInit>
	ldr	r2, =_sbss
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000cb4:	e002      	b.n	8000cbc <LoopFillZerobss>

08000cb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cb6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000cb8:	f842 3b04 	str.w	r3, [r2], #4

08000cbc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <LoopForever+0x16>)
	cmp	r2, r3
 8000cbe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000cc0:	d3f9      	bcc.n	8000cb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cc2:	f003 fe09 	bl	80048d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cc6:	f7ff fd11 	bl	80006ec <main>

08000cca <LoopForever>:

LoopForever:
    b LoopForever
 8000cca:	e7fe      	b.n	8000cca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ccc:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000cd0:	080054a4 	.word	0x080054a4
	ldr	r0, =_sdata
 8000cd4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000cd8:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8000cdc:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8000ce0:	20000310 	.word	0x20000310

08000ce4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ce4:	e7fe      	b.n	8000ce4 <ADC1_IRQHandler>

08000ce6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cec:	2300      	movs	r3, #0
 8000cee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf0:	2003      	movs	r0, #3
 8000cf2:	f000 f95f 	bl	8000fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f000 f80e 	bl	8000d18 <HAL_InitTick>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d002      	beq.n	8000d08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	71fb      	strb	r3, [r7, #7]
 8000d06:	e001      	b.n	8000d0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d08:	f7ff fe86 	bl	8000a18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d20:	2300      	movs	r3, #0
 8000d22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <HAL_InitTick+0x6c>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d023      	beq.n	8000d74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d2c:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <HAL_InitTick+0x70>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <HAL_InitTick+0x6c>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4619      	mov	r1, r3
 8000d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f96b 	bl	800101e <HAL_SYSTICK_Config>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d10f      	bne.n	8000d6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b0f      	cmp	r3, #15
 8000d52:	d809      	bhi.n	8000d68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d54:	2200      	movs	r2, #0
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d5c:	f000 f935 	bl	8000fca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d60:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <HAL_InitTick+0x74>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6013      	str	r3, [r2, #0]
 8000d66:	e007      	b.n	8000d78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	73fb      	strb	r3, [r7, #15]
 8000d6c:	e004      	b.n	8000d78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	73fb      	strb	r3, [r7, #15]
 8000d72:	e001      	b.n	8000d78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	2000000c 	.word	0x2000000c
 8000d88:	20000004 	.word	0x20000004
 8000d8c:	20000008 	.word	0x20000008

08000d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_IncTick+0x20>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x24>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4413      	add	r3, r2
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <HAL_IncTick+0x24>)
 8000da2:	6013      	str	r3, [r2, #0]
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	2000000c 	.word	0x2000000c
 8000db4:	20000308 	.word	0x20000308

08000db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return uwTick;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <HAL_GetTick+0x14>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000308 	.word	0x20000308

08000dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd8:	f7ff ffee 	bl	8000db8 <HAL_GetTick>
 8000ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000de8:	d005      	beq.n	8000df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_Delay+0x40>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4413      	add	r3, r2
 8000df4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000df6:	bf00      	nop
 8000df8:	f7ff ffde 	bl	8000db8 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d8f7      	bhi.n	8000df8 <HAL_Delay+0x28>
  {
  }
}
 8000e08:	bf00      	nop
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	2000000c 	.word	0x2000000c

08000e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e30:	4013      	ands	r3, r2
 8000e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e46:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	60d3      	str	r3, [r2, #12]
}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <__NVIC_GetPriorityGrouping+0x18>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	f003 0307 	and.w	r3, r3, #7
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	db0b      	blt.n	8000ea2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	f003 021f 	and.w	r2, r3, #31
 8000e90:	4907      	ldr	r1, [pc, #28]	; (8000eb0 <__NVIC_EnableIRQ+0x38>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	095b      	lsrs	r3, r3, #5
 8000e98:	2001      	movs	r0, #1
 8000e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000e100 	.word	0xe000e100

08000eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	db0a      	blt.n	8000ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	490c      	ldr	r1, [pc, #48]	; (8000f00 <__NVIC_SetPriority+0x4c>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	0112      	lsls	r2, r2, #4
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000edc:	e00a      	b.n	8000ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4908      	ldr	r1, [pc, #32]	; (8000f04 <__NVIC_SetPriority+0x50>)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	3b04      	subs	r3, #4
 8000eec:	0112      	lsls	r2, r2, #4
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	761a      	strb	r2, [r3, #24]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000e100 	.word	0xe000e100
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b089      	sub	sp, #36	; 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f1c3 0307 	rsb	r3, r3, #7
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	bf28      	it	cs
 8000f26:	2304      	movcs	r3, #4
 8000f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	2b06      	cmp	r3, #6
 8000f30:	d902      	bls.n	8000f38 <NVIC_EncodePriority+0x30>
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3b03      	subs	r3, #3
 8000f36:	e000      	b.n	8000f3a <NVIC_EncodePriority+0x32>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43da      	mvns	r2, r3
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5a:	43d9      	mvns	r1, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	4313      	orrs	r3, r2
         );
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3724      	adds	r7, #36	; 0x24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
	...

08000f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f80:	d301      	bcc.n	8000f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00f      	b.n	8000fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <SysTick_Config+0x40>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8e:	210f      	movs	r1, #15
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f94:	f7ff ff8e 	bl	8000eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <SysTick_Config+0x40>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9e:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <SysTick_Config+0x40>)
 8000fa0:	2207      	movs	r2, #7
 8000fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	e000e010 	.word	0xe000e010

08000fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ff29 	bl	8000e14 <__NVIC_SetPriorityGrouping>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b086      	sub	sp, #24
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	60b9      	str	r1, [r7, #8]
 8000fd4:	607a      	str	r2, [r7, #4]
 8000fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fdc:	f7ff ff3e 	bl	8000e5c <__NVIC_GetPriorityGrouping>
 8000fe0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	68b9      	ldr	r1, [r7, #8]
 8000fe6:	6978      	ldr	r0, [r7, #20]
 8000fe8:	f7ff ff8e 	bl	8000f08 <NVIC_EncodePriority>
 8000fec:	4602      	mov	r2, r0
 8000fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff5d 	bl	8000eb4 <__NVIC_SetPriority>
}
 8000ffa:	bf00      	nop
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff31 	bl	8000e78 <__NVIC_EnableIRQ>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ffa2 	bl	8000f70 <SysTick_Config>
 800102c:	4603      	mov	r3, r0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b084      	sub	sp, #16
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800103e:	2300      	movs	r3, #0
 8001040:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d005      	beq.n	800105a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2204      	movs	r2, #4
 8001052:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	73fb      	strb	r3, [r7, #15]
 8001058:	e047      	b.n	80010ea <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f022 020e 	bic.w	r2, r2, #14
 8001068:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f022 0201 	bic.w	r2, r2, #1
 8001078:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001084:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001088:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	f003 021c 	and.w	r2, r3, #28
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	2101      	movs	r1, #1
 8001098:	fa01 f202 	lsl.w	r2, r1, r2
 800109c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80010a6:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d00c      	beq.n	80010ca <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80010c8:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	4798      	blx	r3
    }
  }
  return status;
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b087      	sub	sp, #28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001102:	e166      	b.n	80013d2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	2101      	movs	r1, #1
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	fa01 f303 	lsl.w	r3, r1, r3
 8001110:	4013      	ands	r3, r2
 8001112:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2b00      	cmp	r3, #0
 8001118:	f000 8158 	beq.w	80013cc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d00b      	beq.n	800113c <HAL_GPIO_Init+0x48>
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2b02      	cmp	r3, #2
 800112a:	d007      	beq.n	800113c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001130:	2b11      	cmp	r3, #17
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b12      	cmp	r3, #18
 800113a:	d130      	bne.n	800119e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	2203      	movs	r2, #3
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	68da      	ldr	r2, [r3, #12]
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001172:	2201      	movs	r2, #1
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	091b      	lsrs	r3, r3, #4
 8001188:	f003 0201 	and.w	r2, r3, #1
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	2203      	movs	r2, #3
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0xea>
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b12      	cmp	r3, #18
 80011dc:	d123      	bne.n	8001226 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	08da      	lsrs	r2, r3, #3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3208      	adds	r2, #8
 80011e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	220f      	movs	r2, #15
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	691a      	ldr	r2, [r3, #16]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	f003 0307 	and.w	r3, r3, #7
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	08da      	lsrs	r2, r3, #3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3208      	adds	r2, #8
 8001220:	6939      	ldr	r1, [r7, #16]
 8001222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	2203      	movs	r2, #3
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0203 	and.w	r2, r3, #3
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 80b2 	beq.w	80013cc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001268:	4b61      	ldr	r3, [pc, #388]	; (80013f0 <HAL_GPIO_Init+0x2fc>)
 800126a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126c:	4a60      	ldr	r2, [pc, #384]	; (80013f0 <HAL_GPIO_Init+0x2fc>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	6613      	str	r3, [r2, #96]	; 0x60
 8001274:	4b5e      	ldr	r3, [pc, #376]	; (80013f0 <HAL_GPIO_Init+0x2fc>)
 8001276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001280:	4a5c      	ldr	r2, [pc, #368]	; (80013f4 <HAL_GPIO_Init+0x300>)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	3302      	adds	r3, #2
 8001288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	220f      	movs	r2, #15
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012aa:	d02b      	beq.n	8001304 <HAL_GPIO_Init+0x210>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a52      	ldr	r2, [pc, #328]	; (80013f8 <HAL_GPIO_Init+0x304>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d025      	beq.n	8001300 <HAL_GPIO_Init+0x20c>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a51      	ldr	r2, [pc, #324]	; (80013fc <HAL_GPIO_Init+0x308>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d01f      	beq.n	80012fc <HAL_GPIO_Init+0x208>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a50      	ldr	r2, [pc, #320]	; (8001400 <HAL_GPIO_Init+0x30c>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d019      	beq.n	80012f8 <HAL_GPIO_Init+0x204>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a4f      	ldr	r2, [pc, #316]	; (8001404 <HAL_GPIO_Init+0x310>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d013      	beq.n	80012f4 <HAL_GPIO_Init+0x200>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a4e      	ldr	r2, [pc, #312]	; (8001408 <HAL_GPIO_Init+0x314>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d00d      	beq.n	80012f0 <HAL_GPIO_Init+0x1fc>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a4d      	ldr	r2, [pc, #308]	; (800140c <HAL_GPIO_Init+0x318>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d007      	beq.n	80012ec <HAL_GPIO_Init+0x1f8>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a4c      	ldr	r2, [pc, #304]	; (8001410 <HAL_GPIO_Init+0x31c>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d101      	bne.n	80012e8 <HAL_GPIO_Init+0x1f4>
 80012e4:	2307      	movs	r3, #7
 80012e6:	e00e      	b.n	8001306 <HAL_GPIO_Init+0x212>
 80012e8:	2308      	movs	r3, #8
 80012ea:	e00c      	b.n	8001306 <HAL_GPIO_Init+0x212>
 80012ec:	2306      	movs	r3, #6
 80012ee:	e00a      	b.n	8001306 <HAL_GPIO_Init+0x212>
 80012f0:	2305      	movs	r3, #5
 80012f2:	e008      	b.n	8001306 <HAL_GPIO_Init+0x212>
 80012f4:	2304      	movs	r3, #4
 80012f6:	e006      	b.n	8001306 <HAL_GPIO_Init+0x212>
 80012f8:	2303      	movs	r3, #3
 80012fa:	e004      	b.n	8001306 <HAL_GPIO_Init+0x212>
 80012fc:	2302      	movs	r3, #2
 80012fe:	e002      	b.n	8001306 <HAL_GPIO_Init+0x212>
 8001300:	2301      	movs	r3, #1
 8001302:	e000      	b.n	8001306 <HAL_GPIO_Init+0x212>
 8001304:	2300      	movs	r3, #0
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	f002 0203 	and.w	r2, r2, #3
 800130c:	0092      	lsls	r2, r2, #2
 800130e:	4093      	lsls	r3, r2
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001316:	4937      	ldr	r1, [pc, #220]	; (80013f4 <HAL_GPIO_Init+0x300>)
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	089b      	lsrs	r3, r3, #2
 800131c:	3302      	adds	r3, #2
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001324:	4b3b      	ldr	r3, [pc, #236]	; (8001414 <HAL_GPIO_Init+0x320>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001348:	4a32      	ldr	r2, [pc, #200]	; (8001414 <HAL_GPIO_Init+0x320>)
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800134e:	4b31      	ldr	r3, [pc, #196]	; (8001414 <HAL_GPIO_Init+0x320>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	43db      	mvns	r3, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001372:	4a28      	ldr	r2, [pc, #160]	; (8001414 <HAL_GPIO_Init+0x320>)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001378:	4b26      	ldr	r3, [pc, #152]	; (8001414 <HAL_GPIO_Init+0x320>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800139c:	4a1d      	ldr	r2, [pc, #116]	; (8001414 <HAL_GPIO_Init+0x320>)
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013a2:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <HAL_GPIO_Init+0x320>)
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013c6:	4a13      	ldr	r2, [pc, #76]	; (8001414 <HAL_GPIO_Init+0x320>)
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	3301      	adds	r3, #1
 80013d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	fa22 f303 	lsr.w	r3, r2, r3
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f47f ae91 	bne.w	8001104 <HAL_GPIO_Init+0x10>
  }
}
 80013e2:	bf00      	nop
 80013e4:	371c      	adds	r7, #28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40010000 	.word	0x40010000
 80013f8:	48000400 	.word	0x48000400
 80013fc:	48000800 	.word	0x48000800
 8001400:	48000c00 	.word	0x48000c00
 8001404:	48001000 	.word	0x48001000
 8001408:	48001400 	.word	0x48001400
 800140c:	48001800 	.word	0x48001800
 8001410:	48001c00 	.word	0x48001c00
 8001414:	40010400 	.word	0x40010400

08001418 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800141c:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <HAL_PWREx_GetVoltageRange+0x3c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001428:	d102      	bne.n	8001430 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800142a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800142e:	e00b      	b.n	8001448 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800143e:	d102      	bne.n	8001446 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001440:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001444:	e000      	b.n	8001448 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001446:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40007000 	.word	0x40007000

08001458 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d141      	bne.n	80014ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001466:	4b4b      	ldr	r3, [pc, #300]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800146e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001472:	d131      	bne.n	80014d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001474:	4b47      	ldr	r3, [pc, #284]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800147a:	4a46      	ldr	r2, [pc, #280]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800147c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001480:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001484:	4b43      	ldr	r3, [pc, #268]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800148c:	4a41      	ldr	r2, [pc, #260]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800148e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001492:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001494:	4b40      	ldr	r3, [pc, #256]	; (8001598 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2232      	movs	r2, #50	; 0x32
 800149a:	fb02 f303 	mul.w	r3, r2, r3
 800149e:	4a3f      	ldr	r2, [pc, #252]	; (800159c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014a0:	fba2 2303 	umull	r2, r3, r2, r3
 80014a4:	0c9b      	lsrs	r3, r3, #18
 80014a6:	3301      	adds	r3, #1
 80014a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014aa:	e002      	b.n	80014b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014b2:	4b38      	ldr	r3, [pc, #224]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014be:	d102      	bne.n	80014c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f2      	bne.n	80014ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014c6:	4b33      	ldr	r3, [pc, #204]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014d2:	d158      	bne.n	8001586 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e057      	b.n	8001588 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014d8:	4b2e      	ldr	r3, [pc, #184]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014de:	4a2d      	ldr	r2, [pc, #180]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80014e8:	e04d      	b.n	8001586 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014f0:	d141      	bne.n	8001576 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014f2:	4b28      	ldr	r3, [pc, #160]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014fe:	d131      	bne.n	8001564 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001500:	4b24      	ldr	r3, [pc, #144]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001506:	4a23      	ldr	r2, [pc, #140]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001510:	4b20      	ldr	r3, [pc, #128]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001518:	4a1e      	ldr	r2, [pc, #120]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800151a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800151e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001520:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2232      	movs	r2, #50	; 0x32
 8001526:	fb02 f303 	mul.w	r3, r2, r3
 800152a:	4a1c      	ldr	r2, [pc, #112]	; (800159c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800152c:	fba2 2303 	umull	r2, r3, r2, r3
 8001530:	0c9b      	lsrs	r3, r3, #18
 8001532:	3301      	adds	r3, #1
 8001534:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001536:	e002      	b.n	800153e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	3b01      	subs	r3, #1
 800153c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800154a:	d102      	bne.n	8001552 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f2      	bne.n	8001538 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800155a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800155e:	d112      	bne.n	8001586 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e011      	b.n	8001588 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001566:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001570:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001574:	e007      	b.n	8001586 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800157e:	4a05      	ldr	r2, [pc, #20]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001580:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001584:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	40007000 	.word	0x40007000
 8001598:	20000004 	.word	0x20000004
 800159c:	431bde83 	.word	0x431bde83

080015a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d102      	bne.n	80015b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	f000 bc16 	b.w	8001de0 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015b4:	4ba0      	ldr	r3, [pc, #640]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015be:	4b9e      	ldr	r3, [pc, #632]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0310 	and.w	r3, r3, #16
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 80e4 	beq.w	800179e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d007      	beq.n	80015ec <HAL_RCC_OscConfig+0x4c>
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	2b0c      	cmp	r3, #12
 80015e0:	f040 808b 	bne.w	80016fa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	f040 8087 	bne.w	80016fa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015ec:	4b92      	ldr	r3, [pc, #584]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <HAL_RCC_OscConfig+0x64>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e3ed      	b.n	8001de0 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a1a      	ldr	r2, [r3, #32]
 8001608:	4b8b      	ldr	r3, [pc, #556]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	2b00      	cmp	r3, #0
 8001612:	d004      	beq.n	800161e <HAL_RCC_OscConfig+0x7e>
 8001614:	4b88      	ldr	r3, [pc, #544]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800161c:	e005      	b.n	800162a <HAL_RCC_OscConfig+0x8a>
 800161e:	4b86      	ldr	r3, [pc, #536]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 8001620:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001624:	091b      	lsrs	r3, r3, #4
 8001626:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800162a:	4293      	cmp	r3, r2
 800162c:	d223      	bcs.n	8001676 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fdc8 	bl	80021c8 <RCC_SetFlashLatencyFromMSIRange>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e3ce      	b.n	8001de0 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001642:	4b7d      	ldr	r3, [pc, #500]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a7c      	ldr	r2, [pc, #496]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 8001648:	f043 0308 	orr.w	r3, r3, #8
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	4b7a      	ldr	r3, [pc, #488]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	4977      	ldr	r1, [pc, #476]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 800165c:	4313      	orrs	r3, r2
 800165e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001660:	4b75      	ldr	r3, [pc, #468]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	021b      	lsls	r3, r3, #8
 800166e:	4972      	ldr	r1, [pc, #456]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 8001670:	4313      	orrs	r3, r2
 8001672:	604b      	str	r3, [r1, #4]
 8001674:	e025      	b.n	80016c2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001676:	4b70      	ldr	r3, [pc, #448]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a6f      	ldr	r2, [pc, #444]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 800167c:	f043 0308 	orr.w	r3, r3, #8
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	4b6d      	ldr	r3, [pc, #436]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	496a      	ldr	r1, [pc, #424]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 8001690:	4313      	orrs	r3, r2
 8001692:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001694:	4b68      	ldr	r3, [pc, #416]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	021b      	lsls	r3, r3, #8
 80016a2:	4965      	ldr	r1, [pc, #404]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d109      	bne.n	80016c2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 fd88 	bl	80021c8 <RCC_SetFlashLatencyFromMSIRange>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e38e      	b.n	8001de0 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016c2:	f000 fcbf 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 80016c6:	4601      	mov	r1, r0
 80016c8:	4b5b      	ldr	r3, [pc, #364]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	091b      	lsrs	r3, r3, #4
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	4a5a      	ldr	r2, [pc, #360]	; (800183c <HAL_RCC_OscConfig+0x29c>)
 80016d4:	5cd3      	ldrb	r3, [r2, r3]
 80016d6:	f003 031f 	and.w	r3, r3, #31
 80016da:	fa21 f303 	lsr.w	r3, r1, r3
 80016de:	4a58      	ldr	r2, [pc, #352]	; (8001840 <HAL_RCC_OscConfig+0x2a0>)
 80016e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016e2:	4b58      	ldr	r3, [pc, #352]	; (8001844 <HAL_RCC_OscConfig+0x2a4>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fb16 	bl	8000d18 <HAL_InitTick>
 80016ec:	4603      	mov	r3, r0
 80016ee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d052      	beq.n	800179c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	e372      	b.n	8001de0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d032      	beq.n	8001768 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001702:	4b4d      	ldr	r3, [pc, #308]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a4c      	ldr	r2, [pc, #304]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800170e:	f7ff fb53 	bl	8000db8 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001716:	f7ff fb4f 	bl	8000db8 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e35b      	b.n	8001de0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001728:	4b43      	ldr	r3, [pc, #268]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0f0      	beq.n	8001716 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001734:	4b40      	ldr	r3, [pc, #256]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a3f      	ldr	r2, [pc, #252]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 800173a:	f043 0308 	orr.w	r3, r3, #8
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	4b3d      	ldr	r3, [pc, #244]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	493a      	ldr	r1, [pc, #232]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 800174e:	4313      	orrs	r3, r2
 8001750:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001752:	4b39      	ldr	r3, [pc, #228]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	4935      	ldr	r1, [pc, #212]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 8001762:	4313      	orrs	r3, r2
 8001764:	604b      	str	r3, [r1, #4]
 8001766:	e01a      	b.n	800179e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001768:	4b33      	ldr	r3, [pc, #204]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a32      	ldr	r2, [pc, #200]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 800176e:	f023 0301 	bic.w	r3, r3, #1
 8001772:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001774:	f7ff fb20 	bl	8000db8 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800177c:	f7ff fb1c 	bl	8000db8 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e328      	b.n	8001de0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800178e:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x1dc>
 800179a:	e000      	b.n	800179e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800179c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d073      	beq.n	8001892 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_OscConfig+0x21c>
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	2b0c      	cmp	r3, #12
 80017b4:	d10e      	bne.n	80017d4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d10b      	bne.n	80017d4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017bc:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d063      	beq.n	8001890 <HAL_RCC_OscConfig+0x2f0>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d15f      	bne.n	8001890 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e305      	b.n	8001de0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017dc:	d106      	bne.n	80017ec <HAL_RCC_OscConfig+0x24c>
 80017de:	4b16      	ldr	r3, [pc, #88]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a15      	ldr	r2, [pc, #84]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 80017e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	e01d      	b.n	8001828 <HAL_RCC_OscConfig+0x288>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017f4:	d10c      	bne.n	8001810 <HAL_RCC_OscConfig+0x270>
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a0f      	ldr	r2, [pc, #60]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 80017fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a0c      	ldr	r2, [pc, #48]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 8001808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	e00b      	b.n	8001828 <HAL_RCC_OscConfig+0x288>
 8001810:	4b09      	ldr	r3, [pc, #36]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a08      	ldr	r2, [pc, #32]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 8001816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a05      	ldr	r2, [pc, #20]	; (8001838 <HAL_RCC_OscConfig+0x298>)
 8001822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d01b      	beq.n	8001868 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001830:	f7ff fac2 	bl	8000db8 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001836:	e010      	b.n	800185a <HAL_RCC_OscConfig+0x2ba>
 8001838:	40021000 	.word	0x40021000
 800183c:	08005400 	.word	0x08005400
 8001840:	20000004 	.word	0x20000004
 8001844:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001848:	f7ff fab6 	bl	8000db8 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	; 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e2c2      	b.n	8001de0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800185a:	4baf      	ldr	r3, [pc, #700]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0x2a8>
 8001866:	e014      	b.n	8001892 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001868:	f7ff faa6 	bl	8000db8 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001870:	f7ff faa2 	bl	8000db8 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b64      	cmp	r3, #100	; 0x64
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e2ae      	b.n	8001de0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001882:	4ba5      	ldr	r3, [pc, #660]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x2d0>
 800188e:	e000      	b.n	8001892 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d060      	beq.n	8001960 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	2b04      	cmp	r3, #4
 80018a2:	d005      	beq.n	80018b0 <HAL_RCC_OscConfig+0x310>
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	2b0c      	cmp	r3, #12
 80018a8:	d119      	bne.n	80018de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d116      	bne.n	80018de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018b0:	4b99      	ldr	r3, [pc, #612]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_OscConfig+0x328>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e28b      	b.n	8001de0 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c8:	4b93      	ldr	r3, [pc, #588]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	061b      	lsls	r3, r3, #24
 80018d6:	4990      	ldr	r1, [pc, #576]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018dc:	e040      	b.n	8001960 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d023      	beq.n	800192e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018e6:	4b8c      	ldr	r3, [pc, #560]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a8b      	ldr	r2, [pc, #556]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 80018ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f2:	f7ff fa61 	bl	8000db8 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018fa:	f7ff fa5d 	bl	8000db8 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e269      	b.n	8001de0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800190c:	4b82      	ldr	r3, [pc, #520]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0f0      	beq.n	80018fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001918:	4b7f      	ldr	r3, [pc, #508]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	061b      	lsls	r3, r3, #24
 8001926:	497c      	ldr	r1, [pc, #496]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
 800192c:	e018      	b.n	8001960 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800192e:	4b7a      	ldr	r3, [pc, #488]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a79      	ldr	r2, [pc, #484]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 8001934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193a:	f7ff fa3d 	bl	8000db8 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001942:	f7ff fa39 	bl	8000db8 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e245      	b.n	8001de0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001954:	4b70      	ldr	r3, [pc, #448]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f0      	bne.n	8001942 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0308 	and.w	r3, r3, #8
 8001968:	2b00      	cmp	r3, #0
 800196a:	d03c      	beq.n	80019e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d01c      	beq.n	80019ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001974:	4b68      	ldr	r3, [pc, #416]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 8001976:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800197a:	4a67      	ldr	r2, [pc, #412]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001984:	f7ff fa18 	bl	8000db8 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800198c:	f7ff fa14 	bl	8000db8 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e220      	b.n	8001de0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800199e:	4b5e      	ldr	r3, [pc, #376]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 80019a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0ef      	beq.n	800198c <HAL_RCC_OscConfig+0x3ec>
 80019ac:	e01b      	b.n	80019e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ae:	4b5a      	ldr	r3, [pc, #360]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 80019b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019b4:	4a58      	ldr	r2, [pc, #352]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 80019b6:	f023 0301 	bic.w	r3, r3, #1
 80019ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019be:	f7ff f9fb 	bl	8000db8 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c6:	f7ff f9f7 	bl	8000db8 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e203      	b.n	8001de0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019d8:	4b4f      	ldr	r3, [pc, #316]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 80019da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1ef      	bne.n	80019c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 80a6 	beq.w	8001b40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019f4:	2300      	movs	r3, #0
 80019f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019f8:	4b47      	ldr	r3, [pc, #284]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 80019fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10d      	bne.n	8001a20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a04:	4b44      	ldr	r3, [pc, #272]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 8001a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a08:	4a43      	ldr	r2, [pc, #268]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 8001a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a10:	4b41      	ldr	r3, [pc, #260]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 8001a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a20:	4b3e      	ldr	r3, [pc, #248]	; (8001b1c <HAL_RCC_OscConfig+0x57c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d118      	bne.n	8001a5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a2c:	4b3b      	ldr	r3, [pc, #236]	; (8001b1c <HAL_RCC_OscConfig+0x57c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a3a      	ldr	r2, [pc, #232]	; (8001b1c <HAL_RCC_OscConfig+0x57c>)
 8001a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a38:	f7ff f9be 	bl	8000db8 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a40:	f7ff f9ba 	bl	8000db8 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e1c6      	b.n	8001de0 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a52:	4b32      	ldr	r3, [pc, #200]	; (8001b1c <HAL_RCC_OscConfig+0x57c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d108      	bne.n	8001a78 <HAL_RCC_OscConfig+0x4d8>
 8001a66:	4b2c      	ldr	r3, [pc, #176]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 8001a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a6c:	4a2a      	ldr	r2, [pc, #168]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a76:	e024      	b.n	8001ac2 <HAL_RCC_OscConfig+0x522>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b05      	cmp	r3, #5
 8001a7e:	d110      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x502>
 8001a80:	4b25      	ldr	r3, [pc, #148]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 8001a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a86:	4a24      	ldr	r2, [pc, #144]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 8001a88:	f043 0304 	orr.w	r3, r3, #4
 8001a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a90:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 8001a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a96:	4a20      	ldr	r2, [pc, #128]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aa0:	e00f      	b.n	8001ac2 <HAL_RCC_OscConfig+0x522>
 8001aa2:	4b1d      	ldr	r3, [pc, #116]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 8001aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa8:	4a1b      	ldr	r2, [pc, #108]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 8001aaa:	f023 0301 	bic.w	r3, r3, #1
 8001aae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ab2:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 8001ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab8:	4a17      	ldr	r2, [pc, #92]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 8001aba:	f023 0304 	bic.w	r3, r3, #4
 8001abe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d016      	beq.n	8001af8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aca:	f7ff f975 	bl	8000db8 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ad0:	e00a      	b.n	8001ae8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad2:	f7ff f971 	bl	8000db8 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e17b      	b.n	8001de0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <HAL_RCC_OscConfig+0x578>)
 8001aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0ed      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x532>
 8001af6:	e01a      	b.n	8001b2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af8:	f7ff f95e 	bl	8000db8 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001afe:	e00f      	b.n	8001b20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b00:	f7ff f95a 	bl	8000db8 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d906      	bls.n	8001b20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e164      	b.n	8001de0 <HAL_RCC_OscConfig+0x840>
 8001b16:	bf00      	nop
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b20:	4ba8      	ldr	r3, [pc, #672]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1e8      	bne.n	8001b00 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b2e:	7ffb      	ldrb	r3, [r7, #31]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d105      	bne.n	8001b40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b34:	4ba3      	ldr	r3, [pc, #652]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b38:	4aa2      	ldr	r2, [pc, #648]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001b3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0320 	and.w	r3, r3, #32
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d03c      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d01c      	beq.n	8001b8e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b54:	4b9b      	ldr	r3, [pc, #620]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001b56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b5a:	4a9a      	ldr	r2, [pc, #616]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b64:	f7ff f928 	bl	8000db8 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b6c:	f7ff f924 	bl	8000db8 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e130      	b.n	8001de0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b7e:	4b91      	ldr	r3, [pc, #580]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001b80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0ef      	beq.n	8001b6c <HAL_RCC_OscConfig+0x5cc>
 8001b8c:	e01b      	b.n	8001bc6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b8e:	4b8d      	ldr	r3, [pc, #564]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001b90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b94:	4a8b      	ldr	r2, [pc, #556]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001b96:	f023 0301 	bic.w	r3, r3, #1
 8001b9a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9e:	f7ff f90b 	bl	8000db8 <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ba6:	f7ff f907 	bl	8000db8 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e113      	b.n	8001de0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bb8:	4b82      	ldr	r3, [pc, #520]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001bba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1ef      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 8107 	beq.w	8001dde <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	f040 80cb 	bne.w	8001d70 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bda:	4b7a      	ldr	r3, [pc, #488]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f003 0203 	and.w	r2, r3, #3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d12c      	bne.n	8001c48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d123      	bne.n	8001c48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d11b      	bne.n	8001c48 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d113      	bne.n	8001c48 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2a:	085b      	lsrs	r3, r3, #1
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d109      	bne.n	8001c48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	085b      	lsrs	r3, r3, #1
 8001c40:	3b01      	subs	r3, #1
 8001c42:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d06d      	beq.n	8001d24 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d068      	beq.n	8001d20 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c4e:	4b5d      	ldr	r3, [pc, #372]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d105      	bne.n	8001c66 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c5a:	4b5a      	ldr	r3, [pc, #360]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e0ba      	b.n	8001de0 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c6a:	4b56      	ldr	r3, [pc, #344]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a55      	ldr	r2, [pc, #340]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001c70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c74:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c76:	f7ff f89f 	bl	8000db8 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7e:	f7ff f89b 	bl	8000db8 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e0a7      	b.n	8001de0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c90:	4b4c      	ldr	r3, [pc, #304]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1f0      	bne.n	8001c7e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c9c:	4b49      	ldr	r3, [pc, #292]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001c9e:	68da      	ldr	r2, [r3, #12]
 8001ca0:	4b49      	ldr	r3, [pc, #292]	; (8001dc8 <HAL_RCC_OscConfig+0x828>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cac:	3a01      	subs	r2, #1
 8001cae:	0112      	lsls	r2, r2, #4
 8001cb0:	4311      	orrs	r1, r2
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cb6:	0212      	lsls	r2, r2, #8
 8001cb8:	4311      	orrs	r1, r2
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cbe:	0852      	lsrs	r2, r2, #1
 8001cc0:	3a01      	subs	r2, #1
 8001cc2:	0552      	lsls	r2, r2, #21
 8001cc4:	4311      	orrs	r1, r2
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cca:	0852      	lsrs	r2, r2, #1
 8001ccc:	3a01      	subs	r2, #1
 8001cce:	0652      	lsls	r2, r2, #25
 8001cd0:	4311      	orrs	r1, r2
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cd6:	06d2      	lsls	r2, r2, #27
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	493a      	ldr	r1, [pc, #232]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ce0:	4b38      	ldr	r3, [pc, #224]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a37      	ldr	r2, [pc, #220]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001ce6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cec:	4b35      	ldr	r3, [pc, #212]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	4a34      	ldr	r2, [pc, #208]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001cf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cf6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cf8:	f7ff f85e 	bl	8000db8 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d00:	f7ff f85a 	bl	8000db8 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e066      	b.n	8001de0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d12:	4b2c      	ldr	r3, [pc, #176]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d1e:	e05e      	b.n	8001dde <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e05d      	b.n	8001de0 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d24:	4b27      	ldr	r3, [pc, #156]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d156      	bne.n	8001dde <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d30:	4b24      	ldr	r3, [pc, #144]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a23      	ldr	r2, [pc, #140]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001d36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d3c:	4b21      	ldr	r3, [pc, #132]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	4a20      	ldr	r2, [pc, #128]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001d42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d48:	f7ff f836 	bl	8000db8 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d50:	f7ff f832 	bl	8000db8 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e03e      	b.n	8001de0 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d62:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0x7b0>
 8001d6e:	e036      	b.n	8001dde <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	2b0c      	cmp	r3, #12
 8001d74:	d031      	beq.n	8001dda <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d76:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001d7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d80:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d105      	bne.n	8001d9a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d8e:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	4a0c      	ldr	r2, [pc, #48]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001d94:	f023 0303 	bic.w	r3, r3, #3
 8001d98:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	4a09      	ldr	r2, [pc, #36]	; (8001dc4 <HAL_RCC_OscConfig+0x824>)
 8001da0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001daa:	f7ff f805 	bl	8000db8 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001db0:	e00c      	b.n	8001dcc <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db2:	f7ff f801 	bl	8000db8 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d905      	bls.n	8001dcc <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e00d      	b.n	8001de0 <HAL_RCC_OscConfig+0x840>
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_RCC_OscConfig+0x848>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1ec      	bne.n	8001db2 <HAL_RCC_OscConfig+0x812>
 8001dd8:	e001      	b.n	8001dde <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3720      	adds	r7, #32
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000

08001dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e10f      	b.n	8002024 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e04:	4b89      	ldr	r3, [pc, #548]	; (800202c <HAL_RCC_ClockConfig+0x240>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 030f 	and.w	r3, r3, #15
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d910      	bls.n	8001e34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e12:	4b86      	ldr	r3, [pc, #536]	; (800202c <HAL_RCC_ClockConfig+0x240>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 020f 	bic.w	r2, r3, #15
 8001e1a:	4984      	ldr	r1, [pc, #528]	; (800202c <HAL_RCC_ClockConfig+0x240>)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e22:	4b82      	ldr	r3, [pc, #520]	; (800202c <HAL_RCC_ClockConfig+0x240>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d001      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0f7      	b.n	8002024 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 8089 	beq.w	8001f54 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	d133      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4a:	4b79      	ldr	r3, [pc, #484]	; (8002030 <HAL_RCC_ClockConfig+0x244>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e0e4      	b.n	8002024 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001e5a:	f000 fa0f 	bl	800227c <RCC_GetSysClockFreqFromPLLSource>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	4b74      	ldr	r3, [pc, #464]	; (8002034 <HAL_RCC_ClockConfig+0x248>)
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d955      	bls.n	8001f12 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001e66:	4b72      	ldr	r3, [pc, #456]	; (8002030 <HAL_RCC_ClockConfig+0x244>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10a      	bne.n	8001e88 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e72:	4b6f      	ldr	r3, [pc, #444]	; (8002030 <HAL_RCC_ClockConfig+0x244>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e7a:	4a6d      	ldr	r2, [pc, #436]	; (8002030 <HAL_RCC_ClockConfig+0x244>)
 8001e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e80:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	e044      	b.n	8001f12 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d03e      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x126>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d13a      	bne.n	8001f12 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e9c:	4b64      	ldr	r3, [pc, #400]	; (8002030 <HAL_RCC_ClockConfig+0x244>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ea4:	4a62      	ldr	r2, [pc, #392]	; (8002030 <HAL_RCC_ClockConfig+0x244>)
 8001ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eaa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	e02f      	b.n	8001f12 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d107      	bne.n	8001eca <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eba:	4b5d      	ldr	r3, [pc, #372]	; (8002030 <HAL_RCC_ClockConfig+0x244>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d115      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e0ac      	b.n	8002024 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d107      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ed2:	4b57      	ldr	r3, [pc, #348]	; (8002030 <HAL_RCC_ClockConfig+0x244>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d109      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e0a0      	b.n	8002024 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee2:	4b53      	ldr	r3, [pc, #332]	; (8002030 <HAL_RCC_ClockConfig+0x244>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e098      	b.n	8002024 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001ef2:	f000 f8a7 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	4b4e      	ldr	r3, [pc, #312]	; (8002034 <HAL_RCC_ClockConfig+0x248>)
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d909      	bls.n	8001f12 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001efe:	4b4c      	ldr	r3, [pc, #304]	; (8002030 <HAL_RCC_ClockConfig+0x244>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f06:	4a4a      	ldr	r2, [pc, #296]	; (8002030 <HAL_RCC_ClockConfig+0x244>)
 8001f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f0c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001f0e:	2380      	movs	r3, #128	; 0x80
 8001f10:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f12:	4b47      	ldr	r3, [pc, #284]	; (8002030 <HAL_RCC_ClockConfig+0x244>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f023 0203 	bic.w	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	4944      	ldr	r1, [pc, #272]	; (8002030 <HAL_RCC_ClockConfig+0x244>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f24:	f7fe ff48 	bl	8000db8 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2a:	e00a      	b.n	8001f42 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f2c:	f7fe ff44 	bl	8000db8 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e070      	b.n	8002024 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f42:	4b3b      	ldr	r3, [pc, #236]	; (8002030 <HAL_RCC_ClockConfig+0x244>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 020c 	and.w	r2, r3, #12
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d1eb      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d009      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f60:	4b33      	ldr	r3, [pc, #204]	; (8002030 <HAL_RCC_ClockConfig+0x244>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	4930      	ldr	r1, [pc, #192]	; (8002030 <HAL_RCC_ClockConfig+0x244>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	608b      	str	r3, [r1, #8]
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2b80      	cmp	r3, #128	; 0x80
 8001f78:	d105      	bne.n	8001f86 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f7a:	4b2d      	ldr	r3, [pc, #180]	; (8002030 <HAL_RCC_ClockConfig+0x244>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	4a2c      	ldr	r2, [pc, #176]	; (8002030 <HAL_RCC_ClockConfig+0x244>)
 8001f80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f84:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f86:	4b29      	ldr	r3, [pc, #164]	; (800202c <HAL_RCC_ClockConfig+0x240>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d210      	bcs.n	8001fb6 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f94:	4b25      	ldr	r3, [pc, #148]	; (800202c <HAL_RCC_ClockConfig+0x240>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f023 020f 	bic.w	r2, r3, #15
 8001f9c:	4923      	ldr	r1, [pc, #140]	; (800202c <HAL_RCC_ClockConfig+0x240>)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa4:	4b21      	ldr	r3, [pc, #132]	; (800202c <HAL_RCC_ClockConfig+0x240>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 030f 	and.w	r3, r3, #15
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d001      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e036      	b.n	8002024 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d008      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc2:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <HAL_RCC_ClockConfig+0x244>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	4918      	ldr	r1, [pc, #96]	; (8002030 <HAL_RCC_ClockConfig+0x244>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d009      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fe0:	4b13      	ldr	r3, [pc, #76]	; (8002030 <HAL_RCC_ClockConfig+0x244>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4910      	ldr	r1, [pc, #64]	; (8002030 <HAL_RCC_ClockConfig+0x244>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ff4:	f000 f826 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8001ff8:	4601      	mov	r1, r0
 8001ffa:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <HAL_RCC_ClockConfig+0x244>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	091b      	lsrs	r3, r3, #4
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	4a0c      	ldr	r2, [pc, #48]	; (8002038 <HAL_RCC_ClockConfig+0x24c>)
 8002006:	5cd3      	ldrb	r3, [r2, r3]
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	fa21 f303 	lsr.w	r3, r1, r3
 8002010:	4a0a      	ldr	r2, [pc, #40]	; (800203c <HAL_RCC_ClockConfig+0x250>)
 8002012:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002014:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <HAL_RCC_ClockConfig+0x254>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe fe7d 	bl	8000d18 <HAL_InitTick>
 800201e:	4603      	mov	r3, r0
 8002020:	73fb      	strb	r3, [r7, #15]

  return status;
 8002022:	7bfb      	ldrb	r3, [r7, #15]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40022000 	.word	0x40022000
 8002030:	40021000 	.word	0x40021000
 8002034:	04c4b400 	.word	0x04c4b400
 8002038:	08005400 	.word	0x08005400
 800203c:	20000004 	.word	0x20000004
 8002040:	20000008 	.word	0x20000008

08002044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	; 0x24
 8002048:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
 800204e:	2300      	movs	r3, #0
 8002050:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002052:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <HAL_RCC_GetSysClockFreq+0x104>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 030c 	and.w	r3, r3, #12
 800205a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800205c:	4b3a      	ldr	r3, [pc, #232]	; (8002148 <HAL_RCC_GetSysClockFreq+0x104>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <HAL_RCC_GetSysClockFreq+0x34>
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	2b0c      	cmp	r3, #12
 8002070:	d121      	bne.n	80020b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d11e      	bne.n	80020b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002078:	4b33      	ldr	r3, [pc, #204]	; (8002148 <HAL_RCC_GetSysClockFreq+0x104>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	2b00      	cmp	r3, #0
 8002082:	d107      	bne.n	8002094 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002084:	4b30      	ldr	r3, [pc, #192]	; (8002148 <HAL_RCC_GetSysClockFreq+0x104>)
 8002086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800208a:	0a1b      	lsrs	r3, r3, #8
 800208c:	f003 030f 	and.w	r3, r3, #15
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	e005      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002094:	4b2c      	ldr	r3, [pc, #176]	; (8002148 <HAL_RCC_GetSysClockFreq+0x104>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	091b      	lsrs	r3, r3, #4
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020a0:	4a2a      	ldr	r2, [pc, #168]	; (800214c <HAL_RCC_GetSysClockFreq+0x108>)
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10d      	bne.n	80020cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020b4:	e00a      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d102      	bne.n	80020c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020bc:	4b24      	ldr	r3, [pc, #144]	; (8002150 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020be:	61bb      	str	r3, [r7, #24]
 80020c0:	e004      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d101      	bne.n	80020cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020c8:	4b22      	ldr	r3, [pc, #136]	; (8002154 <HAL_RCC_GetSysClockFreq+0x110>)
 80020ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	2b0c      	cmp	r3, #12
 80020d0:	d133      	bne.n	800213a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020d2:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <HAL_RCC_GetSysClockFreq+0x104>)
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d002      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0xa4>
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d003      	beq.n	80020ee <HAL_RCC_GetSysClockFreq+0xaa>
 80020e6:	e005      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020e8:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020ea:	617b      	str	r3, [r7, #20]
      break;
 80020ec:	e005      	b.n	80020fa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020ee:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_RCC_GetSysClockFreq+0x110>)
 80020f0:	617b      	str	r3, [r7, #20]
      break;
 80020f2:	e002      	b.n	80020fa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	617b      	str	r3, [r7, #20]
      break;
 80020f8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020fa:	4b13      	ldr	r3, [pc, #76]	; (8002148 <HAL_RCC_GetSysClockFreq+0x104>)
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	091b      	lsrs	r3, r3, #4
 8002100:	f003 030f 	and.w	r3, r3, #15
 8002104:	3301      	adds	r3, #1
 8002106:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002108:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <HAL_RCC_GetSysClockFreq+0x104>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	0a1b      	lsrs	r3, r3, #8
 800210e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	fb02 f203 	mul.w	r2, r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	fbb2 f3f3 	udiv	r3, r2, r3
 800211e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002120:	4b09      	ldr	r3, [pc, #36]	; (8002148 <HAL_RCC_GetSysClockFreq+0x104>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	0e5b      	lsrs	r3, r3, #25
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	3301      	adds	r3, #1
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	fbb2 f3f3 	udiv	r3, r2, r3
 8002138:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800213a:	69bb      	ldr	r3, [r7, #24]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3724      	adds	r7, #36	; 0x24
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	40021000 	.word	0x40021000
 800214c:	08005418 	.word	0x08005418
 8002150:	00f42400 	.word	0x00f42400
 8002154:	007a1200 	.word	0x007a1200

08002158 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800215c:	4b03      	ldr	r3, [pc, #12]	; (800216c <HAL_RCC_GetHCLKFreq+0x14>)
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	20000004 	.word	0x20000004

08002170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002174:	f7ff fff0 	bl	8002158 <HAL_RCC_GetHCLKFreq>
 8002178:	4601      	mov	r1, r0
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_RCC_GetPCLK1Freq+0x24>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	0a1b      	lsrs	r3, r3, #8
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	4a04      	ldr	r2, [pc, #16]	; (8002198 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002186:	5cd3      	ldrb	r3, [r2, r3]
 8002188:	f003 031f 	and.w	r3, r3, #31
 800218c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002190:	4618      	mov	r0, r3
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40021000 	.word	0x40021000
 8002198:	08005410 	.word	0x08005410

0800219c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021a0:	f7ff ffda 	bl	8002158 <HAL_RCC_GetHCLKFreq>
 80021a4:	4601      	mov	r1, r0
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	0adb      	lsrs	r3, r3, #11
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	4a04      	ldr	r2, [pc, #16]	; (80021c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021b2:	5cd3      	ldrb	r3, [r2, r3]
 80021b4:	f003 031f 	and.w	r3, r3, #31
 80021b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021bc:	4618      	mov	r0, r3
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40021000 	.word	0x40021000
 80021c4:	08005410 	.word	0x08005410

080021c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021d0:	2300      	movs	r3, #0
 80021d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021d4:	4b27      	ldr	r3, [pc, #156]	; (8002274 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80021d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021e0:	f7ff f91a 	bl	8001418 <HAL_PWREx_GetVoltageRange>
 80021e4:	6178      	str	r0, [r7, #20]
 80021e6:	e014      	b.n	8002212 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021e8:	4b22      	ldr	r3, [pc, #136]	; (8002274 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80021ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ec:	4a21      	ldr	r2, [pc, #132]	; (8002274 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80021ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f2:	6593      	str	r3, [r2, #88]	; 0x58
 80021f4:	4b1f      	ldr	r3, [pc, #124]	; (8002274 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80021f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002200:	f7ff f90a 	bl	8001418 <HAL_PWREx_GetVoltageRange>
 8002204:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002206:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220a:	4a1a      	ldr	r2, [pc, #104]	; (8002274 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800220c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002210:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002218:	d10b      	bne.n	8002232 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b80      	cmp	r3, #128	; 0x80
 800221e:	d913      	bls.n	8002248 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2ba0      	cmp	r3, #160	; 0xa0
 8002224:	d902      	bls.n	800222c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002226:	2302      	movs	r3, #2
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	e00d      	b.n	8002248 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800222c:	2301      	movs	r3, #1
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	e00a      	b.n	8002248 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b7f      	cmp	r3, #127	; 0x7f
 8002236:	d902      	bls.n	800223e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002238:	2302      	movs	r3, #2
 800223a:	613b      	str	r3, [r7, #16]
 800223c:	e004      	b.n	8002248 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b70      	cmp	r3, #112	; 0x70
 8002242:	d101      	bne.n	8002248 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002244:	2301      	movs	r3, #1
 8002246:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f023 020f 	bic.w	r2, r3, #15
 8002250:	4909      	ldr	r1, [pc, #36]	; (8002278 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002258:	4b07      	ldr	r3, [pc, #28]	; (8002278 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	429a      	cmp	r2, r3
 8002264:	d001      	beq.n	800226a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40021000 	.word	0x40021000
 8002278:	40022000 	.word	0x40022000

0800227c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800227c:	b480      	push	{r7}
 800227e:	b087      	sub	sp, #28
 8002280:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002286:	4b2d      	ldr	r3, [pc, #180]	; (800233c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	2b01      	cmp	r3, #1
 8002290:	d118      	bne.n	80022c4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002292:	4b2a      	ldr	r3, [pc, #168]	; (800233c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b00      	cmp	r3, #0
 800229c:	d107      	bne.n	80022ae <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800229e:	4b27      	ldr	r3, [pc, #156]	; (800233c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80022a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022a4:	0a1b      	lsrs	r3, r3, #8
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	e005      	b.n	80022ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022ae:	4b23      	ldr	r3, [pc, #140]	; (800233c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	091b      	lsrs	r3, r3, #4
 80022b4:	f003 030f 	and.w	r3, r3, #15
 80022b8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022ba:	4a21      	ldr	r2, [pc, #132]	; (8002340 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022c4:	4b1d      	ldr	r3, [pc, #116]	; (800233c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d002      	beq.n	80022da <RCC_GetSysClockFreqFromPLLSource+0x5e>
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d003      	beq.n	80022e0 <RCC_GetSysClockFreqFromPLLSource+0x64>
 80022d8:	e005      	b.n	80022e6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80022da:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80022dc:	613b      	str	r3, [r7, #16]
    break;
 80022de:	e005      	b.n	80022ec <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80022e0:	4b19      	ldr	r3, [pc, #100]	; (8002348 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80022e2:	613b      	str	r3, [r7, #16]
    break;
 80022e4:	e002      	b.n	80022ec <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	613b      	str	r3, [r7, #16]
    break;
 80022ea:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022ec:	4b13      	ldr	r3, [pc, #76]	; (800233c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	091b      	lsrs	r3, r3, #4
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	3301      	adds	r3, #1
 80022f8:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	0a1b      	lsrs	r3, r3, #8
 8002300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	fb02 f203 	mul.w	r2, r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002310:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002312:	4b0a      	ldr	r3, [pc, #40]	; (800233c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	0e5b      	lsrs	r3, r3, #25
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	3301      	adds	r3, #1
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	fbb2 f3f3 	udiv	r3, r2, r3
 800232a:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800232c:	683b      	ldr	r3, [r7, #0]
}
 800232e:	4618      	mov	r0, r3
 8002330:	371c      	adds	r7, #28
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
 8002340:	08005418 	.word	0x08005418
 8002344:	00f42400 	.word	0x00f42400
 8002348:	007a1200 	.word	0x007a1200

0800234c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002354:	2300      	movs	r3, #0
 8002356:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002358:	2300      	movs	r3, #0
 800235a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002364:	2b00      	cmp	r3, #0
 8002366:	d03d      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800236c:	2b40      	cmp	r3, #64	; 0x40
 800236e:	d00b      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002370:	2b40      	cmp	r3, #64	; 0x40
 8002372:	d804      	bhi.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00e      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8002378:	2b20      	cmp	r3, #32
 800237a:	d015      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800237c:	e01d      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800237e:	2b60      	cmp	r3, #96	; 0x60
 8002380:	d01e      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002382:	2b80      	cmp	r3, #128	; 0x80
 8002384:	d01c      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002386:	e018      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002388:	4b86      	ldr	r3, [pc, #536]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4a85      	ldr	r2, [pc, #532]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800238e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002392:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002394:	e015      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3304      	adds	r3, #4
 800239a:	2100      	movs	r1, #0
 800239c:	4618      	mov	r0, r3
 800239e:	f000 fafd 	bl	800299c <RCCEx_PLLSAI1_Config>
 80023a2:	4603      	mov	r3, r0
 80023a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023a6:	e00c      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3320      	adds	r3, #32
 80023ac:	2100      	movs	r1, #0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 fbe4 	bl	8002b7c <RCCEx_PLLSAI2_Config>
 80023b4:	4603      	mov	r3, r0
 80023b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023b8:	e003      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	74fb      	strb	r3, [r7, #19]
      break;
 80023be:	e000      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 80023c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023c2:	7cfb      	ldrb	r3, [r7, #19]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10b      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023c8:	4b76      	ldr	r3, [pc, #472]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023ce:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023d6:	4973      	ldr	r1, [pc, #460]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80023de:	e001      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023e0:	7cfb      	ldrb	r3, [r7, #19]
 80023e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d042      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023f8:	d00f      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0xce>
 80023fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023fe:	d805      	bhi.n	800240c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8002400:	2b00      	cmp	r3, #0
 8002402:	d011      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8002404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002408:	d017      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0xee>
 800240a:	e01f      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x100>
 800240c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002410:	d01f      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002416:	d01c      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002418:	e018      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800241a:	4b62      	ldr	r3, [pc, #392]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	4a61      	ldr	r2, [pc, #388]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002424:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002426:	e015      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3304      	adds	r3, #4
 800242c:	2100      	movs	r1, #0
 800242e:	4618      	mov	r0, r3
 8002430:	f000 fab4 	bl	800299c <RCCEx_PLLSAI1_Config>
 8002434:	4603      	mov	r3, r0
 8002436:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002438:	e00c      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3320      	adds	r3, #32
 800243e:	2100      	movs	r1, #0
 8002440:	4618      	mov	r0, r3
 8002442:	f000 fb9b 	bl	8002b7c <RCCEx_PLLSAI2_Config>
 8002446:	4603      	mov	r3, r0
 8002448:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800244a:	e003      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	74fb      	strb	r3, [r7, #19]
      break;
 8002450:	e000      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8002452:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002454:	7cfb      	ldrb	r3, [r7, #19]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10b      	bne.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800245a:	4b52      	ldr	r3, [pc, #328]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800245c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002460:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002468:	494e      	ldr	r1, [pc, #312]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800246a:	4313      	orrs	r3, r2
 800246c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002470:	e001      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002472:	7cfb      	ldrb	r3, [r7, #19]
 8002474:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 809f 	beq.w	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002484:	2300      	movs	r3, #0
 8002486:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002488:	4b46      	ldr	r3, [pc, #280]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800248a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002498:	2300      	movs	r3, #0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00d      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800249e:	4b41      	ldr	r3, [pc, #260]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a2:	4a40      	ldr	r2, [pc, #256]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a8:	6593      	str	r3, [r2, #88]	; 0x58
 80024aa:	4b3e      	ldr	r3, [pc, #248]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b2:	60bb      	str	r3, [r7, #8]
 80024b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b6:	2301      	movs	r3, #1
 80024b8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024ba:	4b3b      	ldr	r3, [pc, #236]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a3a      	ldr	r2, [pc, #232]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80024c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024c6:	f7fe fc77 	bl	8000db8 <HAL_GetTick>
 80024ca:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024cc:	e009      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ce:	f7fe fc73 	bl	8000db8 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d902      	bls.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	74fb      	strb	r3, [r7, #19]
        break;
 80024e0:	e005      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024e2:	4b31      	ldr	r3, [pc, #196]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0ef      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 80024ee:	7cfb      	ldrb	r3, [r7, #19]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d15b      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024f4:	4b2b      	ldr	r3, [pc, #172]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024fe:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d01f      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	429a      	cmp	r2, r3
 8002510:	d019      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002512:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800251c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800251e:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002524:	4a1f      	ldr	r2, [pc, #124]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800252e:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002534:	4a1b      	ldr	r2, [pc, #108]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800253a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800253e:	4a19      	ldr	r2, [pc, #100]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b00      	cmp	r3, #0
 800254e:	d016      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002550:	f7fe fc32 	bl	8000db8 <HAL_GetTick>
 8002554:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002556:	e00b      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002558:	f7fe fc2e 	bl	8000db8 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	f241 3288 	movw	r2, #5000	; 0x1388
 8002566:	4293      	cmp	r3, r2
 8002568:	d902      	bls.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	74fb      	strb	r3, [r7, #19]
            break;
 800256e:	e006      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0ec      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800257e:	7cfb      	ldrb	r3, [r7, #19]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10c      	bne.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002584:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002594:	4903      	ldr	r1, [pc, #12]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002596:	4313      	orrs	r3, r2
 8002598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800259c:	e008      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800259e:	7cfb      	ldrb	r3, [r7, #19]
 80025a0:	74bb      	strb	r3, [r7, #18]
 80025a2:	e005      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025ac:	7cfb      	ldrb	r3, [r7, #19]
 80025ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025b0:	7c7b      	ldrb	r3, [r7, #17]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d105      	bne.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b6:	4ba0      	ldr	r3, [pc, #640]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	4a9f      	ldr	r2, [pc, #636]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00a      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025ce:	4b9a      	ldr	r3, [pc, #616]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d4:	f023 0203 	bic.w	r2, r3, #3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025dc:	4996      	ldr	r1, [pc, #600]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00a      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025f0:	4b91      	ldr	r3, [pc, #580]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f6:	f023 020c 	bic.w	r2, r3, #12
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	498e      	ldr	r1, [pc, #568]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002600:	4313      	orrs	r3, r2
 8002602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00a      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002612:	4b89      	ldr	r3, [pc, #548]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002618:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002620:	4985      	ldr	r1, [pc, #532]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002622:	4313      	orrs	r3, r2
 8002624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00a      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002634:	4b80      	ldr	r3, [pc, #512]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002642:	497d      	ldr	r1, [pc, #500]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0310 	and.w	r3, r3, #16
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00a      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002656:	4b78      	ldr	r3, [pc, #480]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002664:	4974      	ldr	r1, [pc, #464]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002666:	4313      	orrs	r3, r2
 8002668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0320 	and.w	r3, r3, #32
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00a      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002678:	4b6f      	ldr	r3, [pc, #444]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002686:	496c      	ldr	r1, [pc, #432]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002688:	4313      	orrs	r3, r2
 800268a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800269a:	4b67      	ldr	r3, [pc, #412]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026a8:	4963      	ldr	r1, [pc, #396]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00a      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026bc:	4b5e      	ldr	r3, [pc, #376]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026ca:	495b      	ldr	r1, [pc, #364]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00a      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026de:	4b56      	ldr	r3, [pc, #344]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ec:	4952      	ldr	r1, [pc, #328]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00a      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002700:	4b4d      	ldr	r3, [pc, #308]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002706:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270e:	494a      	ldr	r1, [pc, #296]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002710:	4313      	orrs	r3, r2
 8002712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00a      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002722:	4b45      	ldr	r3, [pc, #276]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002728:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002730:	4941      	ldr	r1, [pc, #260]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002732:	4313      	orrs	r3, r2
 8002734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00a      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002744:	4b3c      	ldr	r3, [pc, #240]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002746:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800274a:	f023 0203 	bic.w	r2, r3, #3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002752:	4939      	ldr	r1, [pc, #228]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002754:	4313      	orrs	r3, r2
 8002756:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d028      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002766:	4b34      	ldr	r3, [pc, #208]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002774:	4930      	ldr	r1, [pc, #192]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002776:	4313      	orrs	r3, r2
 8002778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002780:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002784:	d106      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002786:	4b2c      	ldr	r3, [pc, #176]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	4a2b      	ldr	r2, [pc, #172]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002790:	60d3      	str	r3, [r2, #12]
 8002792:	e011      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002798:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800279c:	d10c      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3304      	adds	r3, #4
 80027a2:	2101      	movs	r1, #1
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 f8f9 	bl	800299c <RCCEx_PLLSAI1_Config>
 80027aa:	4603      	mov	r3, r0
 80027ac:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027ae:	7cfb      	ldrb	r3, [r7, #19]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80027b4:	7cfb      	ldrb	r3, [r7, #19]
 80027b6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d04d      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027cc:	d108      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80027ce:	4b1a      	ldr	r3, [pc, #104]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027d4:	4a18      	ldr	r2, [pc, #96]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027da:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80027de:	e012      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80027e0:	4b15      	ldr	r3, [pc, #84]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027e6:	4a14      	ldr	r2, [pc, #80]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027ec:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80027f0:	4b11      	ldr	r3, [pc, #68]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027fe:	490e      	ldr	r1, [pc, #56]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800280a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800280e:	d106      	bne.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002810:	4b09      	ldr	r3, [pc, #36]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	4a08      	ldr	r2, [pc, #32]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002816:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800281a:	60d3      	str	r3, [r2, #12]
 800281c:	e020      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002822:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002826:	d109      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002828:	4b03      	ldr	r3, [pc, #12]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4a02      	ldr	r2, [pc, #8]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002832:	60d3      	str	r3, [r2, #12]
 8002834:	e014      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002840:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002844:	d10c      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3304      	adds	r3, #4
 800284a:	2101      	movs	r1, #1
 800284c:	4618      	mov	r0, r3
 800284e:	f000 f8a5 	bl	800299c <RCCEx_PLLSAI1_Config>
 8002852:	4603      	mov	r3, r0
 8002854:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002856:	7cfb      	ldrb	r3, [r7, #19]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800285c:	7cfb      	ldrb	r3, [r7, #19]
 800285e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d028      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800286c:	4b4a      	ldr	r3, [pc, #296]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002872:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800287a:	4947      	ldr	r1, [pc, #284]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002886:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800288a:	d106      	bne.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800288c:	4b42      	ldr	r3, [pc, #264]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4a41      	ldr	r2, [pc, #260]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002896:	60d3      	str	r3, [r2, #12]
 8002898:	e011      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800289e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028a2:	d10c      	bne.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3304      	adds	r3, #4
 80028a8:	2101      	movs	r1, #1
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 f876 	bl	800299c <RCCEx_PLLSAI1_Config>
 80028b0:	4603      	mov	r3, r0
 80028b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028b4:	7cfb      	ldrb	r3, [r7, #19]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 80028ba:	7cfb      	ldrb	r3, [r7, #19]
 80028bc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d01e      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028ca:	4b33      	ldr	r3, [pc, #204]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80028cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028da:	492f      	ldr	r1, [pc, #188]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028ec:	d10c      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3304      	adds	r3, #4
 80028f2:	2102      	movs	r1, #2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f000 f851 	bl	800299c <RCCEx_PLLSAI1_Config>
 80028fa:	4603      	mov	r3, r0
 80028fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028fe:	7cfb      	ldrb	r3, [r7, #19]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8002904:	7cfb      	ldrb	r3, [r7, #19]
 8002906:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00b      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002914:	4b20      	ldr	r3, [pc, #128]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002916:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800291a:	f023 0204 	bic.w	r2, r3, #4
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002924:	491c      	ldr	r1, [pc, #112]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00b      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002938:	4b17      	ldr	r3, [pc, #92]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800293a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800293e:	f023 0218 	bic.w	r2, r3, #24
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002948:	4913      	ldr	r1, [pc, #76]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800294a:	4313      	orrs	r3, r2
 800294c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d017      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800295c:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800295e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002962:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800296c:	490a      	ldr	r1, [pc, #40]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800297a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800297e:	d105      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002980:	4b05      	ldr	r3, [pc, #20]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4a04      	ldr	r2, [pc, #16]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800298a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800298c:	7cbb      	ldrb	r3, [r7, #18]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40021000 	.word	0x40021000

0800299c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029a6:	2300      	movs	r3, #0
 80029a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029aa:	4b70      	ldr	r3, [pc, #448]	; (8002b6c <RCCEx_PLLSAI1_Config+0x1d0>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00e      	beq.n	80029d4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80029b6:	4b6d      	ldr	r3, [pc, #436]	; (8002b6c <RCCEx_PLLSAI1_Config+0x1d0>)
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f003 0203 	and.w	r2, r3, #3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d103      	bne.n	80029ce <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
       ||
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d13f      	bne.n	8002a4e <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	73fb      	strb	r3, [r7, #15]
 80029d2:	e03c      	b.n	8002a4e <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d00c      	beq.n	80029f6 <RCCEx_PLLSAI1_Config+0x5a>
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d013      	beq.n	8002a08 <RCCEx_PLLSAI1_Config+0x6c>
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d120      	bne.n	8002a26 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029e4:	4b61      	ldr	r3, [pc, #388]	; (8002b6c <RCCEx_PLLSAI1_Config+0x1d0>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d11d      	bne.n	8002a2c <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f4:	e01a      	b.n	8002a2c <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029f6:	4b5d      	ldr	r3, [pc, #372]	; (8002b6c <RCCEx_PLLSAI1_Config+0x1d0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d116      	bne.n	8002a30 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a06:	e013      	b.n	8002a30 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a08:	4b58      	ldr	r3, [pc, #352]	; (8002b6c <RCCEx_PLLSAI1_Config+0x1d0>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10f      	bne.n	8002a34 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a14:	4b55      	ldr	r3, [pc, #340]	; (8002b6c <RCCEx_PLLSAI1_Config+0x1d0>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d109      	bne.n	8002a34 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a24:	e006      	b.n	8002a34 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	73fb      	strb	r3, [r7, #15]
      break;
 8002a2a:	e004      	b.n	8002a36 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002a2c:	bf00      	nop
 8002a2e:	e002      	b.n	8002a36 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002a30:	bf00      	nop
 8002a32:	e000      	b.n	8002a36 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002a34:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d108      	bne.n	8002a4e <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002a3c:	4b4b      	ldr	r3, [pc, #300]	; (8002b6c <RCCEx_PLLSAI1_Config+0x1d0>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f023 0203 	bic.w	r2, r3, #3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4948      	ldr	r1, [pc, #288]	; (8002b6c <RCCEx_PLLSAI1_Config+0x1d0>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f040 8086 	bne.w	8002b62 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a56:	4b45      	ldr	r3, [pc, #276]	; (8002b6c <RCCEx_PLLSAI1_Config+0x1d0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a44      	ldr	r2, [pc, #272]	; (8002b6c <RCCEx_PLLSAI1_Config+0x1d0>)
 8002a5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a62:	f7fe f9a9 	bl	8000db8 <HAL_GetTick>
 8002a66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a68:	e009      	b.n	8002a7e <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a6a:	f7fe f9a5 	bl	8000db8 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d902      	bls.n	8002a7e <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	73fb      	strb	r3, [r7, #15]
        break;
 8002a7c:	e005      	b.n	8002a8a <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a7e:	4b3b      	ldr	r3, [pc, #236]	; (8002b6c <RCCEx_PLLSAI1_Config+0x1d0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1ef      	bne.n	8002a6a <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d168      	bne.n	8002b62 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d113      	bne.n	8002abe <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a96:	4b35      	ldr	r3, [pc, #212]	; (8002b6c <RCCEx_PLLSAI1_Config+0x1d0>)
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	4b35      	ldr	r3, [pc, #212]	; (8002b70 <RCCEx_PLLSAI1_Config+0x1d4>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6892      	ldr	r2, [r2, #8]
 8002aa2:	0211      	lsls	r1, r2, #8
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	68d2      	ldr	r2, [r2, #12]
 8002aa8:	06d2      	lsls	r2, r2, #27
 8002aaa:	4311      	orrs	r1, r2
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6852      	ldr	r2, [r2, #4]
 8002ab0:	3a01      	subs	r2, #1
 8002ab2:	0112      	lsls	r2, r2, #4
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	492d      	ldr	r1, [pc, #180]	; (8002b6c <RCCEx_PLLSAI1_Config+0x1d0>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	610b      	str	r3, [r1, #16]
 8002abc:	e02d      	b.n	8002b1a <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d115      	bne.n	8002af0 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ac4:	4b29      	ldr	r3, [pc, #164]	; (8002b6c <RCCEx_PLLSAI1_Config+0x1d0>)
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	4b2a      	ldr	r3, [pc, #168]	; (8002b74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6892      	ldr	r2, [r2, #8]
 8002ad0:	0211      	lsls	r1, r2, #8
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6912      	ldr	r2, [r2, #16]
 8002ad6:	0852      	lsrs	r2, r2, #1
 8002ad8:	3a01      	subs	r2, #1
 8002ada:	0552      	lsls	r2, r2, #21
 8002adc:	4311      	orrs	r1, r2
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6852      	ldr	r2, [r2, #4]
 8002ae2:	3a01      	subs	r2, #1
 8002ae4:	0112      	lsls	r2, r2, #4
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	4920      	ldr	r1, [pc, #128]	; (8002b6c <RCCEx_PLLSAI1_Config+0x1d0>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	610b      	str	r3, [r1, #16]
 8002aee:	e014      	b.n	8002b1a <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002af0:	4b1e      	ldr	r3, [pc, #120]	; (8002b6c <RCCEx_PLLSAI1_Config+0x1d0>)
 8002af2:	691a      	ldr	r2, [r3, #16]
 8002af4:	4b20      	ldr	r3, [pc, #128]	; (8002b78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6892      	ldr	r2, [r2, #8]
 8002afc:	0211      	lsls	r1, r2, #8
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6952      	ldr	r2, [r2, #20]
 8002b02:	0852      	lsrs	r2, r2, #1
 8002b04:	3a01      	subs	r2, #1
 8002b06:	0652      	lsls	r2, r2, #25
 8002b08:	4311      	orrs	r1, r2
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6852      	ldr	r2, [r2, #4]
 8002b0e:	3a01      	subs	r2, #1
 8002b10:	0112      	lsls	r2, r2, #4
 8002b12:	430a      	orrs	r2, r1
 8002b14:	4915      	ldr	r1, [pc, #84]	; (8002b6c <RCCEx_PLLSAI1_Config+0x1d0>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b1a:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <RCCEx_PLLSAI1_Config+0x1d0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a13      	ldr	r2, [pc, #76]	; (8002b6c <RCCEx_PLLSAI1_Config+0x1d0>)
 8002b20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b24:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b26:	f7fe f947 	bl	8000db8 <HAL_GetTick>
 8002b2a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b2c:	e009      	b.n	8002b42 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b2e:	f7fe f943 	bl	8000db8 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d902      	bls.n	8002b42 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	73fb      	strb	r3, [r7, #15]
          break;
 8002b40:	e005      	b.n	8002b4e <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b42:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <RCCEx_PLLSAI1_Config+0x1d0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0ef      	beq.n	8002b2e <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d106      	bne.n	8002b62 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b54:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <RCCEx_PLLSAI1_Config+0x1d0>)
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	4903      	ldr	r1, [pc, #12]	; (8002b6c <RCCEx_PLLSAI1_Config+0x1d0>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	07ff800f 	.word	0x07ff800f
 8002b74:	ff9f800f 	.word	0xff9f800f
 8002b78:	f9ff800f 	.word	0xf9ff800f

08002b7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b8a:	4b70      	ldr	r3, [pc, #448]	; (8002d4c <RCCEx_PLLSAI2_Config+0x1d0>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00e      	beq.n	8002bb4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b96:	4b6d      	ldr	r3, [pc, #436]	; (8002d4c <RCCEx_PLLSAI2_Config+0x1d0>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f003 0203 	and.w	r2, r3, #3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d103      	bne.n	8002bae <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
       ||
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d13f      	bne.n	8002c2e <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	73fb      	strb	r3, [r7, #15]
 8002bb2:	e03c      	b.n	8002c2e <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d00c      	beq.n	8002bd6 <RCCEx_PLLSAI2_Config+0x5a>
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d013      	beq.n	8002be8 <RCCEx_PLLSAI2_Config+0x6c>
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d120      	bne.n	8002c06 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bc4:	4b61      	ldr	r3, [pc, #388]	; (8002d4c <RCCEx_PLLSAI2_Config+0x1d0>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d11d      	bne.n	8002c0c <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd4:	e01a      	b.n	8002c0c <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bd6:	4b5d      	ldr	r3, [pc, #372]	; (8002d4c <RCCEx_PLLSAI2_Config+0x1d0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d116      	bne.n	8002c10 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002be6:	e013      	b.n	8002c10 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002be8:	4b58      	ldr	r3, [pc, #352]	; (8002d4c <RCCEx_PLLSAI2_Config+0x1d0>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10f      	bne.n	8002c14 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bf4:	4b55      	ldr	r3, [pc, #340]	; (8002d4c <RCCEx_PLLSAI2_Config+0x1d0>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d109      	bne.n	8002c14 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c04:	e006      	b.n	8002c14 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	73fb      	strb	r3, [r7, #15]
      break;
 8002c0a:	e004      	b.n	8002c16 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002c0c:	bf00      	nop
 8002c0e:	e002      	b.n	8002c16 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002c10:	bf00      	nop
 8002c12:	e000      	b.n	8002c16 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002c14:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d108      	bne.n	8002c2e <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002c1c:	4b4b      	ldr	r3, [pc, #300]	; (8002d4c <RCCEx_PLLSAI2_Config+0x1d0>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f023 0203 	bic.w	r2, r3, #3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4948      	ldr	r1, [pc, #288]	; (8002d4c <RCCEx_PLLSAI2_Config+0x1d0>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f040 8086 	bne.w	8002d42 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c36:	4b45      	ldr	r3, [pc, #276]	; (8002d4c <RCCEx_PLLSAI2_Config+0x1d0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a44      	ldr	r2, [pc, #272]	; (8002d4c <RCCEx_PLLSAI2_Config+0x1d0>)
 8002c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c42:	f7fe f8b9 	bl	8000db8 <HAL_GetTick>
 8002c46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c48:	e009      	b.n	8002c5e <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c4a:	f7fe f8b5 	bl	8000db8 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d902      	bls.n	8002c5e <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	73fb      	strb	r3, [r7, #15]
        break;
 8002c5c:	e005      	b.n	8002c6a <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c5e:	4b3b      	ldr	r3, [pc, #236]	; (8002d4c <RCCEx_PLLSAI2_Config+0x1d0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1ef      	bne.n	8002c4a <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d168      	bne.n	8002d42 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d113      	bne.n	8002c9e <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c76:	4b35      	ldr	r3, [pc, #212]	; (8002d4c <RCCEx_PLLSAI2_Config+0x1d0>)
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	4b35      	ldr	r3, [pc, #212]	; (8002d50 <RCCEx_PLLSAI2_Config+0x1d4>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6892      	ldr	r2, [r2, #8]
 8002c82:	0211      	lsls	r1, r2, #8
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	68d2      	ldr	r2, [r2, #12]
 8002c88:	06d2      	lsls	r2, r2, #27
 8002c8a:	4311      	orrs	r1, r2
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6852      	ldr	r2, [r2, #4]
 8002c90:	3a01      	subs	r2, #1
 8002c92:	0112      	lsls	r2, r2, #4
 8002c94:	430a      	orrs	r2, r1
 8002c96:	492d      	ldr	r1, [pc, #180]	; (8002d4c <RCCEx_PLLSAI2_Config+0x1d0>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	614b      	str	r3, [r1, #20]
 8002c9c:	e02d      	b.n	8002cfa <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d115      	bne.n	8002cd0 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ca4:	4b29      	ldr	r3, [pc, #164]	; (8002d4c <RCCEx_PLLSAI2_Config+0x1d0>)
 8002ca6:	695a      	ldr	r2, [r3, #20]
 8002ca8:	4b2a      	ldr	r3, [pc, #168]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6892      	ldr	r2, [r2, #8]
 8002cb0:	0211      	lsls	r1, r2, #8
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6912      	ldr	r2, [r2, #16]
 8002cb6:	0852      	lsrs	r2, r2, #1
 8002cb8:	3a01      	subs	r2, #1
 8002cba:	0552      	lsls	r2, r2, #21
 8002cbc:	4311      	orrs	r1, r2
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6852      	ldr	r2, [r2, #4]
 8002cc2:	3a01      	subs	r2, #1
 8002cc4:	0112      	lsls	r2, r2, #4
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	4920      	ldr	r1, [pc, #128]	; (8002d4c <RCCEx_PLLSAI2_Config+0x1d0>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	614b      	str	r3, [r1, #20]
 8002cce:	e014      	b.n	8002cfa <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cd0:	4b1e      	ldr	r3, [pc, #120]	; (8002d4c <RCCEx_PLLSAI2_Config+0x1d0>)
 8002cd2:	695a      	ldr	r2, [r3, #20]
 8002cd4:	4b20      	ldr	r3, [pc, #128]	; (8002d58 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6892      	ldr	r2, [r2, #8]
 8002cdc:	0211      	lsls	r1, r2, #8
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6952      	ldr	r2, [r2, #20]
 8002ce2:	0852      	lsrs	r2, r2, #1
 8002ce4:	3a01      	subs	r2, #1
 8002ce6:	0652      	lsls	r2, r2, #25
 8002ce8:	4311      	orrs	r1, r2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6852      	ldr	r2, [r2, #4]
 8002cee:	3a01      	subs	r2, #1
 8002cf0:	0112      	lsls	r2, r2, #4
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	4915      	ldr	r1, [pc, #84]	; (8002d4c <RCCEx_PLLSAI2_Config+0x1d0>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002cfa:	4b14      	ldr	r3, [pc, #80]	; (8002d4c <RCCEx_PLLSAI2_Config+0x1d0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a13      	ldr	r2, [pc, #76]	; (8002d4c <RCCEx_PLLSAI2_Config+0x1d0>)
 8002d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d04:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d06:	f7fe f857 	bl	8000db8 <HAL_GetTick>
 8002d0a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d0c:	e009      	b.n	8002d22 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d0e:	f7fe f853 	bl	8000db8 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d902      	bls.n	8002d22 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	73fb      	strb	r3, [r7, #15]
          break;
 8002d20:	e005      	b.n	8002d2e <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d22:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <RCCEx_PLLSAI2_Config+0x1d0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0ef      	beq.n	8002d0e <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d106      	bne.n	8002d42 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d34:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <RCCEx_PLLSAI2_Config+0x1d0>)
 8002d36:	695a      	ldr	r2, [r3, #20]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	4903      	ldr	r1, [pc, #12]	; (8002d4c <RCCEx_PLLSAI2_Config+0x1d0>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	07ff800f 	.word	0x07ff800f
 8002d54:	ff9f800f 	.word	0xff9f800f
 8002d58:	f9ff800f 	.word	0xf9ff800f

08002d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e049      	b.n	8002e02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7fd fe6c 	bl	8000a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3304      	adds	r3, #4
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	f000 faa6 	bl	80032ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d001      	beq.n	8002e24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e04f      	b.n	8002ec4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a23      	ldr	r2, [pc, #140]	; (8002ed0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d01d      	beq.n	8002e82 <HAL_TIM_Base_Start_IT+0x76>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e4e:	d018      	beq.n	8002e82 <HAL_TIM_Base_Start_IT+0x76>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a1f      	ldr	r2, [pc, #124]	; (8002ed4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d013      	beq.n	8002e82 <HAL_TIM_Base_Start_IT+0x76>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a1e      	ldr	r2, [pc, #120]	; (8002ed8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d00e      	beq.n	8002e82 <HAL_TIM_Base_Start_IT+0x76>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a1c      	ldr	r2, [pc, #112]	; (8002edc <HAL_TIM_Base_Start_IT+0xd0>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d009      	beq.n	8002e82 <HAL_TIM_Base_Start_IT+0x76>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a1b      	ldr	r2, [pc, #108]	; (8002ee0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d004      	beq.n	8002e82 <HAL_TIM_Base_Start_IT+0x76>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a19      	ldr	r2, [pc, #100]	; (8002ee4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d115      	bne.n	8002eae <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	4b17      	ldr	r3, [pc, #92]	; (8002ee8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2b06      	cmp	r3, #6
 8002e92:	d015      	beq.n	8002ec0 <HAL_TIM_Base_Start_IT+0xb4>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e9a:	d011      	beq.n	8002ec0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eac:	e008      	b.n	8002ec0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f042 0201 	orr.w	r2, r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	e000      	b.n	8002ec2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	40012c00 	.word	0x40012c00
 8002ed4:	40000400 	.word	0x40000400
 8002ed8:	40000800 	.word	0x40000800
 8002edc:	40000c00 	.word	0x40000c00
 8002ee0:	40013400 	.word	0x40013400
 8002ee4:	40014000 	.word	0x40014000
 8002ee8:	00010007 	.word	0x00010007

08002eec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d122      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d11b      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0202 	mvn.w	r2, #2
 8002f18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f9be 	bl	80032b0 <HAL_TIM_IC_CaptureCallback>
 8002f34:	e005      	b.n	8002f42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f9b0 	bl	800329c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f9c1 	bl	80032c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f003 0304 	and.w	r3, r3, #4
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d122      	bne.n	8002f9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d11b      	bne.n	8002f9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0204 	mvn.w	r2, #4
 8002f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2202      	movs	r2, #2
 8002f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f994 	bl	80032b0 <HAL_TIM_IC_CaptureCallback>
 8002f88:	e005      	b.n	8002f96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f986 	bl	800329c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f997 	bl	80032c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d122      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 0308 	and.w	r3, r3, #8
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d11b      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f06f 0208 	mvn.w	r2, #8
 8002fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2204      	movs	r2, #4
 8002fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f96a 	bl	80032b0 <HAL_TIM_IC_CaptureCallback>
 8002fdc:	e005      	b.n	8002fea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f95c 	bl	800329c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f96d 	bl	80032c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f003 0310 	and.w	r3, r3, #16
 8002ffa:	2b10      	cmp	r3, #16
 8002ffc:	d122      	bne.n	8003044 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	2b10      	cmp	r3, #16
 800300a:	d11b      	bne.n	8003044 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0210 	mvn.w	r2, #16
 8003014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2208      	movs	r2, #8
 800301a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f940 	bl	80032b0 <HAL_TIM_IC_CaptureCallback>
 8003030:	e005      	b.n	800303e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f932 	bl	800329c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f943 	bl	80032c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b01      	cmp	r3, #1
 8003050:	d10e      	bne.n	8003070 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b01      	cmp	r3, #1
 800305e:	d107      	bne.n	8003070 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0201 	mvn.w	r2, #1
 8003068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7fd fb22 	bl	80006b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307a:	2b80      	cmp	r3, #128	; 0x80
 800307c:	d10e      	bne.n	800309c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003088:	2b80      	cmp	r3, #128	; 0x80
 800308a:	d107      	bne.n	800309c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 faee 	bl	8003678 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030aa:	d10e      	bne.n	80030ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b6:	2b80      	cmp	r3, #128	; 0x80
 80030b8:	d107      	bne.n	80030ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80030c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 fae1 	bl	800368c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d4:	2b40      	cmp	r3, #64	; 0x40
 80030d6:	d10e      	bne.n	80030f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e2:	2b40      	cmp	r3, #64	; 0x40
 80030e4:	d107      	bne.n	80030f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f8f1 	bl	80032d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	f003 0320 	and.w	r3, r3, #32
 8003100:	2b20      	cmp	r3, #32
 8003102:	d10e      	bne.n	8003122 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f003 0320 	and.w	r3, r3, #32
 800310e:	2b20      	cmp	r3, #32
 8003110:	d107      	bne.n	8003122 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f06f 0220 	mvn.w	r2, #32
 800311a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 faa1 	bl	8003664 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003122:	bf00      	nop
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b084      	sub	sp, #16
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
 8003132:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <HAL_TIM_ConfigClockSource+0x18>
 800313e:	2302      	movs	r3, #2
 8003140:	e0a8      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x16a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2202      	movs	r2, #2
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003160:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003164:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800316c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b40      	cmp	r3, #64	; 0x40
 800317c:	d067      	beq.n	800324e <HAL_TIM_ConfigClockSource+0x124>
 800317e:	2b40      	cmp	r3, #64	; 0x40
 8003180:	d80b      	bhi.n	800319a <HAL_TIM_ConfigClockSource+0x70>
 8003182:	2b10      	cmp	r3, #16
 8003184:	d073      	beq.n	800326e <HAL_TIM_ConfigClockSource+0x144>
 8003186:	2b10      	cmp	r3, #16
 8003188:	d802      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x66>
 800318a:	2b00      	cmp	r3, #0
 800318c:	d06f      	beq.n	800326e <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800318e:	e078      	b.n	8003282 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003190:	2b20      	cmp	r3, #32
 8003192:	d06c      	beq.n	800326e <HAL_TIM_ConfigClockSource+0x144>
 8003194:	2b30      	cmp	r3, #48	; 0x30
 8003196:	d06a      	beq.n	800326e <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003198:	e073      	b.n	8003282 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800319a:	2b70      	cmp	r3, #112	; 0x70
 800319c:	d00d      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0x90>
 800319e:	2b70      	cmp	r3, #112	; 0x70
 80031a0:	d804      	bhi.n	80031ac <HAL_TIM_ConfigClockSource+0x82>
 80031a2:	2b50      	cmp	r3, #80	; 0x50
 80031a4:	d033      	beq.n	800320e <HAL_TIM_ConfigClockSource+0xe4>
 80031a6:	2b60      	cmp	r3, #96	; 0x60
 80031a8:	d041      	beq.n	800322e <HAL_TIM_ConfigClockSource+0x104>
      break;
 80031aa:	e06a      	b.n	8003282 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80031ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b0:	d066      	beq.n	8003280 <HAL_TIM_ConfigClockSource+0x156>
 80031b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031b6:	d017      	beq.n	80031e8 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80031b8:	e063      	b.n	8003282 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	6899      	ldr	r1, [r3, #8]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f000 f9a3 	bl	8003514 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	609a      	str	r2, [r3, #8]
      break;
 80031e6:	e04c      	b.n	8003282 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	6899      	ldr	r1, [r3, #8]
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f000 f98c 	bl	8003514 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800320a:	609a      	str	r2, [r3, #8]
      break;
 800320c:	e039      	b.n	8003282 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6818      	ldr	r0, [r3, #0]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	6859      	ldr	r1, [r3, #4]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	461a      	mov	r2, r3
 800321c:	f000 f900 	bl	8003420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2150      	movs	r1, #80	; 0x50
 8003226:	4618      	mov	r0, r3
 8003228:	f000 f959 	bl	80034de <TIM_ITRx_SetConfig>
      break;
 800322c:	e029      	b.n	8003282 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6818      	ldr	r0, [r3, #0]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	6859      	ldr	r1, [r3, #4]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	461a      	mov	r2, r3
 800323c:	f000 f91f 	bl	800347e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2160      	movs	r1, #96	; 0x60
 8003246:	4618      	mov	r0, r3
 8003248:	f000 f949 	bl	80034de <TIM_ITRx_SetConfig>
      break;
 800324c:	e019      	b.n	8003282 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	6859      	ldr	r1, [r3, #4]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	461a      	mov	r2, r3
 800325c:	f000 f8e0 	bl	8003420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2140      	movs	r1, #64	; 0x40
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f939 	bl	80034de <TIM_ITRx_SetConfig>
      break;
 800326c:	e009      	b.n	8003282 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4619      	mov	r1, r3
 8003278:	4610      	mov	r0, r2
 800327a:	f000 f930 	bl	80034de <TIM_ITRx_SetConfig>
        break;
 800327e:	e000      	b.n	8003282 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003280:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a40      	ldr	r2, [pc, #256]	; (8003400 <TIM_Base_SetConfig+0x114>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d013      	beq.n	800332c <TIM_Base_SetConfig+0x40>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800330a:	d00f      	beq.n	800332c <TIM_Base_SetConfig+0x40>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a3d      	ldr	r2, [pc, #244]	; (8003404 <TIM_Base_SetConfig+0x118>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d00b      	beq.n	800332c <TIM_Base_SetConfig+0x40>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a3c      	ldr	r2, [pc, #240]	; (8003408 <TIM_Base_SetConfig+0x11c>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d007      	beq.n	800332c <TIM_Base_SetConfig+0x40>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a3b      	ldr	r2, [pc, #236]	; (800340c <TIM_Base_SetConfig+0x120>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d003      	beq.n	800332c <TIM_Base_SetConfig+0x40>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a3a      	ldr	r2, [pc, #232]	; (8003410 <TIM_Base_SetConfig+0x124>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d108      	bne.n	800333e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a2f      	ldr	r2, [pc, #188]	; (8003400 <TIM_Base_SetConfig+0x114>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d01f      	beq.n	8003386 <TIM_Base_SetConfig+0x9a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800334c:	d01b      	beq.n	8003386 <TIM_Base_SetConfig+0x9a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a2c      	ldr	r2, [pc, #176]	; (8003404 <TIM_Base_SetConfig+0x118>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d017      	beq.n	8003386 <TIM_Base_SetConfig+0x9a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a2b      	ldr	r2, [pc, #172]	; (8003408 <TIM_Base_SetConfig+0x11c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d013      	beq.n	8003386 <TIM_Base_SetConfig+0x9a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a2a      	ldr	r2, [pc, #168]	; (800340c <TIM_Base_SetConfig+0x120>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00f      	beq.n	8003386 <TIM_Base_SetConfig+0x9a>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a29      	ldr	r2, [pc, #164]	; (8003410 <TIM_Base_SetConfig+0x124>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d00b      	beq.n	8003386 <TIM_Base_SetConfig+0x9a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a28      	ldr	r2, [pc, #160]	; (8003414 <TIM_Base_SetConfig+0x128>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d007      	beq.n	8003386 <TIM_Base_SetConfig+0x9a>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a27      	ldr	r2, [pc, #156]	; (8003418 <TIM_Base_SetConfig+0x12c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d003      	beq.n	8003386 <TIM_Base_SetConfig+0x9a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a26      	ldr	r2, [pc, #152]	; (800341c <TIM_Base_SetConfig+0x130>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d108      	bne.n	8003398 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800338c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	4313      	orrs	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a10      	ldr	r2, [pc, #64]	; (8003400 <TIM_Base_SetConfig+0x114>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d00f      	beq.n	80033e4 <TIM_Base_SetConfig+0xf8>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a12      	ldr	r2, [pc, #72]	; (8003410 <TIM_Base_SetConfig+0x124>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d00b      	beq.n	80033e4 <TIM_Base_SetConfig+0xf8>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a11      	ldr	r2, [pc, #68]	; (8003414 <TIM_Base_SetConfig+0x128>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d007      	beq.n	80033e4 <TIM_Base_SetConfig+0xf8>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a10      	ldr	r2, [pc, #64]	; (8003418 <TIM_Base_SetConfig+0x12c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d003      	beq.n	80033e4 <TIM_Base_SetConfig+0xf8>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a0f      	ldr	r2, [pc, #60]	; (800341c <TIM_Base_SetConfig+0x130>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d103      	bne.n	80033ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	615a      	str	r2, [r3, #20]
}
 80033f2:	bf00      	nop
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40012c00 	.word	0x40012c00
 8003404:	40000400 	.word	0x40000400
 8003408:	40000800 	.word	0x40000800
 800340c:	40000c00 	.word	0x40000c00
 8003410:	40013400 	.word	0x40013400
 8003414:	40014000 	.word	0x40014000
 8003418:	40014400 	.word	0x40014400
 800341c:	40014800 	.word	0x40014800

08003420 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	f023 0201 	bic.w	r2, r3, #1
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800344a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	4313      	orrs	r3, r2
 8003454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f023 030a 	bic.w	r3, r3, #10
 800345c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4313      	orrs	r3, r2
 8003464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	621a      	str	r2, [r3, #32]
}
 8003472:	bf00      	nop
 8003474:	371c      	adds	r7, #28
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800347e:	b480      	push	{r7}
 8003480:	b087      	sub	sp, #28
 8003482:	af00      	add	r7, sp, #0
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	f023 0210 	bic.w	r2, r3, #16
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	031b      	lsls	r3, r3, #12
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	621a      	str	r2, [r3, #32]
}
 80034d2:	bf00      	nop
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034de:	b480      	push	{r7}
 80034e0:	b085      	sub	sp, #20
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f043 0307 	orr.w	r3, r3, #7
 8003500:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	609a      	str	r2, [r3, #8]
}
 8003508:	bf00      	nop
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800352e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	021a      	lsls	r2, r3, #8
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	431a      	orrs	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4313      	orrs	r3, r2
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	4313      	orrs	r3, r2
 8003540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	609a      	str	r2, [r3, #8]
}
 8003548:	bf00      	nop
 800354a:	371c      	adds	r7, #28
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003568:	2302      	movs	r3, #2
 800356a:	e068      	b.n	800363e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a2e      	ldr	r2, [pc, #184]	; (800364c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d004      	beq.n	80035a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a2d      	ldr	r2, [pc, #180]	; (8003650 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d108      	bne.n	80035b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80035a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a1e      	ldr	r2, [pc, #120]	; (800364c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d01d      	beq.n	8003612 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035de:	d018      	beq.n	8003612 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a1b      	ldr	r2, [pc, #108]	; (8003654 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d013      	beq.n	8003612 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a1a      	ldr	r2, [pc, #104]	; (8003658 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00e      	beq.n	8003612 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a18      	ldr	r2, [pc, #96]	; (800365c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d009      	beq.n	8003612 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a13      	ldr	r2, [pc, #76]	; (8003650 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d004      	beq.n	8003612 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a14      	ldr	r2, [pc, #80]	; (8003660 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d10c      	bne.n	800362c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003618:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	4313      	orrs	r3, r2
 8003622:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40012c00 	.word	0x40012c00
 8003650:	40013400 	.word	0x40013400
 8003654:	40000400 	.word	0x40000400
 8003658:	40000800 	.word	0x40000800
 800365c:	40000c00 	.word	0x40000c00
 8003660:	40014000 	.word	0x40014000

08003664 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e042      	b.n	8003738 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d106      	bne.n	80036ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7fd f9ef 	bl	8000aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2224      	movs	r2, #36	; 0x24
 80036ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0201 	bic.w	r2, r2, #1
 80036e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fb28 	bl	8003d38 <UART_SetConfig>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d101      	bne.n	80036f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e022      	b.n	8003738 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 fdee 	bl	80042dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800370e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800371e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0201 	orr.w	r2, r2, #1
 800372e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 fe75 	bl	8004420 <UART_CheckIdleState>
 8003736:	4603      	mov	r3, r0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08a      	sub	sp, #40	; 0x28
 8003744:	af02      	add	r7, sp, #8
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	603b      	str	r3, [r7, #0]
 800374c:	4613      	mov	r3, r2
 800374e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003756:	2b20      	cmp	r3, #32
 8003758:	f040 8084 	bne.w	8003864 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <HAL_UART_Transmit+0x28>
 8003762:	88fb      	ldrh	r3, [r7, #6]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e07c      	b.n	8003866 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_UART_Transmit+0x3a>
 8003776:	2302      	movs	r3, #2
 8003778:	e075      	b.n	8003866 <HAL_UART_Transmit+0x126>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2221      	movs	r2, #33	; 0x21
 800378e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003792:	f7fd fb11 	bl	8000db8 <HAL_GetTick>
 8003796:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	88fa      	ldrh	r2, [r7, #6]
 800379c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	88fa      	ldrh	r2, [r7, #6]
 80037a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b0:	d108      	bne.n	80037c4 <HAL_UART_Transmit+0x84>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d104      	bne.n	80037c4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	61bb      	str	r3, [r7, #24]
 80037c2:	e003      	b.n	80037cc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037c8:	2300      	movs	r3, #0
 80037ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80037d4:	e02d      	b.n	8003832 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2200      	movs	r2, #0
 80037de:	2180      	movs	r1, #128	; 0x80
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 fe65 	bl	80044b0 <UART_WaitOnFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e03a      	b.n	8003866 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10b      	bne.n	800380e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	881a      	ldrh	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003802:	b292      	uxth	r2, r2
 8003804:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	3302      	adds	r3, #2
 800380a:	61bb      	str	r3, [r7, #24]
 800380c:	e008      	b.n	8003820 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	781a      	ldrb	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	b292      	uxth	r2, r2
 8003818:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	3301      	adds	r3, #1
 800381e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1cb      	bne.n	80037d6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2200      	movs	r2, #0
 8003846:	2140      	movs	r1, #64	; 0x40
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 fe31 	bl	80044b0 <UART_WaitOnFlagUntilTimeout>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e006      	b.n	8003866 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2220      	movs	r2, #32
 800385c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	e000      	b.n	8003866 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003864:	2302      	movs	r3, #2
  }
}
 8003866:	4618      	mov	r0, r3
 8003868:	3720      	adds	r7, #32
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b08a      	sub	sp, #40	; 0x28
 8003872:	af02      	add	r7, sp, #8
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	603b      	str	r3, [r7, #0]
 800387a:	4613      	mov	r3, r2
 800387c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003884:	2b20      	cmp	r3, #32
 8003886:	f040 80be 	bne.w	8003a06 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <HAL_UART_Receive+0x28>
 8003890:	88fb      	ldrh	r3, [r7, #6]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e0b6      	b.n	8003a08 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <HAL_UART_Receive+0x3a>
 80038a4:	2302      	movs	r3, #2
 80038a6:	e0af      	b.n	8003a08 <HAL_UART_Receive+0x19a>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2222      	movs	r2, #34	; 0x22
 80038bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80038c0:	f7fd fa7a 	bl	8000db8 <HAL_GetTick>
 80038c4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	88fa      	ldrh	r2, [r7, #6]
 80038ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	88fa      	ldrh	r2, [r7, #6]
 80038d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038de:	d10e      	bne.n	80038fe <HAL_UART_Receive+0x90>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d105      	bne.n	80038f4 <HAL_UART_Receive+0x86>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f240 12ff 	movw	r2, #511	; 0x1ff
 80038ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80038f2:	e02d      	b.n	8003950 <HAL_UART_Receive+0xe2>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	22ff      	movs	r2, #255	; 0xff
 80038f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80038fc:	e028      	b.n	8003950 <HAL_UART_Receive+0xe2>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10d      	bne.n	8003922 <HAL_UART_Receive+0xb4>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d104      	bne.n	8003918 <HAL_UART_Receive+0xaa>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	22ff      	movs	r2, #255	; 0xff
 8003912:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003916:	e01b      	b.n	8003950 <HAL_UART_Receive+0xe2>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	227f      	movs	r2, #127	; 0x7f
 800391c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003920:	e016      	b.n	8003950 <HAL_UART_Receive+0xe2>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800392a:	d10d      	bne.n	8003948 <HAL_UART_Receive+0xda>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d104      	bne.n	800393e <HAL_UART_Receive+0xd0>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	227f      	movs	r2, #127	; 0x7f
 8003938:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800393c:	e008      	b.n	8003950 <HAL_UART_Receive+0xe2>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	223f      	movs	r2, #63	; 0x3f
 8003942:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003946:	e003      	b.n	8003950 <HAL_UART_Receive+0xe2>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003956:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003960:	d108      	bne.n	8003974 <HAL_UART_Receive+0x106>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d104      	bne.n	8003974 <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 800396a:	2300      	movs	r3, #0
 800396c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	61bb      	str	r3, [r7, #24]
 8003972:	e003      	b.n	800397c <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003978:	2300      	movs	r3, #0
 800397a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003984:	e033      	b.n	80039ee <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2200      	movs	r2, #0
 800398e:	2120      	movs	r1, #32
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 fd8d 	bl	80044b0 <UART_WaitOnFlagUntilTimeout>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <HAL_UART_Receive+0x132>
      {
        return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e033      	b.n	8003a08 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10c      	bne.n	80039c0 <HAL_UART_Receive+0x152>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	8a7b      	ldrh	r3, [r7, #18]
 80039b0:	4013      	ands	r3, r2
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	3302      	adds	r3, #2
 80039bc:	61bb      	str	r3, [r7, #24]
 80039be:	e00d      	b.n	80039dc <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	8a7b      	ldrh	r3, [r7, #18]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	4013      	ands	r3, r2
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	3301      	adds	r3, #1
 80039da:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1c5      	bne.n	8003986 <HAL_UART_Receive+0x118>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	e000      	b.n	8003a08 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003a06:	2302      	movs	r3, #2
  }
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3720      	adds	r7, #32
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a30:	69fa      	ldr	r2, [r7, #28]
 8003a32:	f640 030f 	movw	r3, #2063	; 0x80f
 8003a36:	4013      	ands	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d118      	bne.n	8003a72 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d013      	beq.n	8003a72 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	f003 0320 	and.w	r3, r3, #32
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d104      	bne.n	8003a5e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d009      	beq.n	8003a72 <HAL_UART_IRQHandler+0x62>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 8145 	beq.w	8003cf2 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	4798      	blx	r3
      }
      return;
 8003a70:	e13f      	b.n	8003cf2 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80e8 	beq.w	8003c4a <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	4ba1      	ldr	r3, [pc, #644]	; (8003d04 <HAL_UART_IRQHandler+0x2f4>)
 8003a7e:	4013      	ands	r3, r2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d105      	bne.n	8003a90 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	4ba0      	ldr	r3, [pc, #640]	; (8003d08 <HAL_UART_IRQHandler+0x2f8>)
 8003a88:	4013      	ands	r3, r2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 80dd 	beq.w	8003c4a <HAL_UART_IRQHandler+0x23a>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d010      	beq.n	8003abc <HAL_UART_IRQHandler+0xac>
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00b      	beq.n	8003abc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab2:	f043 0201 	orr.w	r2, r3, #1
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d010      	beq.n	8003ae8 <HAL_UART_IRQHandler+0xd8>
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00b      	beq.n	8003ae8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ade:	f043 0204 	orr.w	r2, r3, #4
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d010      	beq.n	8003b14 <HAL_UART_IRQHandler+0x104>
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00b      	beq.n	8003b14 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2204      	movs	r2, #4
 8003b02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0a:	f043 0202 	orr.w	r2, r3, #2
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d015      	beq.n	8003b4a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d104      	bne.n	8003b32 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	4b76      	ldr	r3, [pc, #472]	; (8003d04 <HAL_UART_IRQHandler+0x2f4>)
 8003b2c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00b      	beq.n	8003b4a <HAL_UART_IRQHandler+0x13a>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2208      	movs	r2, #8
 8003b38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b40:	f043 0208 	orr.w	r2, r3, #8
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d011      	beq.n	8003b78 <HAL_UART_IRQHandler+0x168>
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00c      	beq.n	8003b78 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6e:	f043 0220 	orr.w	r2, r3, #32
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 80b9 	beq.w	8003cf6 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f003 0320 	and.w	r3, r3, #32
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d011      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	f003 0320 	and.w	r3, r3, #32
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d104      	bne.n	8003ba2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d007      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x1a2>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc4:	2b40      	cmp	r3, #64	; 0x40
 8003bc6:	d004      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d031      	beq.n	8003c36 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fcec 	bl	80045b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be2:	2b40      	cmp	r3, #64	; 0x40
 8003be4:	d123      	bne.n	8003c2e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bf4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d013      	beq.n	8003c26 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c02:	4a42      	ldr	r2, [pc, #264]	; (8003d0c <HAL_UART_IRQHandler+0x2fc>)
 8003c04:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fd fa13 	bl	8001036 <HAL_DMA_Abort_IT>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d017      	beq.n	8003c46 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8003c20:	4610      	mov	r0, r2
 8003c22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c24:	e00f      	b.n	8003c46 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f87c 	bl	8003d24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c2c:	e00b      	b.n	8003c46 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f878 	bl	8003d24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c34:	e007      	b.n	8003c46 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f874 	bl	8003d24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8003c44:	e057      	b.n	8003cf6 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c46:	bf00      	nop
    return;
 8003c48:	e055      	b.n	8003cf6 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00d      	beq.n	8003c70 <HAL_UART_IRQHandler+0x260>
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d008      	beq.n	8003c70 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 fcf4 	bl	8004656 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c6e:	e045      	b.n	8003cfc <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d012      	beq.n	8003ca0 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d104      	bne.n	8003c8e <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d008      	beq.n	8003ca0 <HAL_UART_IRQHandler+0x290>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d031      	beq.n	8003cfa <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	4798      	blx	r3
    }
    return;
 8003c9e:	e02c      	b.n	8003cfa <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d008      	beq.n	8003cbc <HAL_UART_IRQHandler+0x2ac>
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 fcb4 	bl	8004622 <UART_EndTransmit_IT>
    return;
 8003cba:	e01f      	b.n	8003cfc <HAL_UART_IRQHandler+0x2ec>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d008      	beq.n	8003cd8 <HAL_UART_IRQHandler+0x2c8>
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 fcd4 	bl	800467e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003cd6:	e011      	b.n	8003cfc <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00c      	beq.n	8003cfc <HAL_UART_IRQHandler+0x2ec>
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	da09      	bge.n	8003cfc <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fcbe 	bl	800466a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003cee:	bf00      	nop
 8003cf0:	e004      	b.n	8003cfc <HAL_UART_IRQHandler+0x2ec>
      return;
 8003cf2:	bf00      	nop
 8003cf4:	e002      	b.n	8003cfc <HAL_UART_IRQHandler+0x2ec>
    return;
 8003cf6:	bf00      	nop
 8003cf8:	e000      	b.n	8003cfc <HAL_UART_IRQHandler+0x2ec>
    return;
 8003cfa:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8003cfc:	3720      	adds	r7, #32
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	10000001 	.word	0x10000001
 8003d08:	04000120 	.word	0x04000120
 8003d0c:	080045f7 	.word	0x080045f7

08003d10 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d38:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003d3c:	b088      	sub	sp, #32
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	431a      	orrs	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d62:	69fa      	ldr	r2, [r7, #28]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	4bb1      	ldr	r3, [pc, #708]	; (8004034 <UART_SetConfig+0x2fc>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6812      	ldr	r2, [r2, #0]
 8003d76:	69f9      	ldr	r1, [r7, #28]
 8003d78:	430b      	orrs	r3, r1
 8003d7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4aa6      	ldr	r2, [pc, #664]	; (8004038 <UART_SetConfig+0x300>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d004      	beq.n	8003dac <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003db6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6812      	ldr	r2, [r2, #0]
 8003dbe:	69f9      	ldr	r1, [r7, #28]
 8003dc0:	430b      	orrs	r3, r1
 8003dc2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dca:	f023 010f 	bic.w	r1, r3, #15
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a97      	ldr	r2, [pc, #604]	; (800403c <UART_SetConfig+0x304>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d121      	bne.n	8003e28 <UART_SetConfig+0xf0>
 8003de4:	4b96      	ldr	r3, [pc, #600]	; (8004040 <UART_SetConfig+0x308>)
 8003de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	2b03      	cmp	r3, #3
 8003df0:	d816      	bhi.n	8003e20 <UART_SetConfig+0xe8>
 8003df2:	a201      	add	r2, pc, #4	; (adr r2, 8003df8 <UART_SetConfig+0xc0>)
 8003df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df8:	08003e09 	.word	0x08003e09
 8003dfc:	08003e15 	.word	0x08003e15
 8003e00:	08003e0f 	.word	0x08003e0f
 8003e04:	08003e1b 	.word	0x08003e1b
 8003e08:	2301      	movs	r3, #1
 8003e0a:	76fb      	strb	r3, [r7, #27]
 8003e0c:	e0e8      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	76fb      	strb	r3, [r7, #27]
 8003e12:	e0e5      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003e14:	2304      	movs	r3, #4
 8003e16:	76fb      	strb	r3, [r7, #27]
 8003e18:	e0e2      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003e1a:	2308      	movs	r3, #8
 8003e1c:	76fb      	strb	r3, [r7, #27]
 8003e1e:	e0df      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003e20:	2310      	movs	r3, #16
 8003e22:	76fb      	strb	r3, [r7, #27]
 8003e24:	bf00      	nop
 8003e26:	e0db      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a85      	ldr	r2, [pc, #532]	; (8004044 <UART_SetConfig+0x30c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d134      	bne.n	8003e9c <UART_SetConfig+0x164>
 8003e32:	4b83      	ldr	r3, [pc, #524]	; (8004040 <UART_SetConfig+0x308>)
 8003e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e38:	f003 030c 	and.w	r3, r3, #12
 8003e3c:	2b0c      	cmp	r3, #12
 8003e3e:	d829      	bhi.n	8003e94 <UART_SetConfig+0x15c>
 8003e40:	a201      	add	r2, pc, #4	; (adr r2, 8003e48 <UART_SetConfig+0x110>)
 8003e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e46:	bf00      	nop
 8003e48:	08003e7d 	.word	0x08003e7d
 8003e4c:	08003e95 	.word	0x08003e95
 8003e50:	08003e95 	.word	0x08003e95
 8003e54:	08003e95 	.word	0x08003e95
 8003e58:	08003e89 	.word	0x08003e89
 8003e5c:	08003e95 	.word	0x08003e95
 8003e60:	08003e95 	.word	0x08003e95
 8003e64:	08003e95 	.word	0x08003e95
 8003e68:	08003e83 	.word	0x08003e83
 8003e6c:	08003e95 	.word	0x08003e95
 8003e70:	08003e95 	.word	0x08003e95
 8003e74:	08003e95 	.word	0x08003e95
 8003e78:	08003e8f 	.word	0x08003e8f
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	76fb      	strb	r3, [r7, #27]
 8003e80:	e0ae      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003e82:	2302      	movs	r3, #2
 8003e84:	76fb      	strb	r3, [r7, #27]
 8003e86:	e0ab      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003e88:	2304      	movs	r3, #4
 8003e8a:	76fb      	strb	r3, [r7, #27]
 8003e8c:	e0a8      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003e8e:	2308      	movs	r3, #8
 8003e90:	76fb      	strb	r3, [r7, #27]
 8003e92:	e0a5      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003e94:	2310      	movs	r3, #16
 8003e96:	76fb      	strb	r3, [r7, #27]
 8003e98:	bf00      	nop
 8003e9a:	e0a1      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a69      	ldr	r2, [pc, #420]	; (8004048 <UART_SetConfig+0x310>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d120      	bne.n	8003ee8 <UART_SetConfig+0x1b0>
 8003ea6:	4b66      	ldr	r3, [pc, #408]	; (8004040 <UART_SetConfig+0x308>)
 8003ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003eb0:	2b10      	cmp	r3, #16
 8003eb2:	d00f      	beq.n	8003ed4 <UART_SetConfig+0x19c>
 8003eb4:	2b10      	cmp	r3, #16
 8003eb6:	d802      	bhi.n	8003ebe <UART_SetConfig+0x186>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <UART_SetConfig+0x190>
 8003ebc:	e010      	b.n	8003ee0 <UART_SetConfig+0x1a8>
 8003ebe:	2b20      	cmp	r3, #32
 8003ec0:	d005      	beq.n	8003ece <UART_SetConfig+0x196>
 8003ec2:	2b30      	cmp	r3, #48	; 0x30
 8003ec4:	d009      	beq.n	8003eda <UART_SetConfig+0x1a2>
 8003ec6:	e00b      	b.n	8003ee0 <UART_SetConfig+0x1a8>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	76fb      	strb	r3, [r7, #27]
 8003ecc:	e088      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	76fb      	strb	r3, [r7, #27]
 8003ed2:	e085      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003ed4:	2304      	movs	r3, #4
 8003ed6:	76fb      	strb	r3, [r7, #27]
 8003ed8:	e082      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003eda:	2308      	movs	r3, #8
 8003edc:	76fb      	strb	r3, [r7, #27]
 8003ede:	e07f      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003ee0:	2310      	movs	r3, #16
 8003ee2:	76fb      	strb	r3, [r7, #27]
 8003ee4:	bf00      	nop
 8003ee6:	e07b      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a57      	ldr	r2, [pc, #348]	; (800404c <UART_SetConfig+0x314>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d120      	bne.n	8003f34 <UART_SetConfig+0x1fc>
 8003ef2:	4b53      	ldr	r3, [pc, #332]	; (8004040 <UART_SetConfig+0x308>)
 8003ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003efc:	2b40      	cmp	r3, #64	; 0x40
 8003efe:	d00f      	beq.n	8003f20 <UART_SetConfig+0x1e8>
 8003f00:	2b40      	cmp	r3, #64	; 0x40
 8003f02:	d802      	bhi.n	8003f0a <UART_SetConfig+0x1d2>
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d005      	beq.n	8003f14 <UART_SetConfig+0x1dc>
 8003f08:	e010      	b.n	8003f2c <UART_SetConfig+0x1f4>
 8003f0a:	2b80      	cmp	r3, #128	; 0x80
 8003f0c:	d005      	beq.n	8003f1a <UART_SetConfig+0x1e2>
 8003f0e:	2bc0      	cmp	r3, #192	; 0xc0
 8003f10:	d009      	beq.n	8003f26 <UART_SetConfig+0x1ee>
 8003f12:	e00b      	b.n	8003f2c <UART_SetConfig+0x1f4>
 8003f14:	2300      	movs	r3, #0
 8003f16:	76fb      	strb	r3, [r7, #27]
 8003f18:	e062      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	76fb      	strb	r3, [r7, #27]
 8003f1e:	e05f      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003f20:	2304      	movs	r3, #4
 8003f22:	76fb      	strb	r3, [r7, #27]
 8003f24:	e05c      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003f26:	2308      	movs	r3, #8
 8003f28:	76fb      	strb	r3, [r7, #27]
 8003f2a:	e059      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003f2c:	2310      	movs	r3, #16
 8003f2e:	76fb      	strb	r3, [r7, #27]
 8003f30:	bf00      	nop
 8003f32:	e055      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a45      	ldr	r2, [pc, #276]	; (8004050 <UART_SetConfig+0x318>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d124      	bne.n	8003f88 <UART_SetConfig+0x250>
 8003f3e:	4b40      	ldr	r3, [pc, #256]	; (8004040 <UART_SetConfig+0x308>)
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f4c:	d012      	beq.n	8003f74 <UART_SetConfig+0x23c>
 8003f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f52:	d802      	bhi.n	8003f5a <UART_SetConfig+0x222>
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d007      	beq.n	8003f68 <UART_SetConfig+0x230>
 8003f58:	e012      	b.n	8003f80 <UART_SetConfig+0x248>
 8003f5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f5e:	d006      	beq.n	8003f6e <UART_SetConfig+0x236>
 8003f60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f64:	d009      	beq.n	8003f7a <UART_SetConfig+0x242>
 8003f66:	e00b      	b.n	8003f80 <UART_SetConfig+0x248>
 8003f68:	2300      	movs	r3, #0
 8003f6a:	76fb      	strb	r3, [r7, #27]
 8003f6c:	e038      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	76fb      	strb	r3, [r7, #27]
 8003f72:	e035      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003f74:	2304      	movs	r3, #4
 8003f76:	76fb      	strb	r3, [r7, #27]
 8003f78:	e032      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003f7a:	2308      	movs	r3, #8
 8003f7c:	76fb      	strb	r3, [r7, #27]
 8003f7e:	e02f      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003f80:	2310      	movs	r3, #16
 8003f82:	76fb      	strb	r3, [r7, #27]
 8003f84:	bf00      	nop
 8003f86:	e02b      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a2a      	ldr	r2, [pc, #168]	; (8004038 <UART_SetConfig+0x300>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d124      	bne.n	8003fdc <UART_SetConfig+0x2a4>
 8003f92:	4b2b      	ldr	r3, [pc, #172]	; (8004040 <UART_SetConfig+0x308>)
 8003f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa0:	d012      	beq.n	8003fc8 <UART_SetConfig+0x290>
 8003fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa6:	d802      	bhi.n	8003fae <UART_SetConfig+0x276>
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d007      	beq.n	8003fbc <UART_SetConfig+0x284>
 8003fac:	e012      	b.n	8003fd4 <UART_SetConfig+0x29c>
 8003fae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fb2:	d006      	beq.n	8003fc2 <UART_SetConfig+0x28a>
 8003fb4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fb8:	d009      	beq.n	8003fce <UART_SetConfig+0x296>
 8003fba:	e00b      	b.n	8003fd4 <UART_SetConfig+0x29c>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	76fb      	strb	r3, [r7, #27]
 8003fc0:	e00e      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	76fb      	strb	r3, [r7, #27]
 8003fc6:	e00b      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003fc8:	2304      	movs	r3, #4
 8003fca:	76fb      	strb	r3, [r7, #27]
 8003fcc:	e008      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003fce:	2308      	movs	r3, #8
 8003fd0:	76fb      	strb	r3, [r7, #27]
 8003fd2:	e005      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003fd4:	2310      	movs	r3, #16
 8003fd6:	76fb      	strb	r3, [r7, #27]
 8003fd8:	bf00      	nop
 8003fda:	e001      	b.n	8003fe0 <UART_SetConfig+0x2a8>
 8003fdc:	2310      	movs	r3, #16
 8003fde:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a14      	ldr	r2, [pc, #80]	; (8004038 <UART_SetConfig+0x300>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	f040 80a1 	bne.w	800412e <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fec:	7efb      	ldrb	r3, [r7, #27]
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d836      	bhi.n	8004060 <UART_SetConfig+0x328>
 8003ff2:	a201      	add	r2, pc, #4	; (adr r2, 8003ff8 <UART_SetConfig+0x2c0>)
 8003ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff8:	0800401d 	.word	0x0800401d
 8003ffc:	08004061 	.word	0x08004061
 8004000:	08004025 	.word	0x08004025
 8004004:	08004061 	.word	0x08004061
 8004008:	0800402b 	.word	0x0800402b
 800400c:	08004061 	.word	0x08004061
 8004010:	08004061 	.word	0x08004061
 8004014:	08004061 	.word	0x08004061
 8004018:	08004059 	.word	0x08004059
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800401c:	f7fe f8a8 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 8004020:	6178      	str	r0, [r7, #20]
        break;
 8004022:	e022      	b.n	800406a <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004024:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <UART_SetConfig+0x31c>)
 8004026:	617b      	str	r3, [r7, #20]
        break;
 8004028:	e01f      	b.n	800406a <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800402a:	f7fe f80b 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 800402e:	6178      	str	r0, [r7, #20]
        break;
 8004030:	e01b      	b.n	800406a <UART_SetConfig+0x332>
 8004032:	bf00      	nop
 8004034:	cfff69f3 	.word	0xcfff69f3
 8004038:	40008000 	.word	0x40008000
 800403c:	40013800 	.word	0x40013800
 8004040:	40021000 	.word	0x40021000
 8004044:	40004400 	.word	0x40004400
 8004048:	40004800 	.word	0x40004800
 800404c:	40004c00 	.word	0x40004c00
 8004050:	40005000 	.word	0x40005000
 8004054:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004058:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800405c:	617b      	str	r3, [r7, #20]
        break;
 800405e:	e004      	b.n	800406a <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	76bb      	strb	r3, [r7, #26]
        break;
 8004068:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 811d 	beq.w	80042ac <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	4a97      	ldr	r2, [pc, #604]	; (80042d4 <UART_SetConfig+0x59c>)
 8004078:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800407c:	461a      	mov	r2, r3
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	fbb3 f3f2 	udiv	r3, r3, r2
 8004084:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	4413      	add	r3, r2
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	429a      	cmp	r2, r3
 8004094:	d305      	bcc.n	80040a2 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d902      	bls.n	80040a8 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	76bb      	strb	r3, [r7, #26]
 80040a6:	e101      	b.n	80042ac <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f04f 0100 	mov.w	r1, #0
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	4a87      	ldr	r2, [pc, #540]	; (80042d4 <UART_SetConfig+0x59c>)
 80040b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	f04f 0400 	mov.w	r4, #0
 80040c0:	461a      	mov	r2, r3
 80040c2:	4623      	mov	r3, r4
 80040c4:	f7fc f8ec 	bl	80002a0 <__aeabi_uldivmod>
 80040c8:	4603      	mov	r3, r0
 80040ca:	460c      	mov	r4, r1
 80040cc:	4619      	mov	r1, r3
 80040ce:	4622      	mov	r2, r4
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	f04f 0400 	mov.w	r4, #0
 80040d8:	0214      	lsls	r4, r2, #8
 80040da:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80040de:	020b      	lsls	r3, r1, #8
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6852      	ldr	r2, [r2, #4]
 80040e4:	0852      	lsrs	r2, r2, #1
 80040e6:	4611      	mov	r1, r2
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	eb13 0b01 	adds.w	fp, r3, r1
 80040f0:	eb44 0c02 	adc.w	ip, r4, r2
 80040f4:	4658      	mov	r0, fp
 80040f6:	4661      	mov	r1, ip
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f04f 0400 	mov.w	r4, #0
 8004100:	461a      	mov	r2, r3
 8004102:	4623      	mov	r3, r4
 8004104:	f7fc f8cc 	bl	80002a0 <__aeabi_uldivmod>
 8004108:	4603      	mov	r3, r0
 800410a:	460c      	mov	r4, r1
 800410c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004114:	d308      	bcc.n	8004128 <UART_SetConfig+0x3f0>
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800411c:	d204      	bcs.n	8004128 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	60da      	str	r2, [r3, #12]
 8004126:	e0c1      	b.n	80042ac <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	76bb      	strb	r3, [r7, #26]
 800412c:	e0be      	b.n	80042ac <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004136:	d164      	bne.n	8004202 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8004138:	7efb      	ldrb	r3, [r7, #27]
 800413a:	2b08      	cmp	r3, #8
 800413c:	d827      	bhi.n	800418e <UART_SetConfig+0x456>
 800413e:	a201      	add	r2, pc, #4	; (adr r2, 8004144 <UART_SetConfig+0x40c>)
 8004140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004144:	08004169 	.word	0x08004169
 8004148:	08004171 	.word	0x08004171
 800414c:	08004179 	.word	0x08004179
 8004150:	0800418f 	.word	0x0800418f
 8004154:	0800417f 	.word	0x0800417f
 8004158:	0800418f 	.word	0x0800418f
 800415c:	0800418f 	.word	0x0800418f
 8004160:	0800418f 	.word	0x0800418f
 8004164:	08004187 	.word	0x08004187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004168:	f7fe f802 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 800416c:	6178      	str	r0, [r7, #20]
        break;
 800416e:	e013      	b.n	8004198 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004170:	f7fe f814 	bl	800219c <HAL_RCC_GetPCLK2Freq>
 8004174:	6178      	str	r0, [r7, #20]
        break;
 8004176:	e00f      	b.n	8004198 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004178:	4b57      	ldr	r3, [pc, #348]	; (80042d8 <UART_SetConfig+0x5a0>)
 800417a:	617b      	str	r3, [r7, #20]
        break;
 800417c:	e00c      	b.n	8004198 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800417e:	f7fd ff61 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8004182:	6178      	str	r0, [r7, #20]
        break;
 8004184:	e008      	b.n	8004198 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800418a:	617b      	str	r3, [r7, #20]
        break;
 800418c:	e004      	b.n	8004198 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 800418e:	2300      	movs	r3, #0
 8004190:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	76bb      	strb	r3, [r7, #26]
        break;
 8004196:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 8086 	beq.w	80042ac <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	4a4b      	ldr	r2, [pc, #300]	; (80042d4 <UART_SetConfig+0x59c>)
 80041a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041aa:	461a      	mov	r2, r3
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80041b2:	005a      	lsls	r2, r3, #1
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	085b      	lsrs	r3, r3, #1
 80041ba:	441a      	add	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	2b0f      	cmp	r3, #15
 80041cc:	d916      	bls.n	80041fc <UART_SetConfig+0x4c4>
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d4:	d212      	bcs.n	80041fc <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	b29b      	uxth	r3, r3
 80041da:	f023 030f 	bic.w	r3, r3, #15
 80041de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	085b      	lsrs	r3, r3, #1
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	89fb      	ldrh	r3, [r7, #14]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	89fa      	ldrh	r2, [r7, #14]
 80041f8:	60da      	str	r2, [r3, #12]
 80041fa:	e057      	b.n	80042ac <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	76bb      	strb	r3, [r7, #26]
 8004200:	e054      	b.n	80042ac <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004202:	7efb      	ldrb	r3, [r7, #27]
 8004204:	2b08      	cmp	r3, #8
 8004206:	d828      	bhi.n	800425a <UART_SetConfig+0x522>
 8004208:	a201      	add	r2, pc, #4	; (adr r2, 8004210 <UART_SetConfig+0x4d8>)
 800420a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420e:	bf00      	nop
 8004210:	08004235 	.word	0x08004235
 8004214:	0800423d 	.word	0x0800423d
 8004218:	08004245 	.word	0x08004245
 800421c:	0800425b 	.word	0x0800425b
 8004220:	0800424b 	.word	0x0800424b
 8004224:	0800425b 	.word	0x0800425b
 8004228:	0800425b 	.word	0x0800425b
 800422c:	0800425b 	.word	0x0800425b
 8004230:	08004253 	.word	0x08004253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004234:	f7fd ff9c 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 8004238:	6178      	str	r0, [r7, #20]
        break;
 800423a:	e013      	b.n	8004264 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800423c:	f7fd ffae 	bl	800219c <HAL_RCC_GetPCLK2Freq>
 8004240:	6178      	str	r0, [r7, #20]
        break;
 8004242:	e00f      	b.n	8004264 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004244:	4b24      	ldr	r3, [pc, #144]	; (80042d8 <UART_SetConfig+0x5a0>)
 8004246:	617b      	str	r3, [r7, #20]
        break;
 8004248:	e00c      	b.n	8004264 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800424a:	f7fd fefb 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 800424e:	6178      	str	r0, [r7, #20]
        break;
 8004250:	e008      	b.n	8004264 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004256:	617b      	str	r3, [r7, #20]
        break;
 8004258:	e004      	b.n	8004264 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 800425a:	2300      	movs	r3, #0
 800425c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	76bb      	strb	r3, [r7, #26]
        break;
 8004262:	bf00      	nop
    }

    if (pclk != 0U)
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d020      	beq.n	80042ac <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	4a19      	ldr	r2, [pc, #100]	; (80042d4 <UART_SetConfig+0x59c>)
 8004270:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004274:	461a      	mov	r2, r3
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	fbb3 f2f2 	udiv	r2, r3, r2
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	085b      	lsrs	r3, r3, #1
 8004282:	441a      	add	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	fbb2 f3f3 	udiv	r3, r2, r3
 800428c:	b29b      	uxth	r3, r3
 800428e:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	2b0f      	cmp	r3, #15
 8004294:	d908      	bls.n	80042a8 <UART_SetConfig+0x570>
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429c:	d204      	bcs.n	80042a8 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	60da      	str	r2, [r3, #12]
 80042a6:	e001      	b.n	80042ac <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80042c8:	7ebb      	ldrb	r3, [r7, #26]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3720      	adds	r7, #32
 80042ce:	46bd      	mov	sp, r7
 80042d0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80042d4:	08005448 	.word	0x08005448
 80042d8:	00f42400 	.word	0x00f42400

080042dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00a      	beq.n	8004306 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00a      	beq.n	800434a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	f003 0310 	and.w	r3, r3, #16
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00a      	beq.n	800438e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d01a      	beq.n	80043f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043da:	d10a      	bne.n	80043f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	605a      	str	r2, [r3, #4]
  }
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af02      	add	r7, sp, #8
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004430:	f7fc fcc2 	bl	8000db8 <HAL_GetTick>
 8004434:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0308 	and.w	r3, r3, #8
 8004440:	2b08      	cmp	r3, #8
 8004442:	d10e      	bne.n	8004462 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004444:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f82c 	bl	80044b0 <UART_WaitOnFlagUntilTimeout>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e022      	b.n	80044a8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b04      	cmp	r3, #4
 800446e:	d10e      	bne.n	800448e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004470:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f816 	bl	80044b0 <UART_WaitOnFlagUntilTimeout>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e00c      	b.n	80044a8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2220      	movs	r2, #32
 8004492:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2220      	movs	r2, #32
 800449a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	603b      	str	r3, [r7, #0]
 80044bc:	4613      	mov	r3, r2
 80044be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044c0:	e062      	b.n	8004588 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044c8:	d05e      	beq.n	8004588 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ca:	f7fc fc75 	bl	8000db8 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d302      	bcc.n	80044e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d11d      	bne.n	800451c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044ee:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689a      	ldr	r2, [r3, #8]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0201 	bic.w	r2, r2, #1
 80044fe:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2220      	movs	r2, #32
 8004504:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2220      	movs	r2, #32
 800450c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e045      	b.n	80045a8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0304 	and.w	r3, r3, #4
 8004526:	2b00      	cmp	r3, #0
 8004528:	d02e      	beq.n	8004588 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004538:	d126      	bne.n	8004588 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004542:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004552:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689a      	ldr	r2, [r3, #8]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0201 	bic.w	r2, r2, #1
 8004562:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2220      	movs	r2, #32
 8004568:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2220      	movs	r2, #32
 8004570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e00f      	b.n	80045a8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	69da      	ldr	r2, [r3, #28]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	4013      	ands	r3, r2
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	429a      	cmp	r2, r3
 8004596:	bf0c      	ite	eq
 8004598:	2301      	moveq	r3, #1
 800459a:	2300      	movne	r3, #0
 800459c:	b2db      	uxtb	r3, r3
 800459e:	461a      	mov	r2, r3
 80045a0:	79fb      	ldrb	r3, [r7, #7]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d08d      	beq.n	80044c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80045c6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6812      	ldr	r2, [r2, #0]
 80045d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045d6:	f023 0301 	bic.w	r3, r3, #1
 80045da:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2220      	movs	r2, #32
 80045e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b084      	sub	sp, #16
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004602:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f7ff fb85 	bl	8003d24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800461a:	bf00      	nop
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b082      	sub	sp, #8
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004638:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2220      	movs	r2, #32
 800463e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7ff fb61 	bl	8003d10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800464e:	bf00      	nop
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004656:	b480      	push	{r7}
 8004658:	b083      	sub	sp, #12
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004692:	b480      	push	{r7}
 8004694:	b085      	sub	sp, #20
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d101      	bne.n	80046a8 <HAL_UARTEx_DisableFifoMode+0x16>
 80046a4:	2302      	movs	r3, #2
 80046a6:	e027      	b.n	80046f8 <HAL_UARTEx_DisableFifoMode+0x66>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2224      	movs	r2, #36	; 0x24
 80046b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0201 	bic.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80046d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3714      	adds	r7, #20
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004718:	2302      	movs	r3, #2
 800471a:	e02d      	b.n	8004778 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2224      	movs	r2, #36	; 0x24
 8004728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0201 	bic.w	r2, r2, #1
 8004742:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f84f 	bl	80047fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2220      	movs	r2, #32
 800476a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004790:	2b01      	cmp	r3, #1
 8004792:	d101      	bne.n	8004798 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004794:	2302      	movs	r3, #2
 8004796:	e02d      	b.n	80047f4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2224      	movs	r2, #36	; 0x24
 80047a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0201 	bic.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f811 	bl	80047fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b089      	sub	sp, #36	; 0x24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004804:	4a2f      	ldr	r2, [pc, #188]	; (80048c4 <UARTEx_SetNbDataToProcess+0xc8>)
 8004806:	f107 0314 	add.w	r3, r7, #20
 800480a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800480e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004812:	4a2d      	ldr	r2, [pc, #180]	; (80048c8 <UARTEx_SetNbDataToProcess+0xcc>)
 8004814:	f107 030c 	add.w	r3, r7, #12
 8004818:	e892 0003 	ldmia.w	r2, {r0, r1}
 800481c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004824:	2b00      	cmp	r3, #0
 8004826:	d108      	bne.n	800483a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004838:	e03d      	b.n	80048b6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800483a:	2308      	movs	r3, #8
 800483c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800483e:	2308      	movs	r3, #8
 8004840:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	0e5b      	lsrs	r3, r3, #25
 800484a:	b2db      	uxtb	r3, r3
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	0f5b      	lsrs	r3, r3, #29
 800485a:	b2db      	uxtb	r3, r3
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004862:	7fbb      	ldrb	r3, [r7, #30]
 8004864:	7f3a      	ldrb	r2, [r7, #28]
 8004866:	f107 0120 	add.w	r1, r7, #32
 800486a:	440a      	add	r2, r1
 800486c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004870:	fb02 f303 	mul.w	r3, r2, r3
 8004874:	7f3a      	ldrb	r2, [r7, #28]
 8004876:	f107 0120 	add.w	r1, r7, #32
 800487a:	440a      	add	r2, r1
 800487c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004880:	fb93 f3f2 	sdiv	r3, r3, r2
 8004884:	b29a      	uxth	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800488c:	7ffb      	ldrb	r3, [r7, #31]
 800488e:	7f7a      	ldrb	r2, [r7, #29]
 8004890:	f107 0120 	add.w	r1, r7, #32
 8004894:	440a      	add	r2, r1
 8004896:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800489a:	fb02 f303 	mul.w	r3, r2, r3
 800489e:	7f7a      	ldrb	r2, [r7, #29]
 80048a0:	f107 0120 	add.w	r1, r7, #32
 80048a4:	440a      	add	r2, r1
 80048a6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80048aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80048b6:	bf00      	nop
 80048b8:	3724      	adds	r7, #36	; 0x24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	080053f0 	.word	0x080053f0
 80048c8:	080053f8 	.word	0x080053f8

080048cc <__errno>:
 80048cc:	4b01      	ldr	r3, [pc, #4]	; (80048d4 <__errno+0x8>)
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	20000010 	.word	0x20000010

080048d8 <__libc_init_array>:
 80048d8:	b570      	push	{r4, r5, r6, lr}
 80048da:	4e0d      	ldr	r6, [pc, #52]	; (8004910 <__libc_init_array+0x38>)
 80048dc:	4c0d      	ldr	r4, [pc, #52]	; (8004914 <__libc_init_array+0x3c>)
 80048de:	1ba4      	subs	r4, r4, r6
 80048e0:	10a4      	asrs	r4, r4, #2
 80048e2:	2500      	movs	r5, #0
 80048e4:	42a5      	cmp	r5, r4
 80048e6:	d109      	bne.n	80048fc <__libc_init_array+0x24>
 80048e8:	4e0b      	ldr	r6, [pc, #44]	; (8004918 <__libc_init_array+0x40>)
 80048ea:	4c0c      	ldr	r4, [pc, #48]	; (800491c <__libc_init_array+0x44>)
 80048ec:	f000 fc64 	bl	80051b8 <_init>
 80048f0:	1ba4      	subs	r4, r4, r6
 80048f2:	10a4      	asrs	r4, r4, #2
 80048f4:	2500      	movs	r5, #0
 80048f6:	42a5      	cmp	r5, r4
 80048f8:	d105      	bne.n	8004906 <__libc_init_array+0x2e>
 80048fa:	bd70      	pop	{r4, r5, r6, pc}
 80048fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004900:	4798      	blx	r3
 8004902:	3501      	adds	r5, #1
 8004904:	e7ee      	b.n	80048e4 <__libc_init_array+0xc>
 8004906:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800490a:	4798      	blx	r3
 800490c:	3501      	adds	r5, #1
 800490e:	e7f2      	b.n	80048f6 <__libc_init_array+0x1e>
 8004910:	0800549c 	.word	0x0800549c
 8004914:	0800549c 	.word	0x0800549c
 8004918:	0800549c 	.word	0x0800549c
 800491c:	080054a0 	.word	0x080054a0

08004920 <memcpy>:
 8004920:	b510      	push	{r4, lr}
 8004922:	1e43      	subs	r3, r0, #1
 8004924:	440a      	add	r2, r1
 8004926:	4291      	cmp	r1, r2
 8004928:	d100      	bne.n	800492c <memcpy+0xc>
 800492a:	bd10      	pop	{r4, pc}
 800492c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004930:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004934:	e7f7      	b.n	8004926 <memcpy+0x6>

08004936 <memset>:
 8004936:	4402      	add	r2, r0
 8004938:	4603      	mov	r3, r0
 800493a:	4293      	cmp	r3, r2
 800493c:	d100      	bne.n	8004940 <memset+0xa>
 800493e:	4770      	bx	lr
 8004940:	f803 1b01 	strb.w	r1, [r3], #1
 8004944:	e7f9      	b.n	800493a <memset+0x4>
	...

08004948 <rand>:
 8004948:	b538      	push	{r3, r4, r5, lr}
 800494a:	4b13      	ldr	r3, [pc, #76]	; (8004998 <rand+0x50>)
 800494c:	681c      	ldr	r4, [r3, #0]
 800494e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004950:	b97b      	cbnz	r3, 8004972 <rand+0x2a>
 8004952:	2018      	movs	r0, #24
 8004954:	f000 f84c 	bl	80049f0 <malloc>
 8004958:	4a10      	ldr	r2, [pc, #64]	; (800499c <rand+0x54>)
 800495a:	4b11      	ldr	r3, [pc, #68]	; (80049a0 <rand+0x58>)
 800495c:	63a0      	str	r0, [r4, #56]	; 0x38
 800495e:	e9c0 2300 	strd	r2, r3, [r0]
 8004962:	4b10      	ldr	r3, [pc, #64]	; (80049a4 <rand+0x5c>)
 8004964:	6083      	str	r3, [r0, #8]
 8004966:	230b      	movs	r3, #11
 8004968:	8183      	strh	r3, [r0, #12]
 800496a:	2201      	movs	r2, #1
 800496c:	2300      	movs	r3, #0
 800496e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004972:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004974:	480c      	ldr	r0, [pc, #48]	; (80049a8 <rand+0x60>)
 8004976:	690a      	ldr	r2, [r1, #16]
 8004978:	694b      	ldr	r3, [r1, #20]
 800497a:	4c0c      	ldr	r4, [pc, #48]	; (80049ac <rand+0x64>)
 800497c:	4350      	muls	r0, r2
 800497e:	fb04 0003 	mla	r0, r4, r3, r0
 8004982:	fba2 2304 	umull	r2, r3, r2, r4
 8004986:	4403      	add	r3, r0
 8004988:	1c54      	adds	r4, r2, #1
 800498a:	f143 0500 	adc.w	r5, r3, #0
 800498e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8004992:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8004996:	bd38      	pop	{r3, r4, r5, pc}
 8004998:	20000010 	.word	0x20000010
 800499c:	abcd330e 	.word	0xabcd330e
 80049a0:	e66d1234 	.word	0xe66d1234
 80049a4:	0005deec 	.word	0x0005deec
 80049a8:	5851f42d 	.word	0x5851f42d
 80049ac:	4c957f2d 	.word	0x4c957f2d

080049b0 <siprintf>:
 80049b0:	b40e      	push	{r1, r2, r3}
 80049b2:	b500      	push	{lr}
 80049b4:	b09c      	sub	sp, #112	; 0x70
 80049b6:	ab1d      	add	r3, sp, #116	; 0x74
 80049b8:	9002      	str	r0, [sp, #8]
 80049ba:	9006      	str	r0, [sp, #24]
 80049bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049c0:	4809      	ldr	r0, [pc, #36]	; (80049e8 <siprintf+0x38>)
 80049c2:	9107      	str	r1, [sp, #28]
 80049c4:	9104      	str	r1, [sp, #16]
 80049c6:	4909      	ldr	r1, [pc, #36]	; (80049ec <siprintf+0x3c>)
 80049c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80049cc:	9105      	str	r1, [sp, #20]
 80049ce:	6800      	ldr	r0, [r0, #0]
 80049d0:	9301      	str	r3, [sp, #4]
 80049d2:	a902      	add	r1, sp, #8
 80049d4:	f000 f916 	bl	8004c04 <_svfiprintf_r>
 80049d8:	9b02      	ldr	r3, [sp, #8]
 80049da:	2200      	movs	r2, #0
 80049dc:	701a      	strb	r2, [r3, #0]
 80049de:	b01c      	add	sp, #112	; 0x70
 80049e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80049e4:	b003      	add	sp, #12
 80049e6:	4770      	bx	lr
 80049e8:	20000010 	.word	0x20000010
 80049ec:	ffff0208 	.word	0xffff0208

080049f0 <malloc>:
 80049f0:	4b02      	ldr	r3, [pc, #8]	; (80049fc <malloc+0xc>)
 80049f2:	4601      	mov	r1, r0
 80049f4:	6818      	ldr	r0, [r3, #0]
 80049f6:	f000 b851 	b.w	8004a9c <_malloc_r>
 80049fa:	bf00      	nop
 80049fc:	20000010 	.word	0x20000010

08004a00 <_free_r>:
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	4605      	mov	r5, r0
 8004a04:	2900      	cmp	r1, #0
 8004a06:	d045      	beq.n	8004a94 <_free_r+0x94>
 8004a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a0c:	1f0c      	subs	r4, r1, #4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	bfb8      	it	lt
 8004a12:	18e4      	addlt	r4, r4, r3
 8004a14:	f000 fb9f 	bl	8005156 <__malloc_lock>
 8004a18:	4a1f      	ldr	r2, [pc, #124]	; (8004a98 <_free_r+0x98>)
 8004a1a:	6813      	ldr	r3, [r2, #0]
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	b933      	cbnz	r3, 8004a2e <_free_r+0x2e>
 8004a20:	6063      	str	r3, [r4, #4]
 8004a22:	6014      	str	r4, [r2, #0]
 8004a24:	4628      	mov	r0, r5
 8004a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a2a:	f000 bb95 	b.w	8005158 <__malloc_unlock>
 8004a2e:	42a3      	cmp	r3, r4
 8004a30:	d90c      	bls.n	8004a4c <_free_r+0x4c>
 8004a32:	6821      	ldr	r1, [r4, #0]
 8004a34:	1862      	adds	r2, r4, r1
 8004a36:	4293      	cmp	r3, r2
 8004a38:	bf04      	itt	eq
 8004a3a:	681a      	ldreq	r2, [r3, #0]
 8004a3c:	685b      	ldreq	r3, [r3, #4]
 8004a3e:	6063      	str	r3, [r4, #4]
 8004a40:	bf04      	itt	eq
 8004a42:	1852      	addeq	r2, r2, r1
 8004a44:	6022      	streq	r2, [r4, #0]
 8004a46:	6004      	str	r4, [r0, #0]
 8004a48:	e7ec      	b.n	8004a24 <_free_r+0x24>
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	b10a      	cbz	r2, 8004a54 <_free_r+0x54>
 8004a50:	42a2      	cmp	r2, r4
 8004a52:	d9fa      	bls.n	8004a4a <_free_r+0x4a>
 8004a54:	6819      	ldr	r1, [r3, #0]
 8004a56:	1858      	adds	r0, r3, r1
 8004a58:	42a0      	cmp	r0, r4
 8004a5a:	d10b      	bne.n	8004a74 <_free_r+0x74>
 8004a5c:	6820      	ldr	r0, [r4, #0]
 8004a5e:	4401      	add	r1, r0
 8004a60:	1858      	adds	r0, r3, r1
 8004a62:	4282      	cmp	r2, r0
 8004a64:	6019      	str	r1, [r3, #0]
 8004a66:	d1dd      	bne.n	8004a24 <_free_r+0x24>
 8004a68:	6810      	ldr	r0, [r2, #0]
 8004a6a:	6852      	ldr	r2, [r2, #4]
 8004a6c:	605a      	str	r2, [r3, #4]
 8004a6e:	4401      	add	r1, r0
 8004a70:	6019      	str	r1, [r3, #0]
 8004a72:	e7d7      	b.n	8004a24 <_free_r+0x24>
 8004a74:	d902      	bls.n	8004a7c <_free_r+0x7c>
 8004a76:	230c      	movs	r3, #12
 8004a78:	602b      	str	r3, [r5, #0]
 8004a7a:	e7d3      	b.n	8004a24 <_free_r+0x24>
 8004a7c:	6820      	ldr	r0, [r4, #0]
 8004a7e:	1821      	adds	r1, r4, r0
 8004a80:	428a      	cmp	r2, r1
 8004a82:	bf04      	itt	eq
 8004a84:	6811      	ldreq	r1, [r2, #0]
 8004a86:	6852      	ldreq	r2, [r2, #4]
 8004a88:	6062      	str	r2, [r4, #4]
 8004a8a:	bf04      	itt	eq
 8004a8c:	1809      	addeq	r1, r1, r0
 8004a8e:	6021      	streq	r1, [r4, #0]
 8004a90:	605c      	str	r4, [r3, #4]
 8004a92:	e7c7      	b.n	8004a24 <_free_r+0x24>
 8004a94:	bd38      	pop	{r3, r4, r5, pc}
 8004a96:	bf00      	nop
 8004a98:	20000094 	.word	0x20000094

08004a9c <_malloc_r>:
 8004a9c:	b570      	push	{r4, r5, r6, lr}
 8004a9e:	1ccd      	adds	r5, r1, #3
 8004aa0:	f025 0503 	bic.w	r5, r5, #3
 8004aa4:	3508      	adds	r5, #8
 8004aa6:	2d0c      	cmp	r5, #12
 8004aa8:	bf38      	it	cc
 8004aaa:	250c      	movcc	r5, #12
 8004aac:	2d00      	cmp	r5, #0
 8004aae:	4606      	mov	r6, r0
 8004ab0:	db01      	blt.n	8004ab6 <_malloc_r+0x1a>
 8004ab2:	42a9      	cmp	r1, r5
 8004ab4:	d903      	bls.n	8004abe <_malloc_r+0x22>
 8004ab6:	230c      	movs	r3, #12
 8004ab8:	6033      	str	r3, [r6, #0]
 8004aba:	2000      	movs	r0, #0
 8004abc:	bd70      	pop	{r4, r5, r6, pc}
 8004abe:	f000 fb4a 	bl	8005156 <__malloc_lock>
 8004ac2:	4a21      	ldr	r2, [pc, #132]	; (8004b48 <_malloc_r+0xac>)
 8004ac4:	6814      	ldr	r4, [r2, #0]
 8004ac6:	4621      	mov	r1, r4
 8004ac8:	b991      	cbnz	r1, 8004af0 <_malloc_r+0x54>
 8004aca:	4c20      	ldr	r4, [pc, #128]	; (8004b4c <_malloc_r+0xb0>)
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	b91b      	cbnz	r3, 8004ad8 <_malloc_r+0x3c>
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	f000 fb17 	bl	8005104 <_sbrk_r>
 8004ad6:	6020      	str	r0, [r4, #0]
 8004ad8:	4629      	mov	r1, r5
 8004ada:	4630      	mov	r0, r6
 8004adc:	f000 fb12 	bl	8005104 <_sbrk_r>
 8004ae0:	1c43      	adds	r3, r0, #1
 8004ae2:	d124      	bne.n	8004b2e <_malloc_r+0x92>
 8004ae4:	230c      	movs	r3, #12
 8004ae6:	6033      	str	r3, [r6, #0]
 8004ae8:	4630      	mov	r0, r6
 8004aea:	f000 fb35 	bl	8005158 <__malloc_unlock>
 8004aee:	e7e4      	b.n	8004aba <_malloc_r+0x1e>
 8004af0:	680b      	ldr	r3, [r1, #0]
 8004af2:	1b5b      	subs	r3, r3, r5
 8004af4:	d418      	bmi.n	8004b28 <_malloc_r+0x8c>
 8004af6:	2b0b      	cmp	r3, #11
 8004af8:	d90f      	bls.n	8004b1a <_malloc_r+0x7e>
 8004afa:	600b      	str	r3, [r1, #0]
 8004afc:	50cd      	str	r5, [r1, r3]
 8004afe:	18cc      	adds	r4, r1, r3
 8004b00:	4630      	mov	r0, r6
 8004b02:	f000 fb29 	bl	8005158 <__malloc_unlock>
 8004b06:	f104 000b 	add.w	r0, r4, #11
 8004b0a:	1d23      	adds	r3, r4, #4
 8004b0c:	f020 0007 	bic.w	r0, r0, #7
 8004b10:	1ac3      	subs	r3, r0, r3
 8004b12:	d0d3      	beq.n	8004abc <_malloc_r+0x20>
 8004b14:	425a      	negs	r2, r3
 8004b16:	50e2      	str	r2, [r4, r3]
 8004b18:	e7d0      	b.n	8004abc <_malloc_r+0x20>
 8004b1a:	428c      	cmp	r4, r1
 8004b1c:	684b      	ldr	r3, [r1, #4]
 8004b1e:	bf16      	itet	ne
 8004b20:	6063      	strne	r3, [r4, #4]
 8004b22:	6013      	streq	r3, [r2, #0]
 8004b24:	460c      	movne	r4, r1
 8004b26:	e7eb      	b.n	8004b00 <_malloc_r+0x64>
 8004b28:	460c      	mov	r4, r1
 8004b2a:	6849      	ldr	r1, [r1, #4]
 8004b2c:	e7cc      	b.n	8004ac8 <_malloc_r+0x2c>
 8004b2e:	1cc4      	adds	r4, r0, #3
 8004b30:	f024 0403 	bic.w	r4, r4, #3
 8004b34:	42a0      	cmp	r0, r4
 8004b36:	d005      	beq.n	8004b44 <_malloc_r+0xa8>
 8004b38:	1a21      	subs	r1, r4, r0
 8004b3a:	4630      	mov	r0, r6
 8004b3c:	f000 fae2 	bl	8005104 <_sbrk_r>
 8004b40:	3001      	adds	r0, #1
 8004b42:	d0cf      	beq.n	8004ae4 <_malloc_r+0x48>
 8004b44:	6025      	str	r5, [r4, #0]
 8004b46:	e7db      	b.n	8004b00 <_malloc_r+0x64>
 8004b48:	20000094 	.word	0x20000094
 8004b4c:	20000098 	.word	0x20000098

08004b50 <__ssputs_r>:
 8004b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b54:	688e      	ldr	r6, [r1, #8]
 8004b56:	429e      	cmp	r6, r3
 8004b58:	4682      	mov	sl, r0
 8004b5a:	460c      	mov	r4, r1
 8004b5c:	4690      	mov	r8, r2
 8004b5e:	4699      	mov	r9, r3
 8004b60:	d837      	bhi.n	8004bd2 <__ssputs_r+0x82>
 8004b62:	898a      	ldrh	r2, [r1, #12]
 8004b64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b68:	d031      	beq.n	8004bce <__ssputs_r+0x7e>
 8004b6a:	6825      	ldr	r5, [r4, #0]
 8004b6c:	6909      	ldr	r1, [r1, #16]
 8004b6e:	1a6f      	subs	r7, r5, r1
 8004b70:	6965      	ldr	r5, [r4, #20]
 8004b72:	2302      	movs	r3, #2
 8004b74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b78:	fb95 f5f3 	sdiv	r5, r5, r3
 8004b7c:	f109 0301 	add.w	r3, r9, #1
 8004b80:	443b      	add	r3, r7
 8004b82:	429d      	cmp	r5, r3
 8004b84:	bf38      	it	cc
 8004b86:	461d      	movcc	r5, r3
 8004b88:	0553      	lsls	r3, r2, #21
 8004b8a:	d530      	bpl.n	8004bee <__ssputs_r+0x9e>
 8004b8c:	4629      	mov	r1, r5
 8004b8e:	f7ff ff85 	bl	8004a9c <_malloc_r>
 8004b92:	4606      	mov	r6, r0
 8004b94:	b950      	cbnz	r0, 8004bac <__ssputs_r+0x5c>
 8004b96:	230c      	movs	r3, #12
 8004b98:	f8ca 3000 	str.w	r3, [sl]
 8004b9c:	89a3      	ldrh	r3, [r4, #12]
 8004b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ba2:	81a3      	strh	r3, [r4, #12]
 8004ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bac:	463a      	mov	r2, r7
 8004bae:	6921      	ldr	r1, [r4, #16]
 8004bb0:	f7ff feb6 	bl	8004920 <memcpy>
 8004bb4:	89a3      	ldrh	r3, [r4, #12]
 8004bb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bbe:	81a3      	strh	r3, [r4, #12]
 8004bc0:	6126      	str	r6, [r4, #16]
 8004bc2:	6165      	str	r5, [r4, #20]
 8004bc4:	443e      	add	r6, r7
 8004bc6:	1bed      	subs	r5, r5, r7
 8004bc8:	6026      	str	r6, [r4, #0]
 8004bca:	60a5      	str	r5, [r4, #8]
 8004bcc:	464e      	mov	r6, r9
 8004bce:	454e      	cmp	r6, r9
 8004bd0:	d900      	bls.n	8004bd4 <__ssputs_r+0x84>
 8004bd2:	464e      	mov	r6, r9
 8004bd4:	4632      	mov	r2, r6
 8004bd6:	4641      	mov	r1, r8
 8004bd8:	6820      	ldr	r0, [r4, #0]
 8004bda:	f000 faa3 	bl	8005124 <memmove>
 8004bde:	68a3      	ldr	r3, [r4, #8]
 8004be0:	1b9b      	subs	r3, r3, r6
 8004be2:	60a3      	str	r3, [r4, #8]
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	441e      	add	r6, r3
 8004be8:	6026      	str	r6, [r4, #0]
 8004bea:	2000      	movs	r0, #0
 8004bec:	e7dc      	b.n	8004ba8 <__ssputs_r+0x58>
 8004bee:	462a      	mov	r2, r5
 8004bf0:	f000 fab3 	bl	800515a <_realloc_r>
 8004bf4:	4606      	mov	r6, r0
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	d1e2      	bne.n	8004bc0 <__ssputs_r+0x70>
 8004bfa:	6921      	ldr	r1, [r4, #16]
 8004bfc:	4650      	mov	r0, sl
 8004bfe:	f7ff feff 	bl	8004a00 <_free_r>
 8004c02:	e7c8      	b.n	8004b96 <__ssputs_r+0x46>

08004c04 <_svfiprintf_r>:
 8004c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c08:	461d      	mov	r5, r3
 8004c0a:	898b      	ldrh	r3, [r1, #12]
 8004c0c:	061f      	lsls	r7, r3, #24
 8004c0e:	b09d      	sub	sp, #116	; 0x74
 8004c10:	4680      	mov	r8, r0
 8004c12:	460c      	mov	r4, r1
 8004c14:	4616      	mov	r6, r2
 8004c16:	d50f      	bpl.n	8004c38 <_svfiprintf_r+0x34>
 8004c18:	690b      	ldr	r3, [r1, #16]
 8004c1a:	b96b      	cbnz	r3, 8004c38 <_svfiprintf_r+0x34>
 8004c1c:	2140      	movs	r1, #64	; 0x40
 8004c1e:	f7ff ff3d 	bl	8004a9c <_malloc_r>
 8004c22:	6020      	str	r0, [r4, #0]
 8004c24:	6120      	str	r0, [r4, #16]
 8004c26:	b928      	cbnz	r0, 8004c34 <_svfiprintf_r+0x30>
 8004c28:	230c      	movs	r3, #12
 8004c2a:	f8c8 3000 	str.w	r3, [r8]
 8004c2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c32:	e0c8      	b.n	8004dc6 <_svfiprintf_r+0x1c2>
 8004c34:	2340      	movs	r3, #64	; 0x40
 8004c36:	6163      	str	r3, [r4, #20]
 8004c38:	2300      	movs	r3, #0
 8004c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c3c:	2320      	movs	r3, #32
 8004c3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c42:	2330      	movs	r3, #48	; 0x30
 8004c44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c48:	9503      	str	r5, [sp, #12]
 8004c4a:	f04f 0b01 	mov.w	fp, #1
 8004c4e:	4637      	mov	r7, r6
 8004c50:	463d      	mov	r5, r7
 8004c52:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004c56:	b10b      	cbz	r3, 8004c5c <_svfiprintf_r+0x58>
 8004c58:	2b25      	cmp	r3, #37	; 0x25
 8004c5a:	d13e      	bne.n	8004cda <_svfiprintf_r+0xd6>
 8004c5c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004c60:	d00b      	beq.n	8004c7a <_svfiprintf_r+0x76>
 8004c62:	4653      	mov	r3, sl
 8004c64:	4632      	mov	r2, r6
 8004c66:	4621      	mov	r1, r4
 8004c68:	4640      	mov	r0, r8
 8004c6a:	f7ff ff71 	bl	8004b50 <__ssputs_r>
 8004c6e:	3001      	adds	r0, #1
 8004c70:	f000 80a4 	beq.w	8004dbc <_svfiprintf_r+0x1b8>
 8004c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c76:	4453      	add	r3, sl
 8004c78:	9309      	str	r3, [sp, #36]	; 0x24
 8004c7a:	783b      	ldrb	r3, [r7, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 809d 	beq.w	8004dbc <_svfiprintf_r+0x1b8>
 8004c82:	2300      	movs	r3, #0
 8004c84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c8c:	9304      	str	r3, [sp, #16]
 8004c8e:	9307      	str	r3, [sp, #28]
 8004c90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c94:	931a      	str	r3, [sp, #104]	; 0x68
 8004c96:	462f      	mov	r7, r5
 8004c98:	2205      	movs	r2, #5
 8004c9a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004c9e:	4850      	ldr	r0, [pc, #320]	; (8004de0 <_svfiprintf_r+0x1dc>)
 8004ca0:	f7fb faae 	bl	8000200 <memchr>
 8004ca4:	9b04      	ldr	r3, [sp, #16]
 8004ca6:	b9d0      	cbnz	r0, 8004cde <_svfiprintf_r+0xda>
 8004ca8:	06d9      	lsls	r1, r3, #27
 8004caa:	bf44      	itt	mi
 8004cac:	2220      	movmi	r2, #32
 8004cae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004cb2:	071a      	lsls	r2, r3, #28
 8004cb4:	bf44      	itt	mi
 8004cb6:	222b      	movmi	r2, #43	; 0x2b
 8004cb8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004cbc:	782a      	ldrb	r2, [r5, #0]
 8004cbe:	2a2a      	cmp	r2, #42	; 0x2a
 8004cc0:	d015      	beq.n	8004cee <_svfiprintf_r+0xea>
 8004cc2:	9a07      	ldr	r2, [sp, #28]
 8004cc4:	462f      	mov	r7, r5
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	250a      	movs	r5, #10
 8004cca:	4639      	mov	r1, r7
 8004ccc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cd0:	3b30      	subs	r3, #48	; 0x30
 8004cd2:	2b09      	cmp	r3, #9
 8004cd4:	d94d      	bls.n	8004d72 <_svfiprintf_r+0x16e>
 8004cd6:	b1b8      	cbz	r0, 8004d08 <_svfiprintf_r+0x104>
 8004cd8:	e00f      	b.n	8004cfa <_svfiprintf_r+0xf6>
 8004cda:	462f      	mov	r7, r5
 8004cdc:	e7b8      	b.n	8004c50 <_svfiprintf_r+0x4c>
 8004cde:	4a40      	ldr	r2, [pc, #256]	; (8004de0 <_svfiprintf_r+0x1dc>)
 8004ce0:	1a80      	subs	r0, r0, r2
 8004ce2:	fa0b f000 	lsl.w	r0, fp, r0
 8004ce6:	4318      	orrs	r0, r3
 8004ce8:	9004      	str	r0, [sp, #16]
 8004cea:	463d      	mov	r5, r7
 8004cec:	e7d3      	b.n	8004c96 <_svfiprintf_r+0x92>
 8004cee:	9a03      	ldr	r2, [sp, #12]
 8004cf0:	1d11      	adds	r1, r2, #4
 8004cf2:	6812      	ldr	r2, [r2, #0]
 8004cf4:	9103      	str	r1, [sp, #12]
 8004cf6:	2a00      	cmp	r2, #0
 8004cf8:	db01      	blt.n	8004cfe <_svfiprintf_r+0xfa>
 8004cfa:	9207      	str	r2, [sp, #28]
 8004cfc:	e004      	b.n	8004d08 <_svfiprintf_r+0x104>
 8004cfe:	4252      	negs	r2, r2
 8004d00:	f043 0302 	orr.w	r3, r3, #2
 8004d04:	9207      	str	r2, [sp, #28]
 8004d06:	9304      	str	r3, [sp, #16]
 8004d08:	783b      	ldrb	r3, [r7, #0]
 8004d0a:	2b2e      	cmp	r3, #46	; 0x2e
 8004d0c:	d10c      	bne.n	8004d28 <_svfiprintf_r+0x124>
 8004d0e:	787b      	ldrb	r3, [r7, #1]
 8004d10:	2b2a      	cmp	r3, #42	; 0x2a
 8004d12:	d133      	bne.n	8004d7c <_svfiprintf_r+0x178>
 8004d14:	9b03      	ldr	r3, [sp, #12]
 8004d16:	1d1a      	adds	r2, r3, #4
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	9203      	str	r2, [sp, #12]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	bfb8      	it	lt
 8004d20:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004d24:	3702      	adds	r7, #2
 8004d26:	9305      	str	r3, [sp, #20]
 8004d28:	4d2e      	ldr	r5, [pc, #184]	; (8004de4 <_svfiprintf_r+0x1e0>)
 8004d2a:	7839      	ldrb	r1, [r7, #0]
 8004d2c:	2203      	movs	r2, #3
 8004d2e:	4628      	mov	r0, r5
 8004d30:	f7fb fa66 	bl	8000200 <memchr>
 8004d34:	b138      	cbz	r0, 8004d46 <_svfiprintf_r+0x142>
 8004d36:	2340      	movs	r3, #64	; 0x40
 8004d38:	1b40      	subs	r0, r0, r5
 8004d3a:	fa03 f000 	lsl.w	r0, r3, r0
 8004d3e:	9b04      	ldr	r3, [sp, #16]
 8004d40:	4303      	orrs	r3, r0
 8004d42:	3701      	adds	r7, #1
 8004d44:	9304      	str	r3, [sp, #16]
 8004d46:	7839      	ldrb	r1, [r7, #0]
 8004d48:	4827      	ldr	r0, [pc, #156]	; (8004de8 <_svfiprintf_r+0x1e4>)
 8004d4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d4e:	2206      	movs	r2, #6
 8004d50:	1c7e      	adds	r6, r7, #1
 8004d52:	f7fb fa55 	bl	8000200 <memchr>
 8004d56:	2800      	cmp	r0, #0
 8004d58:	d038      	beq.n	8004dcc <_svfiprintf_r+0x1c8>
 8004d5a:	4b24      	ldr	r3, [pc, #144]	; (8004dec <_svfiprintf_r+0x1e8>)
 8004d5c:	bb13      	cbnz	r3, 8004da4 <_svfiprintf_r+0x1a0>
 8004d5e:	9b03      	ldr	r3, [sp, #12]
 8004d60:	3307      	adds	r3, #7
 8004d62:	f023 0307 	bic.w	r3, r3, #7
 8004d66:	3308      	adds	r3, #8
 8004d68:	9303      	str	r3, [sp, #12]
 8004d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d6c:	444b      	add	r3, r9
 8004d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8004d70:	e76d      	b.n	8004c4e <_svfiprintf_r+0x4a>
 8004d72:	fb05 3202 	mla	r2, r5, r2, r3
 8004d76:	2001      	movs	r0, #1
 8004d78:	460f      	mov	r7, r1
 8004d7a:	e7a6      	b.n	8004cca <_svfiprintf_r+0xc6>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	3701      	adds	r7, #1
 8004d80:	9305      	str	r3, [sp, #20]
 8004d82:	4619      	mov	r1, r3
 8004d84:	250a      	movs	r5, #10
 8004d86:	4638      	mov	r0, r7
 8004d88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d8c:	3a30      	subs	r2, #48	; 0x30
 8004d8e:	2a09      	cmp	r2, #9
 8004d90:	d903      	bls.n	8004d9a <_svfiprintf_r+0x196>
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0c8      	beq.n	8004d28 <_svfiprintf_r+0x124>
 8004d96:	9105      	str	r1, [sp, #20]
 8004d98:	e7c6      	b.n	8004d28 <_svfiprintf_r+0x124>
 8004d9a:	fb05 2101 	mla	r1, r5, r1, r2
 8004d9e:	2301      	movs	r3, #1
 8004da0:	4607      	mov	r7, r0
 8004da2:	e7f0      	b.n	8004d86 <_svfiprintf_r+0x182>
 8004da4:	ab03      	add	r3, sp, #12
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	4622      	mov	r2, r4
 8004daa:	4b11      	ldr	r3, [pc, #68]	; (8004df0 <_svfiprintf_r+0x1ec>)
 8004dac:	a904      	add	r1, sp, #16
 8004dae:	4640      	mov	r0, r8
 8004db0:	f3af 8000 	nop.w
 8004db4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004db8:	4681      	mov	r9, r0
 8004dba:	d1d6      	bne.n	8004d6a <_svfiprintf_r+0x166>
 8004dbc:	89a3      	ldrh	r3, [r4, #12]
 8004dbe:	065b      	lsls	r3, r3, #25
 8004dc0:	f53f af35 	bmi.w	8004c2e <_svfiprintf_r+0x2a>
 8004dc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004dc6:	b01d      	add	sp, #116	; 0x74
 8004dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dcc:	ab03      	add	r3, sp, #12
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	4622      	mov	r2, r4
 8004dd2:	4b07      	ldr	r3, [pc, #28]	; (8004df0 <_svfiprintf_r+0x1ec>)
 8004dd4:	a904      	add	r1, sp, #16
 8004dd6:	4640      	mov	r0, r8
 8004dd8:	f000 f882 	bl	8004ee0 <_printf_i>
 8004ddc:	e7ea      	b.n	8004db4 <_svfiprintf_r+0x1b0>
 8004dde:	bf00      	nop
 8004de0:	08005460 	.word	0x08005460
 8004de4:	08005466 	.word	0x08005466
 8004de8:	0800546a 	.word	0x0800546a
 8004dec:	00000000 	.word	0x00000000
 8004df0:	08004b51 	.word	0x08004b51

08004df4 <_printf_common>:
 8004df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004df8:	4691      	mov	r9, r2
 8004dfa:	461f      	mov	r7, r3
 8004dfc:	688a      	ldr	r2, [r1, #8]
 8004dfe:	690b      	ldr	r3, [r1, #16]
 8004e00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e04:	4293      	cmp	r3, r2
 8004e06:	bfb8      	it	lt
 8004e08:	4613      	movlt	r3, r2
 8004e0a:	f8c9 3000 	str.w	r3, [r9]
 8004e0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e12:	4606      	mov	r6, r0
 8004e14:	460c      	mov	r4, r1
 8004e16:	b112      	cbz	r2, 8004e1e <_printf_common+0x2a>
 8004e18:	3301      	adds	r3, #1
 8004e1a:	f8c9 3000 	str.w	r3, [r9]
 8004e1e:	6823      	ldr	r3, [r4, #0]
 8004e20:	0699      	lsls	r1, r3, #26
 8004e22:	bf42      	ittt	mi
 8004e24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004e28:	3302      	addmi	r3, #2
 8004e2a:	f8c9 3000 	strmi.w	r3, [r9]
 8004e2e:	6825      	ldr	r5, [r4, #0]
 8004e30:	f015 0506 	ands.w	r5, r5, #6
 8004e34:	d107      	bne.n	8004e46 <_printf_common+0x52>
 8004e36:	f104 0a19 	add.w	sl, r4, #25
 8004e3a:	68e3      	ldr	r3, [r4, #12]
 8004e3c:	f8d9 2000 	ldr.w	r2, [r9]
 8004e40:	1a9b      	subs	r3, r3, r2
 8004e42:	42ab      	cmp	r3, r5
 8004e44:	dc28      	bgt.n	8004e98 <_printf_common+0xa4>
 8004e46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004e4a:	6822      	ldr	r2, [r4, #0]
 8004e4c:	3300      	adds	r3, #0
 8004e4e:	bf18      	it	ne
 8004e50:	2301      	movne	r3, #1
 8004e52:	0692      	lsls	r2, r2, #26
 8004e54:	d42d      	bmi.n	8004eb2 <_printf_common+0xbe>
 8004e56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e5a:	4639      	mov	r1, r7
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	47c0      	blx	r8
 8004e60:	3001      	adds	r0, #1
 8004e62:	d020      	beq.n	8004ea6 <_printf_common+0xb2>
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	68e5      	ldr	r5, [r4, #12]
 8004e68:	f8d9 2000 	ldr.w	r2, [r9]
 8004e6c:	f003 0306 	and.w	r3, r3, #6
 8004e70:	2b04      	cmp	r3, #4
 8004e72:	bf08      	it	eq
 8004e74:	1aad      	subeq	r5, r5, r2
 8004e76:	68a3      	ldr	r3, [r4, #8]
 8004e78:	6922      	ldr	r2, [r4, #16]
 8004e7a:	bf0c      	ite	eq
 8004e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e80:	2500      	movne	r5, #0
 8004e82:	4293      	cmp	r3, r2
 8004e84:	bfc4      	itt	gt
 8004e86:	1a9b      	subgt	r3, r3, r2
 8004e88:	18ed      	addgt	r5, r5, r3
 8004e8a:	f04f 0900 	mov.w	r9, #0
 8004e8e:	341a      	adds	r4, #26
 8004e90:	454d      	cmp	r5, r9
 8004e92:	d11a      	bne.n	8004eca <_printf_common+0xd6>
 8004e94:	2000      	movs	r0, #0
 8004e96:	e008      	b.n	8004eaa <_printf_common+0xb6>
 8004e98:	2301      	movs	r3, #1
 8004e9a:	4652      	mov	r2, sl
 8004e9c:	4639      	mov	r1, r7
 8004e9e:	4630      	mov	r0, r6
 8004ea0:	47c0      	blx	r8
 8004ea2:	3001      	adds	r0, #1
 8004ea4:	d103      	bne.n	8004eae <_printf_common+0xba>
 8004ea6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eae:	3501      	adds	r5, #1
 8004eb0:	e7c3      	b.n	8004e3a <_printf_common+0x46>
 8004eb2:	18e1      	adds	r1, r4, r3
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	2030      	movs	r0, #48	; 0x30
 8004eb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ebc:	4422      	add	r2, r4
 8004ebe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ec2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ec6:	3302      	adds	r3, #2
 8004ec8:	e7c5      	b.n	8004e56 <_printf_common+0x62>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	4622      	mov	r2, r4
 8004ece:	4639      	mov	r1, r7
 8004ed0:	4630      	mov	r0, r6
 8004ed2:	47c0      	blx	r8
 8004ed4:	3001      	adds	r0, #1
 8004ed6:	d0e6      	beq.n	8004ea6 <_printf_common+0xb2>
 8004ed8:	f109 0901 	add.w	r9, r9, #1
 8004edc:	e7d8      	b.n	8004e90 <_printf_common+0x9c>
	...

08004ee0 <_printf_i>:
 8004ee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ee4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004ee8:	460c      	mov	r4, r1
 8004eea:	7e09      	ldrb	r1, [r1, #24]
 8004eec:	b085      	sub	sp, #20
 8004eee:	296e      	cmp	r1, #110	; 0x6e
 8004ef0:	4617      	mov	r7, r2
 8004ef2:	4606      	mov	r6, r0
 8004ef4:	4698      	mov	r8, r3
 8004ef6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ef8:	f000 80b3 	beq.w	8005062 <_printf_i+0x182>
 8004efc:	d822      	bhi.n	8004f44 <_printf_i+0x64>
 8004efe:	2963      	cmp	r1, #99	; 0x63
 8004f00:	d036      	beq.n	8004f70 <_printf_i+0x90>
 8004f02:	d80a      	bhi.n	8004f1a <_printf_i+0x3a>
 8004f04:	2900      	cmp	r1, #0
 8004f06:	f000 80b9 	beq.w	800507c <_printf_i+0x19c>
 8004f0a:	2958      	cmp	r1, #88	; 0x58
 8004f0c:	f000 8083 	beq.w	8005016 <_printf_i+0x136>
 8004f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004f18:	e032      	b.n	8004f80 <_printf_i+0xa0>
 8004f1a:	2964      	cmp	r1, #100	; 0x64
 8004f1c:	d001      	beq.n	8004f22 <_printf_i+0x42>
 8004f1e:	2969      	cmp	r1, #105	; 0x69
 8004f20:	d1f6      	bne.n	8004f10 <_printf_i+0x30>
 8004f22:	6820      	ldr	r0, [r4, #0]
 8004f24:	6813      	ldr	r3, [r2, #0]
 8004f26:	0605      	lsls	r5, r0, #24
 8004f28:	f103 0104 	add.w	r1, r3, #4
 8004f2c:	d52a      	bpl.n	8004f84 <_printf_i+0xa4>
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6011      	str	r1, [r2, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	da03      	bge.n	8004f3e <_printf_i+0x5e>
 8004f36:	222d      	movs	r2, #45	; 0x2d
 8004f38:	425b      	negs	r3, r3
 8004f3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004f3e:	486f      	ldr	r0, [pc, #444]	; (80050fc <_printf_i+0x21c>)
 8004f40:	220a      	movs	r2, #10
 8004f42:	e039      	b.n	8004fb8 <_printf_i+0xd8>
 8004f44:	2973      	cmp	r1, #115	; 0x73
 8004f46:	f000 809d 	beq.w	8005084 <_printf_i+0x1a4>
 8004f4a:	d808      	bhi.n	8004f5e <_printf_i+0x7e>
 8004f4c:	296f      	cmp	r1, #111	; 0x6f
 8004f4e:	d020      	beq.n	8004f92 <_printf_i+0xb2>
 8004f50:	2970      	cmp	r1, #112	; 0x70
 8004f52:	d1dd      	bne.n	8004f10 <_printf_i+0x30>
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	f043 0320 	orr.w	r3, r3, #32
 8004f5a:	6023      	str	r3, [r4, #0]
 8004f5c:	e003      	b.n	8004f66 <_printf_i+0x86>
 8004f5e:	2975      	cmp	r1, #117	; 0x75
 8004f60:	d017      	beq.n	8004f92 <_printf_i+0xb2>
 8004f62:	2978      	cmp	r1, #120	; 0x78
 8004f64:	d1d4      	bne.n	8004f10 <_printf_i+0x30>
 8004f66:	2378      	movs	r3, #120	; 0x78
 8004f68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f6c:	4864      	ldr	r0, [pc, #400]	; (8005100 <_printf_i+0x220>)
 8004f6e:	e055      	b.n	800501c <_printf_i+0x13c>
 8004f70:	6813      	ldr	r3, [r2, #0]
 8004f72:	1d19      	adds	r1, r3, #4
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6011      	str	r1, [r2, #0]
 8004f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f80:	2301      	movs	r3, #1
 8004f82:	e08c      	b.n	800509e <_printf_i+0x1be>
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6011      	str	r1, [r2, #0]
 8004f88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f8c:	bf18      	it	ne
 8004f8e:	b21b      	sxthne	r3, r3
 8004f90:	e7cf      	b.n	8004f32 <_printf_i+0x52>
 8004f92:	6813      	ldr	r3, [r2, #0]
 8004f94:	6825      	ldr	r5, [r4, #0]
 8004f96:	1d18      	adds	r0, r3, #4
 8004f98:	6010      	str	r0, [r2, #0]
 8004f9a:	0628      	lsls	r0, r5, #24
 8004f9c:	d501      	bpl.n	8004fa2 <_printf_i+0xc2>
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	e002      	b.n	8004fa8 <_printf_i+0xc8>
 8004fa2:	0668      	lsls	r0, r5, #25
 8004fa4:	d5fb      	bpl.n	8004f9e <_printf_i+0xbe>
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	4854      	ldr	r0, [pc, #336]	; (80050fc <_printf_i+0x21c>)
 8004faa:	296f      	cmp	r1, #111	; 0x6f
 8004fac:	bf14      	ite	ne
 8004fae:	220a      	movne	r2, #10
 8004fb0:	2208      	moveq	r2, #8
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fb8:	6865      	ldr	r5, [r4, #4]
 8004fba:	60a5      	str	r5, [r4, #8]
 8004fbc:	2d00      	cmp	r5, #0
 8004fbe:	f2c0 8095 	blt.w	80050ec <_printf_i+0x20c>
 8004fc2:	6821      	ldr	r1, [r4, #0]
 8004fc4:	f021 0104 	bic.w	r1, r1, #4
 8004fc8:	6021      	str	r1, [r4, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d13d      	bne.n	800504a <_printf_i+0x16a>
 8004fce:	2d00      	cmp	r5, #0
 8004fd0:	f040 808e 	bne.w	80050f0 <_printf_i+0x210>
 8004fd4:	4665      	mov	r5, ip
 8004fd6:	2a08      	cmp	r2, #8
 8004fd8:	d10b      	bne.n	8004ff2 <_printf_i+0x112>
 8004fda:	6823      	ldr	r3, [r4, #0]
 8004fdc:	07db      	lsls	r3, r3, #31
 8004fde:	d508      	bpl.n	8004ff2 <_printf_i+0x112>
 8004fe0:	6923      	ldr	r3, [r4, #16]
 8004fe2:	6862      	ldr	r2, [r4, #4]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	bfde      	ittt	le
 8004fe8:	2330      	movle	r3, #48	; 0x30
 8004fea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004fee:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004ff2:	ebac 0305 	sub.w	r3, ip, r5
 8004ff6:	6123      	str	r3, [r4, #16]
 8004ff8:	f8cd 8000 	str.w	r8, [sp]
 8004ffc:	463b      	mov	r3, r7
 8004ffe:	aa03      	add	r2, sp, #12
 8005000:	4621      	mov	r1, r4
 8005002:	4630      	mov	r0, r6
 8005004:	f7ff fef6 	bl	8004df4 <_printf_common>
 8005008:	3001      	adds	r0, #1
 800500a:	d14d      	bne.n	80050a8 <_printf_i+0x1c8>
 800500c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005010:	b005      	add	sp, #20
 8005012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005016:	4839      	ldr	r0, [pc, #228]	; (80050fc <_printf_i+0x21c>)
 8005018:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800501c:	6813      	ldr	r3, [r2, #0]
 800501e:	6821      	ldr	r1, [r4, #0]
 8005020:	1d1d      	adds	r5, r3, #4
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6015      	str	r5, [r2, #0]
 8005026:	060a      	lsls	r2, r1, #24
 8005028:	d50b      	bpl.n	8005042 <_printf_i+0x162>
 800502a:	07ca      	lsls	r2, r1, #31
 800502c:	bf44      	itt	mi
 800502e:	f041 0120 	orrmi.w	r1, r1, #32
 8005032:	6021      	strmi	r1, [r4, #0]
 8005034:	b91b      	cbnz	r3, 800503e <_printf_i+0x15e>
 8005036:	6822      	ldr	r2, [r4, #0]
 8005038:	f022 0220 	bic.w	r2, r2, #32
 800503c:	6022      	str	r2, [r4, #0]
 800503e:	2210      	movs	r2, #16
 8005040:	e7b7      	b.n	8004fb2 <_printf_i+0xd2>
 8005042:	064d      	lsls	r5, r1, #25
 8005044:	bf48      	it	mi
 8005046:	b29b      	uxthmi	r3, r3
 8005048:	e7ef      	b.n	800502a <_printf_i+0x14a>
 800504a:	4665      	mov	r5, ip
 800504c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005050:	fb02 3311 	mls	r3, r2, r1, r3
 8005054:	5cc3      	ldrb	r3, [r0, r3]
 8005056:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800505a:	460b      	mov	r3, r1
 800505c:	2900      	cmp	r1, #0
 800505e:	d1f5      	bne.n	800504c <_printf_i+0x16c>
 8005060:	e7b9      	b.n	8004fd6 <_printf_i+0xf6>
 8005062:	6813      	ldr	r3, [r2, #0]
 8005064:	6825      	ldr	r5, [r4, #0]
 8005066:	6961      	ldr	r1, [r4, #20]
 8005068:	1d18      	adds	r0, r3, #4
 800506a:	6010      	str	r0, [r2, #0]
 800506c:	0628      	lsls	r0, r5, #24
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	d501      	bpl.n	8005076 <_printf_i+0x196>
 8005072:	6019      	str	r1, [r3, #0]
 8005074:	e002      	b.n	800507c <_printf_i+0x19c>
 8005076:	066a      	lsls	r2, r5, #25
 8005078:	d5fb      	bpl.n	8005072 <_printf_i+0x192>
 800507a:	8019      	strh	r1, [r3, #0]
 800507c:	2300      	movs	r3, #0
 800507e:	6123      	str	r3, [r4, #16]
 8005080:	4665      	mov	r5, ip
 8005082:	e7b9      	b.n	8004ff8 <_printf_i+0x118>
 8005084:	6813      	ldr	r3, [r2, #0]
 8005086:	1d19      	adds	r1, r3, #4
 8005088:	6011      	str	r1, [r2, #0]
 800508a:	681d      	ldr	r5, [r3, #0]
 800508c:	6862      	ldr	r2, [r4, #4]
 800508e:	2100      	movs	r1, #0
 8005090:	4628      	mov	r0, r5
 8005092:	f7fb f8b5 	bl	8000200 <memchr>
 8005096:	b108      	cbz	r0, 800509c <_printf_i+0x1bc>
 8005098:	1b40      	subs	r0, r0, r5
 800509a:	6060      	str	r0, [r4, #4]
 800509c:	6863      	ldr	r3, [r4, #4]
 800509e:	6123      	str	r3, [r4, #16]
 80050a0:	2300      	movs	r3, #0
 80050a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050a6:	e7a7      	b.n	8004ff8 <_printf_i+0x118>
 80050a8:	6923      	ldr	r3, [r4, #16]
 80050aa:	462a      	mov	r2, r5
 80050ac:	4639      	mov	r1, r7
 80050ae:	4630      	mov	r0, r6
 80050b0:	47c0      	blx	r8
 80050b2:	3001      	adds	r0, #1
 80050b4:	d0aa      	beq.n	800500c <_printf_i+0x12c>
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	079b      	lsls	r3, r3, #30
 80050ba:	d413      	bmi.n	80050e4 <_printf_i+0x204>
 80050bc:	68e0      	ldr	r0, [r4, #12]
 80050be:	9b03      	ldr	r3, [sp, #12]
 80050c0:	4298      	cmp	r0, r3
 80050c2:	bfb8      	it	lt
 80050c4:	4618      	movlt	r0, r3
 80050c6:	e7a3      	b.n	8005010 <_printf_i+0x130>
 80050c8:	2301      	movs	r3, #1
 80050ca:	464a      	mov	r2, r9
 80050cc:	4639      	mov	r1, r7
 80050ce:	4630      	mov	r0, r6
 80050d0:	47c0      	blx	r8
 80050d2:	3001      	adds	r0, #1
 80050d4:	d09a      	beq.n	800500c <_printf_i+0x12c>
 80050d6:	3501      	adds	r5, #1
 80050d8:	68e3      	ldr	r3, [r4, #12]
 80050da:	9a03      	ldr	r2, [sp, #12]
 80050dc:	1a9b      	subs	r3, r3, r2
 80050de:	42ab      	cmp	r3, r5
 80050e0:	dcf2      	bgt.n	80050c8 <_printf_i+0x1e8>
 80050e2:	e7eb      	b.n	80050bc <_printf_i+0x1dc>
 80050e4:	2500      	movs	r5, #0
 80050e6:	f104 0919 	add.w	r9, r4, #25
 80050ea:	e7f5      	b.n	80050d8 <_printf_i+0x1f8>
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1ac      	bne.n	800504a <_printf_i+0x16a>
 80050f0:	7803      	ldrb	r3, [r0, #0]
 80050f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050fa:	e76c      	b.n	8004fd6 <_printf_i+0xf6>
 80050fc:	08005471 	.word	0x08005471
 8005100:	08005482 	.word	0x08005482

08005104 <_sbrk_r>:
 8005104:	b538      	push	{r3, r4, r5, lr}
 8005106:	4c06      	ldr	r4, [pc, #24]	; (8005120 <_sbrk_r+0x1c>)
 8005108:	2300      	movs	r3, #0
 800510a:	4605      	mov	r5, r0
 800510c:	4608      	mov	r0, r1
 800510e:	6023      	str	r3, [r4, #0]
 8005110:	f7fb fd54 	bl	8000bbc <_sbrk>
 8005114:	1c43      	adds	r3, r0, #1
 8005116:	d102      	bne.n	800511e <_sbrk_r+0x1a>
 8005118:	6823      	ldr	r3, [r4, #0]
 800511a:	b103      	cbz	r3, 800511e <_sbrk_r+0x1a>
 800511c:	602b      	str	r3, [r5, #0]
 800511e:	bd38      	pop	{r3, r4, r5, pc}
 8005120:	2000030c 	.word	0x2000030c

08005124 <memmove>:
 8005124:	4288      	cmp	r0, r1
 8005126:	b510      	push	{r4, lr}
 8005128:	eb01 0302 	add.w	r3, r1, r2
 800512c:	d807      	bhi.n	800513e <memmove+0x1a>
 800512e:	1e42      	subs	r2, r0, #1
 8005130:	4299      	cmp	r1, r3
 8005132:	d00a      	beq.n	800514a <memmove+0x26>
 8005134:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005138:	f802 4f01 	strb.w	r4, [r2, #1]!
 800513c:	e7f8      	b.n	8005130 <memmove+0xc>
 800513e:	4283      	cmp	r3, r0
 8005140:	d9f5      	bls.n	800512e <memmove+0xa>
 8005142:	1881      	adds	r1, r0, r2
 8005144:	1ad2      	subs	r2, r2, r3
 8005146:	42d3      	cmn	r3, r2
 8005148:	d100      	bne.n	800514c <memmove+0x28>
 800514a:	bd10      	pop	{r4, pc}
 800514c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005150:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005154:	e7f7      	b.n	8005146 <memmove+0x22>

08005156 <__malloc_lock>:
 8005156:	4770      	bx	lr

08005158 <__malloc_unlock>:
 8005158:	4770      	bx	lr

0800515a <_realloc_r>:
 800515a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515c:	4607      	mov	r7, r0
 800515e:	4614      	mov	r4, r2
 8005160:	460e      	mov	r6, r1
 8005162:	b921      	cbnz	r1, 800516e <_realloc_r+0x14>
 8005164:	4611      	mov	r1, r2
 8005166:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800516a:	f7ff bc97 	b.w	8004a9c <_malloc_r>
 800516e:	b922      	cbnz	r2, 800517a <_realloc_r+0x20>
 8005170:	f7ff fc46 	bl	8004a00 <_free_r>
 8005174:	4625      	mov	r5, r4
 8005176:	4628      	mov	r0, r5
 8005178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800517a:	f000 f814 	bl	80051a6 <_malloc_usable_size_r>
 800517e:	42a0      	cmp	r0, r4
 8005180:	d20f      	bcs.n	80051a2 <_realloc_r+0x48>
 8005182:	4621      	mov	r1, r4
 8005184:	4638      	mov	r0, r7
 8005186:	f7ff fc89 	bl	8004a9c <_malloc_r>
 800518a:	4605      	mov	r5, r0
 800518c:	2800      	cmp	r0, #0
 800518e:	d0f2      	beq.n	8005176 <_realloc_r+0x1c>
 8005190:	4631      	mov	r1, r6
 8005192:	4622      	mov	r2, r4
 8005194:	f7ff fbc4 	bl	8004920 <memcpy>
 8005198:	4631      	mov	r1, r6
 800519a:	4638      	mov	r0, r7
 800519c:	f7ff fc30 	bl	8004a00 <_free_r>
 80051a0:	e7e9      	b.n	8005176 <_realloc_r+0x1c>
 80051a2:	4635      	mov	r5, r6
 80051a4:	e7e7      	b.n	8005176 <_realloc_r+0x1c>

080051a6 <_malloc_usable_size_r>:
 80051a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051aa:	1f18      	subs	r0, r3, #4
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	bfbc      	itt	lt
 80051b0:	580b      	ldrlt	r3, [r1, r0]
 80051b2:	18c0      	addlt	r0, r0, r3
 80051b4:	4770      	bx	lr
	...

080051b8 <_init>:
 80051b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ba:	bf00      	nop
 80051bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051be:	bc08      	pop	{r3}
 80051c0:	469e      	mov	lr, r3
 80051c2:	4770      	bx	lr

080051c4 <_fini>:
 80051c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c6:	bf00      	nop
 80051c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ca:	bc08      	pop	{r3}
 80051cc:	469e      	mov	lr, r3
 80051ce:	4770      	bx	lr
